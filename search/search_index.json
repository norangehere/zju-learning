{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/","title":"Chapter 1 Logic and Digital System","text":"<ol> <li>Discrete information processing systems</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#types-of-digital-systems","title":"Types of Digital Systems","text":"<ol> <li> <p>No state present:combinational logic system, output=Function(input)</p> </li> <li> <p>State present:</p> </li> <li> <p>state updated at discrete times -&gt; synchronous sequential system</p> </li> <li> <p>state updated at any time -&gt; asynchronous\uff08\u5f02\u6b65\uff09 sequential systeam</p> </li> <li> <p>state = Function(state,input)</p> </li> <li> <p>output = Function(state) or Function(state,input)</p> </li> <li> <p><code>e.g</code>\uff1adigital computer: synchronous,\u7ec4\u9891  </p> </li> <li><code>beyond</code>\uff1aembedded systems\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff09\uff1aanalog signal\uff0cneed A-to-D(digital) and D-to-A<ul> <li>analog signal- continuous voltage- sample\uff08\u91c7\u6837\uff09- digital voltage - DAC - discrete voltage - signal conditioning - continuous voltage</li> </ul> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#information-representation","title":"Information representation","text":"<ol> <li> <ul> <li>analog: continuous in value and time</li> </ul> </li> <li> <p>digital: asynchronous: discrete in value,continuous in time; synchronous:discrete in value and time</p> </li> <li> <p>\u4e8c\u8fdb\u5236\u6297\u5e72\u6270\u80fd\u529b\u5f3a</p> </li> <li> <p>dynamic RAM: capacitor charge (\u7535\u5bb9)</p> </li> <li>K(2^10)-M-G-T \u6bcf\u4e2a\u76f8\u5dee2^10</li> <li>non-numeric binary codes: e.g.\uff1acolor</li> <li>'one hot' code : you can represent 4 elements in radix r=2 with n=4 digits:<code>0001,0010,0100,1000</code>,each digit represents specific element</li> <li> <p>\u4ee5\u4e0b\u4e24\u79cd\u8868\u793a0-9\u65f6\u5bf9\u79f0\u6570\u5b57\u4e92\u4e3a\u53cd\u7801</p> <ul> <li> <p>Excess3 Code:\u4f593\u7801</p> </li> <li> <p>8\uff0c4\uff0c-2\uff0c-1 Code\uff1a\u540e\u4e24\u4f4d\u5206\u522b\u4ee3\u8868-2\uff0c-1</p> </li> <li>Binary Coded Decimal\uff08BCD\uff09\uff1ause 8\uff0c4\uff0c2\uff0c1 code\uff0cbut only represent 0-9</li> <li> <p>example: 13 -&gt; 0001 | 0011</p> </li> <li> <p>application: good for direct interaction to people,like elevator,air conditioner</p> </li> <li>to correct the digit,subtract 10 by adding 6 modulo 16 </li> <li><code>eg</code>:13-&gt; 1101 +6 -&gt; 10011 -&gt; 0001 | 0011</li> <li>ASCII: 0 30,A 41,a 61 (in 16\u8fdb\u5236)</li> <li><code>PARITY BIT Error-Detection Codes</code>(\u5947\u5076\u68c0\u9519\u7801)\uff1a\u6dfb\u52a0\u4e00\u4f4d\uff08n+1\uff09\uff1aodd/even parity\uff1a\u4f7fn+1\u4f4d\u52a0\u8d77\u6765\u4e00\u5171\u6709\u5947/\u5076\u4e2a1</li> <li>Gray Code\uff1a\u76f8\u90bb\u72b6\u6001\u53ea\u6709\u4e00\u4f4d\u7801\u4e0d\u4e00\u6837\uff0c\u6e10\u53d8\u8fc7\u7a0b\u65f6\u4e0d\u4f1a\u51fa\u73b0\u7a81\u7136\u53d8\u5316</li> <li> <p>Application: Optical Shaft Encoder\uff0cdark represents 0\uff0cwhite represents 1</p> </li> <li> <p>\u5982\u679c\u4f20\u611f\u5668\u4f4d\u7f6e\u51fa\u73b0\u504f\u79fb\uff0c\u4e0d\u5728\u540c\u4e00\u76f4\u7ebf\uff0c\u7528Gray Code \u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef </p> </li> </ul> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#chapter-2-combinational-logic-circuits","title":"Chapter 2 Combinational Logic Circuits","text":"<ol> <li>\u4e0a\u4fa7 \u4e3aPMOS\u7ba1\uff0c\u5e38\u95ed\u5f00\u5173\uff1b\u4e0b\u4fa7\u4e3aNMOS\u7ba1\uff0c\u5e38\u5f00\u5f00\u5173 </li> </ol> <ol> <li></li> <li>Gate Delay:<ul> <li>When input changes,the output change doesn't occur instantaneously.</li> <li>the delay between an input changes and the resulting output change is the gate delay denoted by  $$ t_G $$ s</li> </ul> </li> <li>Logic Diagrams and Expressions: Truth Table,Equation(\u903b\u8f91\u51fd\u6570),Diagram,\u6ce2\u5f62\u56fe</li> <li>Boolean Algebra:</li> <li>$$ X(Y+Z)=XY+XZ $$</li> <li>$X+YZ=(X+Y)(X+Z)$</li> <li>Prf: $$ A=A\\cdot A=A\\cdot (A+C)  \\ A+BC=A(A+B+C)+BC=(A+B)(A+C) $$</li> <li>$\\overline{X\u00b7Y}=\\overline{X}+\\overline{Y}$</li> <li>Absorption Theorem: $A+A\u00b7B=A,A+\\overline{A}B=A+B$</li> <li>Consensus Law:</li> <li>$(A+B)(\\overline{A}+C)(B+C)=(A+B)(\\overline{A}+C)$ </li> <li>$AB+\\overline{A}C+BC=AB+\\overline{A}C$     Hint\uff1a $BC=BC(A+\\overline{A})$</li> <li>$\\overline{X}Z+X=(X+\\overline{X})(Z+X)=Z+X$     Hint: $X+YZ=(X+Y)(X+Z)$ </li> <li> <p>Precedence:</p> <ul> <li>Parentheses</li> <li>NOT</li> <li>AND</li> <li>OR</li> </ul> </li> <li> <p>Examples:</p> </li> <li></li> <li>$$ F=\\overline{\\overline{AC+\\overline{A}BC}+\\overline{B}C+AB\\overline{C}} \\ =(AC+\\overline{A}BC)\\overline{\\overline{B}C}\\cdot \\overline{AB\\overline{C}}\\ =C(A+\\overline{A}B)(B+\\overline{C})(\\overline{A}+\\overline{B}+C) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC+\\overline{A}\\cdot\\overline{C}+\\overline{B}\\cdot\\overline{C}) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC) \\ =ABC+\\overline{A}BC=BC $$</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#canonical-forms","title":"Canonical Forms","text":"<ol> <li>minterm &amp; maxterms:maxterm is complemented(\u53d6\u53cd) with minterm;  </li> <li>$\\overline{m}_i=M_i,\\overline{M}_i=m_i$</li> <li>$F=\\sum{m_i}=\\overline{\\prod{M_i}},i=0,1,2,3,\\dots,2^n-1$</li> <li>usage:turn logic function into numbers by minterm</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#standard-forms","title":"Standard Forms","text":"<ol> <li>SOP: an OR of AND terms,POS: an AND of OR terms</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#gate-input-cost","title":"Gate Input Cost","text":"<ol> <li>the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. </li> <li>G - inverters not counted</li> <li>GN - inverters counted</li> <li>For SOP and POS equations, it can be found from the equation(s) by finding the sum of:</li> <li>all literal appearances\uff08Literal cost,L:\u516c\u5f0f\u4e2d\u4e00\u5171\u51fa\u73b0\u7684\u53d8\u91cf\u4e2a\u6570\uff0c\u53ef\u91cd\u590d\uff09</li> <li>the number of terms excluding single literal terms,(G) and</li> <li>optionally, the number of distinct complemented single literals (GN) \u8ba1\u7b97\u975e\u95e8.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#karnaugh-maps","title":"Karnaugh Maps","text":"<p>\u76f8\u90bb\u7684\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0cGray\u7801\u987a\u5e8f  \u4e09\u53d8\u91cf\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5708\uff0c\u5373\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u76f8\u90bb </p> <ol> <li>\u6d88\u9664\uff1aKarnaugh\u56fe\u4e2d\u6709\u4e24\u4e2a\u76f8\u90bb\u5c0f\u683c\u5b50\u5219\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u53d8\u91cf</li> <li>\u56db\u53d8\u91cf\uff1a</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#buffer","title":"Buffer","text":"<ol> <li>A buffer is a gate with the function F=X :</li> <li>the same as a connection</li> <li>used to improve circuit voltage levels and increase the speed of circuit operation</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#nand-gates","title":"NAND Gates","text":"<ol> <li>This NAND symbol is called Invert-OR, since inputs are inverted and then ORed together. </li> <li>AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#exclusive-or-exclusive-nor","title":"Exclusive OR/ Exclusive NOR","text":"<ol> <li>The XOR function is:  $X\u2295Y=X\\overline{Y}+\\overline{X}Y$</li> <li>The eXclusive NOR (XNOR) function, otherwise \u000bknown as equivalence is: $\\overline{X\u2295Y}=XY+\\overline{XY} $ </li> <li>$X\u2295\\overline{Y}= \\overline{X\u2295Y}$</li> <li>$X\u2295Y\u2295Z=X\u2295(Y\u2295Z)$</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#odd-and-even-functions","title":"Odd and Even Functions","text":"<ol> <li>The 1s of an odd function correspond to minterms having an index with an odd number of 1s.</li> <li>The 1s of an even function correspond to minterms having an index with an even number of 1s.</li> <li>\u5947\u51fd\u6570\u53d6\u975e\u5373\u4e3a\u5076\u51fd\u6570</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#parity-generators-and-checkers","title":"Parity Generators and Checkers","text":"<ol> <li>\u5076\u6821\u9a8c\u7801\u751f\u6210\u5668\u4e0e\u68c0\u9a8c\u5668</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#the-3-state-buffer","title":"The 3-State Buffer","text":"<ol> <li>For the symbol and truth table, IN is the data input, and EN, the control input.    For EN = 0, regardless of the value on IN (denoted by X), the output value is Hi-Z.    For EN = 1, the output value follows the input value.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#3-state-logic-circuit","title":"3-State Logic Circuit","text":"<ol> <li> <p>Data Selection Function: If s = 0, OL = IN0, else OL = IN1</p> </li> <li> <p>Performing data selection with 3-state buffers:</p> </li> <li> <p>Since EN0 = S and EN1 = S, one of the two buffer outputs is always Hi-Z plus the last row of the table never occurs.</p> </li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#chapter-3-combinational-logic-design","title":"Chapter 3 Combinational Logic Design","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#part-1-implementation-technology-and-logic-design","title":"Part 1 Implementation Technology and Logic Design","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#_1","title":"\u5de5\u827a\u6620\u5c04","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#nand-mapping-algorithm","title":"NAND Mapping Algorithm","text":"<ol> <li> <p>Replace ANDs and ORs:</p> </li> <li> <p>Repeat the following pair of actions until there is at most one inverter between :</p> </li> <li> <p>A circuit input or driving NAND gate output, and-</p> </li> <li> <p>The attached NAND gate inputs.</p> <p> </p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#nor-mapping-algorithm","title":"NOR Mapping Algorithm","text":"<p>\u200b   Similar to the NAND,first Replace ANDs and ORs</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#part-2-combinational-logic","title":"Part 2 Combinational Logic","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#decoding","title":"Decoding","text":"<ol> <li>Decoding - the conversion of an n-bit input code to an m-bit output code with$n\\leqslant m\\leqslant2n$ such that each valid code word produces a unique output code</li> <li>Circuits that perform decoding are called decoders</li> <li>Here, functional blocks for decoding are called n-to-m line decoders, where $m\\leqslant2n$, and    generate 2n (or fewer) minterms for the n input variables</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#decoder-with-enable","title":"Decoder with Enable","text":"<p>\u7531\u4e8e2-4\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u53ea\u6709\u8be5\u95e8\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06$A_1,A_0$\u7ec4\u6210\u7684\u8bd1\u7801\u5668\u5f53\u6210EN\uff0cEN\u5f53\u6210\u8f93\u5165\u4fe1\u53f7</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#bcd-to-segment-decoder","title":"BCD-to-Segment Decoder","text":"<ol> <li>\u5171\u9633\u6781\u4e0e\u5171\u9634\u6781\u63a5\u6cd5\uff1a</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#encoding","title":"Encoding","text":"<ol> <li> <p>Encoding - the opposite of decoding - the conversion of an m-bit input code to a $n$-bit output code with $n &lt; m&lt;  2^n$  such that each valid code word produces a unique output code</p> </li> <li> <p>An encoder has $2^n$ (or fewer) input lines and $n$ output lines which generate the binary code corresponding to the input values</p> </li> <li> <p>\u4f20\u7edf\u7f16\u7801\u5668\u95ee\u9898\uff1a\u5982\u4ee5\u4e0b\u8f93\u51fa\u65b9\u7a0b\u5f0f\u5bf9\u5e94\u7f16\u7801\u5668\uff0c\u82e5$D_6,D_7$\u540c\u65f6\u4e3a1\uff0c\u4e0d\u80fd\u5224\u65ad\u662f$A_2$\u8fd8\u662f$A_1$\uff0c\u5373\u6709\u4e0d\u786e\u5b9a\u6027</p> </li> </ol> <p></p> <ol> <li>\u4f18\u5148\u7f16\u7801\u5668\uff08Priority Encoder\uff09</li> <li>One encoder that can accept all possible combinations of input values and produce a meaningful result is a priority encoder.</li> <li>Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with  the corresponding binary code for that position.</li> <li>example:<ul> <li>Priority encoder with 5 inputs (D4, D3, D2, D1, D0) - highest priority to most significant 1 present - Code outputs A2, A1, A0 and V where V indicates at least one 1 present.</li> <li></li> </ul> </li> <li>Xs in input part of table represent 0 or 1; thus table entries correspond to product terms instead of minterms. The column on the left shows that all 32 minterms are present in the product terms in the table</li> <li>Xs \u5728\u8f93\u51fa\u5217\u8868\u793a\u65e0\u5173\u60c5\u51b5\u4e0d\u540c</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#selecting","title":"Selecting","text":"<ol> <li>Selecting of data or information is a critical function in digital systems and computers</li> <li>Logic circuits that perform selecting are called multiplexers</li> <li>Selecting can also be done by three-state logic or transmission gates</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#multiplexer","title":"Multiplexer","text":"<ol> <li>A multiplexer selects information from an input line and directs the information to an output line</li> <li>typical multiplexer has n control inputs ($S_{n-1}, \u2026 S_0$) called selection inputs, $2^n$ information inputs ($I_{2^n - 1}, \u2026 I_0$), and one output $Y$</li> <li>A multiplexer can be designed to have m information inputs with $m &lt; 2^n$ as well as n selection inputs </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#2-to-1-line-multiplexer","title":"2-to-1-Line Multiplexer","text":"<ol> <li>The single selection variable S has two values:</li> <li>S = 0 selects input $I_0$</li> <li> <p>S = 1 selects input $I_1$</p> </li> <li> <p>The equation:$Y =\\overline{S}I_0 + SI_1$</p> </li> <li> <p>The circuit:</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#multiplexer-width-expansion","title":"Multiplexer Width Expansion(\u9009\u62e9\u591a\u4f4d)","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#example4-to-1-line-quad-multiplexer","title":"example:4-to-1-line quad multiplexer","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#other-selection-implementations","title":"Other Selection Implementations","text":"<ol> <li>Three-state logic in place of AND-OR\u3002 Gate input cost = 18</li> </ol> <ol> <li>Distributing the decoding across the three-state drivers\uff08\u5206\u5c42\u9009\u62e9\uff09 Gate input cost = 14</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-1","title":"Combinational Logic Implementation- Multiplexer Approach 1","text":"<p>\u67e5\u627e\u8868</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-2","title":"Combinational Logic Implementation - Multiplexer Approach 2","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#part-3-arithmetic-functions","title":"Part 3 Arithmetic functions","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#function-block","title":"Function Block","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#half-adder","title":"Half-Adder","text":"<p>\u4e24\u8f93\u5165\u4e24\u8f93\u51fa</p> <p></p> <ol> <li>$S$\u4e3a$X\\oplus Y,$$C$\u4e3a$XY$</li> </ol> <p></p> <ol> <li>\u5e38\u89c1\u4e24\u79cd\u7535\u8def\u5b9e\u73b0</li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#full-adder","title":"Full-Adder","text":"<p>\u5168\u52a0\u5668\u5373\u8003\u8651\u4e0a\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u5373$Z$or$C_i$</p> <p>S=$\\overline{C_i}(A\\oplus B)+C_i(\\overline{A\\oplus B})$</p> <p></p> <p>The term $X\\cdot Y$  is carry generate,$X\\oplus Y$ is carry propagate</p> <p></p> <ol> <li>Ripple-Carry Binary Adder:\u9700\u8981\u5ef6\u65f6  \u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668</li> </ol> <p></p> <ol> <li>Group Carry Lookahead Logic</li> </ol> <p></p> <p></p> <p></p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#unsigned-subtraction","title":"Unsigned Subtraction","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#complements","title":"Complements \u8865\u7801","text":"<ol> <li>Diminished Radix Complement of N: defined as $(r^n-1)-N$ ,known as \u53cd\u7801 $1's$ complement</li> <li>Radix Complement: defined as $r^n-N$  $2's$ complement</li> <li>\u8865\u7801\uff1a\u5bf9n\u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u76f8\u5f53\u4e8e\u7b2c\u4e00\u4f4d$a_{n-1}$\u4ee3\u8868$-2^{n-1}$,\u540e\u7eed\u6bcf\u4f4d\u90fd\u4ee3\u8868$2^k$</li> <li></li> </ol> <p>\u5373M-N\u65f6\uff0c\u51cf\u6570N\u5148\u6c42\u8865\u7801$2^n-N$\uff0c\u7136\u540e$M+(2^n-N)$,\u82e5\u4ea7\u751f\u8fdb\u4f4d1\uff0c\u8bf4\u660e\u591f\u51cf\uff0c\u5bf9\u5e94\u503c\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u8fdb\u4f4d\u4e3a0\uff0c\u8bf4\u660e\u4e0d\u591f\u51cf\uff0c\u5219\u5bf9\u7ed3\u679c\u53d6\u8865\u7801\u5e76\u52a0\u8d1f\u53f7</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#_2","title":"\u6709\u7b26\u53f7\u51cf\u6cd5","text":"<ol> <li>\u8bbe\u52a0\u6cd5\u4e3a0\uff0c\u51cf\u6cd5\u4e3a1\uff0c\u6b63\u6570\u7b2c\u4e00\u4f4d0\uff0c\u8d1f\u6570\u7b2c\u4e00\u4f4d1\uff0c\u90a3\u4e48\u5bf9\u51cf\u6570\u7b2c\u4e00\u4f4d\uff0c\u7b26\u53f7\uff0c\u88ab\u51cf\u6570\u7b2c\u4e00\u4f4d\u6784\u6210\u7684\u5e8f\u5217\uff0c\u82e5\u6709\u5076\u6570\u4e2a0\uff0c\u5728\u6ca1\u6709\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u53f7\u76f8\u52a0</li> <li>\u82e5\u88ab\u52a0\u6570\u4e0e\u88ab\u51cf\u6570\u4e3a\u8d1f\uff0c\u5219\u53d6\u5bf9\u5e94\u8865\u7801\uff08\u4e0d\u6539\u53d8\u7b26\u53f7\u4f4d\uff09\uff0c\u4e4b\u540e\u82e5\u662f\u52a0\u6cd5\u5219\u6b63\u5e38\u8fdb\u884c\uff0c\u51cf\u6cd5\u5219\u7c7b\u4f3c\u5730\u5bf9\u51cf\u6570\u53d6\u8865</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#_3","title":"\u6ea2\u51fa","text":"<p>\u540c\u53f7\u76f8\u52a0\u3001\u5f02\u53f7\u76f8\u51cf\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa</p> <ol> <li>\u5224\u65ad\u6ea2\u51fa\uff1a$V=C_n\\oplus C_{n-1}$,\u5373$C_n$\u4e0e$C_{n-1}$\u7b26\u53f7\u4e00\u81f4\u5219\u4e0d\u6ea2\u51fa\uff0c\u5426\u5219\u6ea2\u51fa</li> </ol> <p>\u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f0\uff0c\u6ea2\u51fa\u53ea\u53ef\u80fd\u662f$C_{n-1}$\u4e3a1</p> <p>\u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f1\uff0c\u82e5\u4e0d\u6ea2\u51fa$C_{n-1}$\u9700\u8981\u4e3a1</p> <ol> <li> <p>\u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a\u4e24\u4e2a\u9996\u4f4d\u90fd\u662f1</p> </li> <li> <p>\u6709\u7b26\u53f7\u6570\uff1a\u540c\u53f7\u65f6\u6709\u53ef\u80fd\u6ea2\u51fa</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter1-3/#_4","title":"\u5e38\u6570\u9664\u6cd5\u3001\u4e58\u6cd5","text":"<p>\u5bf9\u4e8e2\u7684\u5e42\u6b21\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u7ed3\u679c\uff0c\u5bf9\u4e8e\u975e2\u5e42\u6b21\u53ef\u4ee5\u5e38\u6570\u52a0\u6cd5\u548c2\u7684\u5e42\u6b21\u4e58\u9664\u76f8\u7ed3\u5408\u5f97\u5230\u7ed3\u679c\u3002</p> <p>\u5982$3x=2^1x+2^0x$,\u5373$x[31:0]={x[30:0],1'b0}+x[31:0]$.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/","title":"Chapter 4  Part 1","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#sequential-circuits-introduction","title":"Sequential Circuits Introduction","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#_1","title":"\u65f6\u5e8f\u7535\u8def\u4ecb\u7ecd","text":"<ol> <li>\u7ec4\u6210\uff1a</li> </ol> <ul> <li>\u73b0\u4ee3\u590d\u6742\u7535\u8def\u8bbe\u8ba1\u5927\u591a\u4f7f\u7528\u540c\u6b65</li> <li>Storage elements: Latches or Flip-Flops</li> <li>\u7ec4\u5408\u903b\u8f91\uff1a<ul> <li>Implements a multiple-output switching function</li> <li>Inputs are signals from the outside.</li> <li>Outputs are signals to the outside.</li> <li>Other inputs, State or Present State are signals from storage elements.</li> <li>The remaining outputs,Next State are inputs to storage elements.</li> </ul> </li> <li>Combinatorial Logic:<ul> <li>Next state function(\u6b21\u6001\u65b9\u7a0b): Next State = f(Inputs, State)</li> <li>Output function (Mealy): Outputs = g(Inputs, State)</li> <li>Output function (Moore): Outputs = h(State)</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#_2","title":"\u65f6\u5e8f\u7535\u8def\u5206\u7c7b","text":"<ol> <li>\u540c\u6b65(Synchronous)\uff1a\u5728\u67d0\u51e0\u4e2a\u65f6\u95f4\u68c0\u6d4b\uff0c\u4ec0\u4e48\u65f6\u5019\u89c2\u6d4b\u8f93\u5165\u548c\u6539\u53d8\u72b6\u6001\u4ec5\u4e0e\u65f6\u95f4\u4fe1\u53f7\u6709\u5173\u3002\u6240\u6709\u5143\u4ef6\u5728\u65f6\u949f\u6a21\u5757\u63a7\u5236\u4e0b\u540c\u65f6\u66f4\u65b0\u3002\u540c\u6b65\u62bd\u8c61\u4f7f\u590d\u6742\u7684\u8bbe\u8ba1\u53d8\u5f97\u6613\u4e8e\u5904\u7406\uff01</li> </ol> <p>CPU\uff1a\u540c\u6b65</p> <p>\u65f6\u949f\u6a21\u5757\uff1a</p> <pre><code>always@ (posedge,clk) begin //\u53ea\u8981\u65f6\u949f\u4fe1\u53f7\u5411\u4e0a\u53d8\u52a8\uff0c\u5c31\u4f1a\u6267\u884c\u8be5\u6a21\u5757 ---&gt; \u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u68c0\u6d4b \u540c\u6b65\n\nend\n</code></pre> <ol> <li>\u5f02\u6b65(Asynchronous)\uff1a\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u6539\u53d8\uff0c\u89c2\u6d4b\u8f93\u5165\u4e0e\u72b6\u6001\uff0c\u5373\u65f6\u54cd\u5e94\u3002</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#_3","title":"\u79bb\u6563\u4e8b\u4ef6\u4eff\u771f","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#latch","title":"Latch","text":"<ul> <li>\u9519\u8bef\u7531\u4e8e$S$\u53d8\u5316\u4f20\u5230\u53cd\u76f8\u5668\u8f93\u51fa\u6709\u5ef6\u8fdf\uff0c\u56e0\u6b64\u51fa\u73b0$S$\u75311\u53d80\u540e\uff0c$\\overline{S}$\u5e76\u672a\u7acb\u5373\u75310\u53d81\uff0c\u4f7f\u5f97\u4e24\u8005\u90fd\u662f0\uff0c\u8f93\u51fa\u4e5f\u53d8\u6210\u4e860</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#ay","title":"\u5c06A\u4e0eY\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def","text":"<ul> <li>S\u4e3a1\u65f6\uff0c$Y=B$\uff0cS\u4e3a0\u65f6\uff0cB\u4e0d\u6539\u53d8Y\uff0c\u56e0\u6b64Y\u53ef\u4ee5\u50a8\u5b58B\u7684\u503c</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#_4","title":"\u518d\u52a0\u4e00\u4e2a\u975e\u95e8","text":"<ul> <li>\u4f18\u70b9\uff1a\u7535\u8def\u7b80\u5355</li> <li>\u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u7cbe\u786e </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#basic-nand-overlines-overliner-latch","title":"Basic (NAND) $\\overline{S} \u2013 \\overline{R}$ Latch \u9501\u5b58\u5668","text":"<ul> <li>\u8f93\u516500\u662f\u7981\u6b62\u7684</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#basic-nor-s-r-latch","title":"Basic (NOR) S \u2013 R Latch","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#clocked-s-r-latch","title":"Clocked S-R Latch","text":"<ul> <li>C\u4e3a0\uff0c\u9501\u5b58\u5668\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a1\uff0c\u4e0d\u6539\u53d8\u503c\uff1bC\u4e3a1\uff0c\u8f93\u5165\u76f8\u5f53\u4e8e$\\overline{S},\\overline{R}$.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#d-latch","title":"\u6539\u8fdb\uff1a\u4f7f\u5f97\u6ca1\u6709\u975e\u6cd5\u60c5\u51b5\u2014\u2014D Latch","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#flip-flops","title":"Flip-Flops","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#the-latch-timing-problem","title":"The Latch Timing Problem","text":"<ul> <li>\u53ea\u8981 C = 1\uff0cY \u7684\u503c\u5c31\u4f1a\u7ee7\u7eed\u53d8\u5316\uff01</li> <li>\u6240\u9700\u884c\u4e3a\uff1aY \u5728\u6bcf\u4e2a\u65f6\u949f\u8109\u51b2\u4e2d\u4ec5\u66f4\u6539\u4e00\u6b21</li> <li>\u89e3\u51b3\u65b9\u6848\u662f\u65ad\u5f00\u5b58\u50a8\u5143\u4ef6\u5185\u4ece Y \u5230 Y \u7684\u95ed\u5408\u8def\u5f84\uff0c\u4f7f\u7528\u89e6\u53d1\u5668\uff08flip-flop\uff09</li> <li>a master-slave flip-flop</li> <li>an edge-triggered flip-flop</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#s-r-master-slave-flip-flop","title":"S-R Master-Slave Flip-Flop","text":"<ul> <li>\u5de6\u4e3b(master),\u53f3\u4ece(slave)</li> <li>\u5047\u8bbeS=1,R=0\uff0cC\u75310\u53d81\uff0c\u4e3b\u9501\u5b58\u5668\u5bf9\u5e94Q\u4e3a1\uff1bC\u518d\u53d80\uff0c\u4ece\u9501\u5b58\u5668\u63a5\u6536\u5916\u90e8\u8f93\u5165\uff0c\u5373Q\u4e0e$\\overline{Q}$\uff0c\u5bf9\u5e94\u8f93\u51faQ\u4e3a1</li> <li>C\u5728\u4efb\u4f55\u72b6\u6001\uff0cS,R\u8f93\u5165\u7aef\u90fd\u4e0d\u53ef\u80fd\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\u72b6\u6001</li> <li>\u53ea\u6709\u5f53clock\u5b8c\u6210\u4e00\u6b21$0\\rarr 1\\rarr 0$\u53d8\u5316\u7684\u5468\u671f\u540e\uff0c\u8f93\u51faQ\u624d\u4f1a\u6539\u53d8</li> <li>\u95ee\u9898\uff1aclock\u4e3a1\u65f6\uff0c\u7531\u4e8e\u5916\u90e8\u8f93\u5165\u53d8\u5316\u5e26\u6765\u7684\u7d2f\u79ef\u6548\u5e94\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u80fd\u9519\u8bef\uff0c\u79f0\u4e3a1\u2018s catching</li> <li>\u89e6\u53d1\u5668\u8f93\u51fa\u7684\u53d8\u5316\u4f1a\u56e0\u8109\u51b2\u5bbd\u5ea6\u800c\u5ef6\u8fdf\uff0c\u4ece\u800c\u4f7f\u7535\u8def\u53d8\u6162</li> <li>\u5f53 C = 1 \u65f6\uff0c\u5141\u8bb8 S \u548c R \u66f4\u6539\uff0c\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1\uff0c\u7136\u540e\u53d8\u56de 0\uff0cR \u4fdd\u6301\u5728 0 \u3002\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a 1 \uff0c1 \u88ab\u8f6c\u79fb\u5230\u4ece\u9501\u5b58\u5668</li> <li>\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0\uff0cR \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0 \uff0c\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u590d\u4f4d 0 \u88ab\u4f20\u8f93\u5230\u4ece\u9501\u5b58\u5668</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#edge-triggered-flip-flop","title":"Edge-Triggered Flip-Flop","text":"<ul> <li> <p>\u4e3b\u9501\u5b58\u5668\u53d8\u4e3aD\u9501\u5b58\u5668</p> </li> <li> <p>\u53ea\u770b\u8fb9\u6cbf\u60c5\u51b5\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa\uff0c\u5176\u4ed6\u65f6\u5019\u8f93\u5165\u4e0d\u5f71\u54cd</p> </li> </ul> <p></p> <p>\u200b                                                                                                      \u4e0a\u5347\u6cbf\u89e6\u53d1\u5668\uff08Positive-Triggered Flip-Flop\uff09</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#standard-symbols-for-storage-elements","title":"Standard Symbols for Storage Elements","text":"<ul> <li>\u4e3b\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u4fa7\u7684\u8868\u793a\u4e0d\u5141\u8bb8\u8f93\u5165\u6539\u53d8\u3002</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#actual-circuit-of-edge-triggered-d-flip-flop","title":"Actual Circuit of Edge-Triggered D Flip-Flop","text":"<p>6\u4e2a\u4e0e\u975e\u95e8\uff0c\u6210\u672c\u8f83\u4f4e</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#direct-input","title":"Direct Input","text":"<ul> <li> <p>\u5f02\u6b65\u8d4b\u521d\u503c\uff1a\u901a\u8fc7S,R\u8f93\u5165\u4e3a\u89e6\u53d1\u5668\u8d4b\u521d\u503c\uff0c\u591a\u7528\u4e8e\u7cfb\u7edf\u590d\u4f4d</p> </li> <li> <p>\u82e5\u4f7f\u7528\u540c\u6b65\u8d4b\u521d\u503c\uff1a\u8bbe\u7f6eD</p> </li> <li> <p>\u5bf9\u6240\u793a\u7535\u8def</p> </li> <li> <p>0 applied to R resets the flip-flop to the 0 state</p> </li> <li> <p>0 applied to S sets the flip-flop to the 1 state</p> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#analysis","title":"Analysis","text":"<ol> <li>\u8f93\u5165:$x(t)$,\u8f93\u51fa:$y(t)$,\u72b6\u6001:$A(t),B(t)$</li> <li></li> </ol> <p>a important equation:$Q=D$</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#stable-table","title":"Stable Table","text":"<p>\u6709\u9650\u72b6\u6001\u673a</p> <ol> <li>Alternate State Table \u4e8c\u7ef4\u8868\uff1a</li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#state-diagrams","title":"State Diagrams","text":"<p>The sequential circuit function can be represented in graphical form as a state diagram with the following components\uff1a</p> <ul> <li>A circle with the state name in it for each state</li> <li>A directed arc from the Present State to the Next State for each state transition</li> <li>A label on each directed arc with the Input values which causes the state transition, and</li> <li>A label: </li> <li>On each circle with the output value produced, or</li> <li> <p>On each directed arc with the output value produced.</p> </li> <li> <p>Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762)    Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a)</p> </li> <li>Example\uff1a/\u5de6\u4fa7\u8f93\u5165\uff0c\u53f3\u4fa7\u8f93\u51fa\uff0c\u7531\u73b0\u6001\u6307\u5411\u6b21\u6001\uff0c\u4e0b\u4f8b\u4e3aMealy\u578b</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#equivalent-state-definitions","title":"Equivalent State Definitions","text":"<p>\u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u5373\u5bf9\u4efb\u610f\u4e00\u79cd\u8f93\u5165\u90fd\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u4e0e\u6b21\u6001</p> <ol> <li>\u4f8b\uff1a\u4e0b\u56fe\u4e2dS2\u4e0eS3</li> </ol> <p></p> <p>\u56e0\u6b64\u53ef\u4ee5\u6539\u5199</p> <p></p> <p>\u7136\u540e\u53d1\u73b0S1\u4e0eS2\u7b49\u6548</p> <p></p> <p>\u6b64\u65f6\u4e0d\u518d\u6709\u53ef\u4ee5\u5408\u5e76\u7684</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#moore-and-mealy-models","title":"Moore and Mealy Models","text":"<p>Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs).   Two formal models exist:</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#moore-model","title":"Moore Model","text":"<ol> <li>Outputs are a function ONLY of states.Usually specified on the states.</li> </ol> <ol> <li>State Table</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#mealy-model","title":"Mealy Model","text":"<ol> <li>Outputs are a function of inputs AND states.Usually specified on the state transition arcs.</li> </ol> <ol> <li>State Table</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#_5","title":"\u6df7\u5408\u578b\u5199\u6cd5","text":"<p>\u6307\u5411\u540c\u4e00\u4e2a\u6b21\u6001\u7684\u8f93\u51fa\u76f8\u540c\u65f6\u628a\u8f93\u51fa\u653e\u8fdb\u5708</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#one-more-example","title":"One more example","text":"<p>\u6a215\u8ba1\u6570\u5668\uff0c\u82e5\u4ece0\u5f00\u59cb\uff0c\u5219\u4f1a0~4\u5faa\u73af\u53d8\u5316\uff0c\u4f46\u82e5\u5916\u90e8\u5e72\u6270\u4ea7\u751f5-7\uff0c\u4e0b\u6b21\u4ecd\u4f1a\u5207\u6362\u56de0-4\uff0c\u4ece\u800c\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u4e0e\u9519\u8bef\u3002</p> <p></p> <p></p> <p>Only states reachable from the reset state 000 are used: 000, 001, 010, 011, and 100. The circuit produces a 1 on Z after four clock periods and every five clock periods thereafter: 000 -&gt; 001 -&gt; 010 -&gt; 011 -&gt; 100 -&gt; 000 -&gt; 001 -&gt; 010 -&gt; 011 -&gt; 100 \u2026 </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#filp-flop-timing-parameters","title":"Filp-Flop Timing Parameters","text":"<ol> <li>$t_s$\uff1asetup time\uff0c\u5efa\u7acb\u65f6\u95f4</li> </ol> <p>\u6839\u636e\u5b9a\u4e49, $t_s$\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002</p> <ol> <li>$t_h$\uff1ahold time\uff0c\u89e6\u53d1\u8fb9\u6cbf\u540e\u8fc7\u4e00\u6bb5\u65f6\u95f4\u8f93\u5165\u624d\u80fd\u6539\u53d8\u3002\u73b0\u5728\u591a\u6570\u89e6\u53d1\u5668$t_h$\u53ef\u4ee5\u662f0</li> <li> <p>$t_w$\uff1aclock pulse width</p> </li> <li> <p>$t_{px}$\uff1apropagation delay. Measured from clock edge that triggers the output change to the output change.</p> </li> <li> <p>$t_{PHL}$ :High-to-Low   $t_{PLH}$ :Low-to-High   $t_{pd}$:max ($t_{PHL}$,$ t_{PLH}$) </p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P1/#circuit-and-system-level-timing","title":"Circuit and System Level Timing","text":"<ol> <li> <p>New Timing Components</p> </li> <li> <p>$t_p$  clock period - The interval between occurrences of a specific clock edge in a periodic clock</p> </li> <li> <p>$t_{pd,COMB}$ :total delay of combinational logic along the path from flip-flop output to flip-flop input</p> <p>\u7ec4\u5408\u903b\u8f91\u5728\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7684\u603b\u5ef6\u8fdf</p> </li> <li> <p>$t_{pd,FF}$\uff1a\u89e6\u53d1\u5668\u603b\u5ef6\u8fdf</p> </li> <li> <p>$t_{slack}$ \uff1a extra time in the clock period in addition to the sum of the delays and setup time on a path       \u53ef\u4ee5\u662f\u6b63\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570 \u6240\u6709\u8def\u5f84\u4e0a\u7684\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e\u96f6\u624d\u80fd\u6b63\u786e\u64cd\u4f5c      Must be greater than or equal to zero on all paths for correct operation</p> </li> </ol> <p></p> <ol> <li> <p>Timing Equations\uff1a    $$    t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s)    $$    For $t_{slack}$ greater than or equal to zero,    $$    t_p\\geqslant max(t_{pd,FF}+t_{pd,COMB}+t_s)    $$    for all paths from flip-flop output to flip-flop input</p> </li> <li> <p>Calculation of Allowable $t_{pd,COMB}$</p> </li> </ol> <p></p> <p></p> <p>\u56e0\u6b64\u66f4\u591a\u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/","title":"Chapter 4  Part 2","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#sequential-circuit-design","title":"Sequential Circuit Design","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#formulation-finding-a-state-diagram","title":"Formulation: Finding a State Diagram","text":"<p>A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset).</p> <p>\u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#a-example-sequence-recognizers","title":"A Example: Sequence Recognizers \u5e8f\u5217\u8bc6\u522b","text":"<ol> <li>A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurrence.</li> </ol> <p>\u9700\u8981\u627e\u5230\u6307\u5b9a\u5e8f\u5217\u7684\u5934\u5c3e</p> <p>To develop a sequence recognizer state diagram:</p> <ul> <li>Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state).</li> <li>Add a state that recognizes that the first symbol has occurred.</li> <li>Add states that recognize each successive symbol occurring.</li> <li>The final state represents the input sequence (possibly less the final input value)  occurrence.</li> <li>Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred.</li> <li>Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred.</li> </ul> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#_1","title":"\u72b6\u6001\u7b49\u6548","text":"<ol> <li>\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1a \u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c\u3002</li> <li> <p>\u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001,\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c(S1, S2), \u6216\u8005\u8bf4\uff0c\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u5bf9\u3002\u7b49\u6548\u72b6\u6001\u53ef\u4ee5\u5408\u5e76\u3002\u8fd9\u91cc\u201c\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\u201d\u662f\u6307\u957f\u5ea6\u548c\u7ed3\u6784\u662f\u4efb\u610f\u7684\uff0c\u5b83\u5305\u542b\u65e0\u7a77\u591a\u4f4d\uff0c\u4e14\u6709\u65e0\u7a77\u591a\u79cd\u7ec4\u5408\u3002</p> </li> <li> <p>\u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5\uff1a\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u5176\u6b21\u6216\u6b21\u6001\u76f8\u540c\uff0c\u6216\u6b21\u6001\u4ea4\u9519\uff0c\u6216\u6b21\u6001\u5faa\u73af</p> </li> </ol> <p></p> <p></p> <p>$S_i$\u4e0e$S_j$\u7b49\u6548\uff0c$S_k$\u4e0e$S_l$\u7b49\u6548</p> <ol> <li> <p>\u9690\u542b\u8868\u5316\u7b80</p> </li> <li> <p>\u4f5c\u9690\u542b\u8868</p> </li> <li>\u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u627e\u7b49\u6548\u72b6\u6001\u5bf9<ul> <li>\u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b</li> <li>\u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b</li> <li>\u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002</li> </ul> </li> </ol> <p></p> <ul> <li>\u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9<ul> <li>\u7531\u4e8eCD\u3001DE\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5DG\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7</li> <li>\u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#_2","title":"\u72b6\u6001\u5206\u914d","text":"<ol> <li> <p>\u57fa\u672c\u539f\u5219\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002</p> </li> <li> <p>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \uff08\u8f83\u4e3a\u91cd\u8981\uff09</p> </li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910</li> </ol> <p></p> <p>\u6ce8\uff1a\uff084\uff09\u4e2d4\u4e2a\u72b6\u6001\u51fa\u73b0\u6b21\u6570\u90fd\u4e00\u6837\u591a\uff0c\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u5206\u914d\u4e3a\u903b\u8f910\u5373\u53ef</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#other-filp-flop","title":"Other Filp-Flop","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#j-k-filp-flop","title":"J-K Filp-Flop","text":"<ol> <li> <p>\u4e0eSR\u7c7b\u4f3c\uff0c\u4f46\u8f93\u516511\u65f6\u89e6\u53d1\u5668\u4e3a\u6c42\u53cd(opposite state)\uff0c\u5373\u6ca1\u6709\u975e\u6cd5\u72b6\u6001</p> </li> <li> <p>Implementation by D Flip-Flop\uff08\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u6027\u91c7\u6837\uff09\uff1a</p> </li> </ol> <p></p> <ul> <li>J=0\uff0cK=0\uff0cQ\u8f93\u51fa\u9001\u7ed9D\uff0c\u4fdd\u6301</li> <li>J=0\uff0cK=1\uff0c\u4e0a\u4e0b\u5168disable\uff0cD\u7f6e0\uff0creset</li> <li>J=1\uff0cK=0\uff0cD\u8f93\u5165\u4e3a$\\overline{Q}+Q$\uff0c\u4e3a1</li> <li>J=1\uff0cK=1\uff0c$\\overline{Q}$\u9001\u7ed9D\uff0c\u6c42\u53cd</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#t-flip-flop","title":"T Flip-Flop","text":"<p>\u5355\u8f93\u5165T\uff0cT=0\u4fdd\u6301\uff0cT=1\u6c42\u53cd</p> <p>Reset (asynchronous or synchronous) essential \u9700\u8981reset\u8d4b\u521d\u503c</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter4-P2/#_3","title":"\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1","text":"<ol> <li>\u660e\u786e\u9700\u6c42</li> <li> <p>\u72b6\u6001\u56fe</p> </li> <li> <p>\u72b6\u6001\u8868</p> </li> <li>\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</li> <li>\u5de5\u827a\u6620\u5c04</li> <li>\u7535\u8def\u9a8c\u8bc1</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/","title":"Chapter 5 Digital Hardware Implementation","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#why-programmable-logic","title":"Why Programmable Logic?","text":"<ol> <li>Facts:</li> <li>It is most economical to produce an IC in large volumes</li> <li> <p>Many designs required only small volumes of ICs</p> </li> <li> <p>Need an IC that can be:</p> </li> <li>Produced in large volumes</li> <li>Handle many designs required in small volumes</li> <li>A programmable logic part can be:</li> <li>made in large volumes</li> <li>programmed to implement large numbers of different low-volume designs</li> <li>Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment</li> <li>Most programmable logic devices are erasable and reprogrammable.</li> <li>Allows \u201cupdating\u201d a device or correction of errors</li> <li> <p>Allows reuse the device for a different design - the ultimate in re-usability!      Ideal for course laboratories</p> </li> <li> <p>Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs.</p> </li> <li>Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices!</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#programming-technologies","title":"Programming Technologies","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#classification","title":"Classification","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#control-connection","title":"Control connection","text":"<ol> <li>Mask programming\uff1a\u5de5\u5382\u751f\u4ea7\u65f6\u5b8c\u6210\uff0c\u4e0d\u53ef\u518d\u7f16\u7a0b\uff0c\u597d\u5904\u662f\u6210\u672c\u4f4e\uff0cone time programming</li> <li>Fuse(\u7194\u4e1d)\uff1a\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse.</li> <li>Antifuse\uff1a\u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d</li> <li>Single-bit storage element\uff1a\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#build-lookup-tablelut","title":"Build Lookup Table(LUT)","text":"<p>\u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#transistor-switching-control","title":"Transistor Switching Control","text":"<ol> <li> <p>\u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236    \u6d6e\u52a8\u6805\u6781\uff1a</p> </li> <li> <p>Stored charge on a floating transistor gate</p> </li> <li> <p>Erasable</p> </li> <li>Electrically erasable</li> <li>Flash (as in Flash Memory)</li> </ol> <p>Storage elements(as in a memory)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#characteristic","title":"Characteristic","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter5/#configuration","title":"Configuration","text":"<ol> <li>ROM(Read Only Memory)\uff1aa fixed array of AND gates and a programmable array of OR gates \u56fa\u5b9a\u4e0e\u9635\u5217\uff0c\u53ef\u7f16\u7a0b\u6216\u9635\u5217</li> </ol> <ul> <li> <p>ROM size=address width \u00d7 word width = $2^2 \u00d74$= 16 bit</p> <p></p> </li> <li> <p>Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates.</p> </li> </ul> <p></p> <p></p> <p>\u7f3a\u70b9\uff1a\u8f93\u5165\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570</p> <p>\u6539\u8fdb\uff1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u65e2\u6709\u7684 PAL \u8f93\u51fa\u5f53\u4f5c\u8f93\u5165\uff0c\u8f93\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002</p> <ol> <li>Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates.</li> </ol> <p></p> <p>\u4e0e PAL \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u80fd\u5bf9\u8f93\u51fa\u7ec4\u5408\u8fdb\u884c\u91cd\u7f16\u7a0b\u3002</p> <p>\u5176\u540c PAL \u4e00\u6837\u5177\u6709\u4e00\u4e2a\u7f3a\u9677\u662f\uff0c\u56e0\u4e3a\u8868\u8fbe\u51fd\u6570\u7684\u65b9\u6cd5\u4e0d\u662f\u901a\u8fc7 SOM \u6216\u8005 POM \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570\u3002</p> <p>\u5728\u57fa\u7840\u4e0a\u4e00\u4e2a\u6539\u8fdb\u662f\u5728\u8f93\u51fa\u7684\u65f6\u5019\u518d\u505a\u4e00\u6b21\u5f02\u6216\uff08\u4e0d\u7528\u975e\u95e8\u4f53\u73b0\u4e86\u53ef\u91cd\u7f16\u7a0b\u7684\u601d\u60f3\uff09\uff0c\u4ee5\u4ea7\u751f\u65b0\u7684\u9879\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u5f02\u6216\u95e8\u4f53\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u3002</p> <p>\u4e0e\u9879\u8d44\u6e90\u6709\u9650\uff0c\u9700\u8981\u627e\u5230\u53ef\u91cd\u7528\u7684\u4e0e\u9879\u3002</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/","title":"Registers &amp; Register Transfers","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#register","title":"Register","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#_1","title":"\u4fdd\u6301\u4fe1\u53f7\u5728\u591a\u4e2a\u65f6\u949f\u5468\u671f\u4e0d\u53d8","text":"<p>\u6dfb\u52a0Load\uff0cLoad\u4e3a0\u65f6\u65e0\u8bbaclock\u4e3a\u4f55\u503c\uff0c\u8f93\u51fa\u4e0d\u53d8\uff0cLoad\u4e3a1\u65f6\uff0c\u8f93\u51fa\u968fclock\u53d8\u5316</p> <ol> <li>\u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u52a0\u6216\u95e8</li> </ol> <p></p> <p>\u7136\u800c\uff0c\u5728\u95e8\u63a7\u65f6\u949f\u6280\u672f\u4e2d\uff0c\u7531\u4e8e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u903b\u8f91\u95e8\uff0c\u65f6\u949f\u8109\u51b2\u5230\u8fbe Control \u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u989d\u5916\u7684\u4f20\u64ad\u5ef6\u65f6\uff0c\u5373\u65f6\u949f\u504f\u79fb(clock skew)\u3002\u800c\u8fd9\u5fae\u5c0f\u7684\u5ef6\u65f6\u4f1a\u5bfc\u81f4\u5728\u6574\u4e2a\u540c\u6b65\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7ec4\u4ef6\u5f97\u5230\u7684\u65f6\u949f\u8109\u51b2\u6709\u504f\u5dee\uff0c\u800c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u6240\u4ee5\u5728\u5b9e\u9645\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5e94\u5f53\u907f\u514d\u6216\u5c3d\u53ef\u80fd\u7f29\u5c0f\u65f6\u949f\u504f\u79fb\u3002</p> <ol> <li>\u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u4e0d\u5e0c\u671b\u5b83\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c06\u5b83\u7684\u8f93\u5165\u8f7d\u5165\uff0c\u4e5f\u5c31\u662f\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e8c\u9009\u4e00\u591a\u8def\u590d\u7528\u5668\u5b9e\u73b0\u3002</li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#register-cell-design","title":"Register Cell Design","text":"<p>Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c)</p> <ul> <li>Design representative cell for the register</li> <li>Connect copies of the cell together to form the register</li> <li>Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#specifications","title":"Specifications","text":"<ul> <li>A register</li> <li>Data inputs to the register</li> <li>Control input combinations to the register   e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded)</li> <li>A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c</li> <li>A hold state specification(e.g. If all control inputs are 0, hold the current register state)</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#register-transfer-operations","title":"Register Transfer Operations","text":"<p>The movement and processing of data stored in registers</p> <ul> <li>Three basic components:</li> <li>set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668)</li> <li>operations</li> <li>control of operations \u76d1\u7763\u64cd\u4f5c\u5e8f\u5217\u7684\u63a7\u5236</li> <li>Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc.   Elementary operations called microoperations</li> </ul> <p>\u5176\u4e2d\uff0c\u6700\u57fa\u7840\u7684\u90a3\u90e8\u5206\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5fae\u64cd\u4f5c(microoperation)\uff0c\u5b83\u4eec\u662f\u5b9e\u73b0\u590d\u6742\u64cd\u4f5c\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u5c06 R1 \u7684\u6570\u636e\u8f7d\u5165 R2\uff0c\u5c06 R1 \u548c R2 \u76f8\u52a0\uff0c\u6216\u662f\u81ea\u589e R1 \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u6bd4\u7279\u5411\u91cf\u4e3a\u8f7d\u4f53\u5e76\u884c\u5b9e\u73b0\u7684\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#register-notation","title":"Register Notation","text":"<p>RTL:\u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00(Register Transfer Language)</p> <p></p> <p></p> <ol> <li> <p>$sl,sr$\u4f8b\u5b50\uff1a R2&lt;-sl R1 \uff0cR1\u5de6\u79fb\u4e00\u4f4d\u4f20\u7ed9R2</p> </li> <li> <p>example:\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d R1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002K1\u63a7\u5236\u7684\u662fR2\u662f\u5426\u63a5\u6536R1\u7684\u4fe1\u53f7\uff0c\u800c\u975eR1\u662f\u5426\u53d1\u9001</p> </li> </ol> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#register-transfer-structures","title":"Register Transfer Structures","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#1multiplexer-based-transfers","title":"1.Multiplexer-Based Transfers\uff1a","text":"<p>$K1:R0\\leftarrow R1,K2\\overline{K1}:R0\\leftarrow R2 $,\u4e5f\u5c31\u662f$K1+K2$\u4e3a\u771f\u65f6R0\u4f1a\u88ab\u66f4\u65b0</p> <p></p> <p></p> <p>\u5176\u4e2d <code>MUX</code> \u7684 k\u223c(n\u22121) \u5b9e\u73b0\u4e86\u8f6c\u79fb\u64cd\u4f5c\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#2-multiplexer-bus","title":"2. Multiplexer Bus","text":"<p>\u901a\u8fc7\u603b\u7ebfbus\u5b9e\u73b0n\u90091\u591a\u8def\u590d\u7528\u5668\u5b8c\u6210\u5bc4\u5b58\u5668\u4e4b\u95f4\u503c\u7684\u4ea4\u6362</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#3-three-state-bus","title":"3. Three-State Bus","text":"<p>The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers. Cost is further reduced, but transfers are limited.</p> <p>\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u88ab\u4f7f\u80fd\u65f6\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u4e0d\u5904\u4e8e\u9ad8\u963b\u6001\u3002\u7535\u8def\u4e2d\u6240\u6709\u90fd\u662f\u8be5\u503c\u3002</p> <p>\u51cf\u5c11\u63a5\u7ebf\uff0c\u964d\u4f4e\u5e03\u7ebf\u96be\u5ea6\u3002</p> <p>\u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#shift-registers","title":"Shift Registers","text":"<p>\u4f7f\u7528\u89e6\u53d1\u5668\u800c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\uff08\u9664\u6781\u5c11\u7279\u4f8b\uff09</p> <ol> <li>\u53f3\u79fb</li> </ol> <p></p> <ol> <li>\u53f3\u79fb+\u5e76\u884c\u8f93\u5165 Parallel Load Shift Registers</li> </ol> <p></p> <p></p> <ul> <li>Shift\u4e3a1\uff0c\u79fb\u4f4d</li> <li>Shift\u4e3a0\uff0cLoad0\uff0c\u4fdd\u6301</li> <li>Shift\u4e3a0\uff0cLoad1\uff0c\u5e76\u884c\u52a0\u8f7d</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#_2","title":"\u53cc\u5411\u4f4d\u79fb\u5bc4\u5b58\u5668","text":"<p>\u5bf9$S_1S_0$,00\u4fdd\u6301\uff0c01\u5de6\u79fb\uff0c10\u53f3\u79fb\uff0c11\u5e76\u884c\u8f93\u5165</p> <p>\u5176\u672c\u8d28\u4e0a\u5c31\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MUX \u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u65f6\u949f\u662f\u7ee7\u627f $(i+1)\u3001(i-1)\u3001D_i$\u8fd8\u662f$Q$</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#counters","title":"Counters","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#ripple-counter","title":"Ripple Counter","text":"<ol> <li> <p>B\u9891\u7387\u662fA\u4e00\u534a\u3002A\u8f93\u51fa\u53d6\u53cd\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u3002 \u53ef\u4ee5\u7528\u505a\u65f6\u949f\u5206\u9891\u3002</p> </li> <li> <p>\u4e0a\u56fe\u4e2d\uff0c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 1 \u5230 0 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u6b63\u5411\u8ba1\u65f6(Upward Counting)\uff1b    \u53cd\u4e4b\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 0 \u5230 1 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u9006\u5411\u8f93\u51fa(Downward Counting)\uff1b</p> </li> <li>\u7f3a\u70b9\uff1a\u6bcf\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u4f20\u9012\u90fd\u6709\u5ef6\u65f6\uff0c\u540c\u65f6\u4e0d\u80fd\u4f5c\u4e3a\u540c\u6b65\u8ba1\u6570\u5668\u3002\u7b80\u5355\u4f46\u4e0d\u5b89\u5168\u3002</li> </ol> <p>\u7406\u8bba\u4e0a\uff0c111\u4e4b\u540e\u5e94\u8be5\u53d8\u6210000\uff0c\u4f46\u5b9e\u9645\u4e0a\uff1a$111-&gt;110-&gt;100-&gt;000$</p> <p></p> <p>\u6b64\u5916\u5bf9\u4e8en bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f $n\\cdot t_{PHL}$ \u901f\u5ea6\u4f1a\u975e\u5e38\u6162.</p> <ol> <li>\u4f7f\u7528\uff1a\u8d8a\u9ad8\u7ea7\u7684\u89e6\u53d1\u5668\u8d8a\u4e0d\u5bb9\u6613\u88ab\u89e6\u53d1\uff0c\u529f\u8017\u4f4e\uff0c\u53ef\u7528\u4e8e\u8109\u51b2\u8ba1\u6570\u7b49\u573a\u666f\u3002</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#synchronous-counters","title":"Synchronous Counters","text":"<p>\u6bcf\u6b21\u901a\u8fc7\u81ea\u589e\u5668+1</p> <p>\u89c2\u5bdf\u53d1\u73b0\uff0c\u4f4d\u6570\u589e\u52a0\u65f6\u4e0d\u5229\u4e8e\u5316\u7b80\uff0c\u4f46$Q_n$\u53d6\u53cd\u5f53\u4e14\u4ec5\u5f530~n-1\u5747\u4e3a1\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e0e\u95e8\u94fe\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7</p> <p>\u4f7f\u80fd\u4e3a0\u76f8\u5f53\u4e8e\u4fdd\u6301\u3002 CO\u8f93\u51fa\u8fdb\u4f4d\u7528\u4e8e\u4e0b\u4e00\u90e8\u5206\u7535\u8def</p> <p></p> <p>\u95ee\u9898\uff1a\u540c\u6837\u5b58\u5728\u5ef6\u8fdf\u3002 </p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1alook ahead \u7528\u4e00\u4e2a\u4e0e\u95e8\u628a\u6240\u6709\u4f4e\u4f4d\u63a5\u8d77\u6765</p> <p></p> <p>symbol\uff1a</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#other-counters","title":"Other Counters","text":"<ol> <li>Down Counter</li> <li>Up-Down Counter</li> <li>Parallel Load Counter</li> <li>Divide-by-n(Module n) Counter\uff1a\u5341\u8fdb\u5236\u6a219\uff0c\u65f6\u949f\u6a215</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#counter-with-parallel-load","title":"Counter with Parallel Load","text":"<p>\u5b9e\u73b0\u5e76\u884c\u8f93\u5165</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#design-example-synchronous-bcd","title":"Design Example: Synchronous BCD","text":"<ol> <li>\u72b6\u6001\u8868\uff1a</li> </ol> <ol> <li>\u5361\u8bfa\u56fe\u5316\u7b80</li> </ol> <ol> <li>\u9a8c\u8bc1\u65e0\u7528\u72b6\u6001\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u4f1a\u6b7b\u9501</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#counting-modulo-n","title":"Counting Modulo N","text":"<ol> <li> <p>\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u57fa\u7840\u4e0a\uff0c\u91c7\u53d6\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6</p> </li> <li> <p>\u5f02\u6b65\uff0c\u901a\u8fc7clear\uff08\u5f02\u6b65\u590d\u4f4d\u811a\uff09\uff0c\u8ba1\u6570\u8fbe\u5230N\u5b9e\u65f6\u6e05\u96f6\u5373\u53ef</p> </li> </ol> <p></p> <ul> <li>\u540c\u6b65\uff0cN-1\u65f6reset\u4e3a1\uff0c\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u6e05\u96f6 <code>better choice</code></li> </ul> <p></p> <ol> <li>\u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 <code>Carry Output</code> \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 <code>Enable</code> \u4fe1\u53f7.</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/Chapter6/#serial-operations","title":"Serial Operations","text":"<p>\u4e32\u884c\uff1a\u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002</p> <p>\u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8</p> <p>\u5f53\u4eca\u9ad8\u901f\u4f20\u8f93\u5982USB\uff0c\u4ee5\u592a\u7f51\u7ebf\u7b49\u90fd\u4f7f\u7528\u4e32\u884c</p> <p>\u4e32\u884c\u52a0\u6cd5\u5668\uff1a\u4ec5\u4f7f\u7528\u4e00\u4f4d\u5168\u52a0\u5668\u4e0e\u4e00\u4e2a\u7528\u4e8e\u8fdb\u4f4d\u7684\u89e6\u53d1\u5668\u3002The result is stored in the A register and the final carry in the flip-flop</p> <p></p> <p>Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands.</p> <p>Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes.</p> <p>Shifting a binary number left is equivalent to multiplying by 2.Shifting a binary number right is equivalent to dividing by 2.</p>"}]}