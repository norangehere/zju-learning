{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"CLDF/Chapter1-3/","text":"Chapter 1 Logic and Digital System Discrete information processing systems Types of Digital Systems No state present:combinational logic system, output=Function(input) State present: state updated at discrete times -> synchronous sequential system state updated at any time -> asynchronous\uff08\u5f02\u6b65\uff09 sequential systeam state = Function(state,input) output = Function(state) or Function(state,input) e.g \uff1adigital computer: synchronous,\u7ec4\u9891 beyond \uff1aembedded systems\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff09\uff1aanalog signal\uff0cneed A-to-D(digital) and D-to-A analog signal- continuous voltage- sample\uff08\u91c7\u6837\uff09- digital voltage - DAC - discrete voltage - signal conditioning - continuous voltage Information representation analog: continuous in value and time digital: asynchronous: discrete in value,continuous in time; synchronous:discrete in value and time \u4e8c\u8fdb\u5236\u6297\u5e72\u6270\u80fd\u529b\u5f3a dynamic RAM: capacitor charge (\u7535\u5bb9) K(2^10)-M-G-T \u6bcf\u4e2a\u76f8\u5dee2^10 non-numeric binary codes: e.g.\uff1acolor 'one hot' code : you can represent 4 elements in radix r=2 with n=4 digits: 0001,0010,0100,1000 ,each digit represents specific element \u4ee5\u4e0b\u4e24\u79cd\u8868\u793a0-9\u65f6\u5bf9\u79f0\u6570\u5b57\u4e92\u4e3a\u53cd\u7801 Excess3 Code:\u4f593\u7801 8\uff0c4\uff0c-2\uff0c-1 Code\uff1a\u540e\u4e24\u4f4d\u5206\u522b\u4ee3\u8868-2\uff0c-1 Binary Coded Decimal\uff08BCD\uff09\uff1ause 8\uff0c4\uff0c2\uff0c1 code\uff0cbut only represent 0-9 example: 13 -> 0001 | 0011 application: good for direct interaction to people,like elevator,air conditioner to correct the digit,subtract 10 by adding 6 modulo 16 eg :13-> 1101 +6 -> 10011 -> 0001 | 0011 ASCII: 0 30,A 41,a 61 (in 16\u8fdb\u5236) PARITY BIT Error-Detection Codes (\u5947\u5076\u68c0\u9519\u7801)\uff1a\u6dfb\u52a0\u4e00\u4f4d\uff08n+1\uff09\uff1aodd/even parity\uff1a\u4f7fn+1\u4f4d\u52a0\u8d77\u6765\u4e00\u5171\u6709\u5947/\u5076\u4e2a1 Gray Code\uff1a\u76f8\u90bb\u72b6\u6001\u53ea\u6709\u4e00\u4f4d\u7801\u4e0d\u4e00\u6837\uff0c\u6e10\u53d8\u8fc7\u7a0b\u65f6\u4e0d\u4f1a\u51fa\u73b0\u7a81\u7136\u53d8\u5316 Application: Optical Shaft Encoder\uff0cdark represents 0\uff0cwhite represents 1 \u5982\u679c\u4f20\u611f\u5668\u4f4d\u7f6e\u51fa\u73b0\u504f\u79fb\uff0c\u4e0d\u5728\u540c\u4e00\u76f4\u7ebf\uff0c\u7528Gray Code \u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef Chapter 2 Combinational Logic Circuits \u4e0a\u4fa7 \u4e3aPMOS\u7ba1\uff0c\u5e38\u95ed\u5f00\u5173\uff1b\u4e0b\u4fa7 \u4e3aNMOS\u7ba1\uff0c\u5e38\u5f00\u5f00\u5173 Gate Delay: When input changes,the output change doesn't occur instantaneously. the delay between an input changes and the resulting output change is the gate delay denoted by $$ t_G $$ s Logic Diagrams and Expressions: Truth Table,Equation(\u903b\u8f91\u51fd\u6570),Diagram,\u6ce2\u5f62\u56fe Boolean Algebra: $$ X(Y+Z)=XY+XZ $$ $X+YZ=(X+Y)(X+Z)$ Prf: $$ A=A\\cdot A=A\\cdot (A+C) \\ A+BC=A(A+B+C)+BC=(A+B)(A+C) $$ $\\overline{X\u00b7Y}=\\overline{X}+\\overline{Y}$ Absorption Theorem: $A+A\u00b7B=A,A+\\overline{A}B=A+B$ Consensus Law: $(A+B)(\\overline{A}+C)(B+C)=(A+B)(\\overline{A}+C)$ $AB+\\overline{A}C+BC=AB+\\overline{A}C$ Hint\uff1a $BC=BC(A+\\overline{A})$ $\\overline{X}Z+X=(X+\\overline{X})(Z+X)=Z+X$ Hint: $X+YZ=(X+Y)(X+Z)$ Precedence: Parentheses NOT AND OR Examples: $$ F=\\overline{\\overline{AC+\\overline{A}BC}+\\overline{B}C+AB\\overline{C}} \\ =(AC+\\overline{A}BC)\\overline{\\overline{B}C}\\cdot \\overline{AB\\overline{C}}\\ =C(A+\\overline{A}B)(B+\\overline{C})(\\overline{A}+\\overline{B}+C) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC+\\overline{A}\\cdot\\overline{C}+\\overline{B}\\cdot\\overline{C}) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC) \\ =ABC+\\overline{A}BC=BC $$ Canonical Forms minterm & maxterms:maxterm is complemented(\u53d6\u53cd) with minterm; $\\overline{m}_i=M_i,\\overline{M}_i=m_i$ $F=\\sum{m_i}=\\overline{\\prod{M_i}},i=0,1,2,3,\\dots,2^n-1$ usage:turn logic function into numbers by minterm Standard Forms SOP: an OR of AND terms,POS: an AND of OR terms Gate Input Cost the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. G - inverters not counted GN - inverters counted For SOP and POS equations, it can be found from the equation(s) by finding the sum of: all literal appearances\uff08Literal cost,L:\u516c\u5f0f\u4e2d\u4e00\u5171\u51fa\u73b0\u7684\u53d8\u91cf\u4e2a\u6570\uff0c\u53ef\u91cd\u590d\uff09 the number of terms excluding single literal terms,(G) and optionally, the number of distinct complemented single literals (GN) \u8ba1\u7b97\u975e\u95e8. Karnaugh Maps \u76f8\u90bb\u7684\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0cGray\u7801\u987a\u5e8f \u4e09\u53d8\u91cf\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5708\uff0c\u5373\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u76f8\u90bb \u6d88\u9664\uff1aKarnaugh\u56fe\u4e2d\u6709\u4e24\u4e2a\u76f8\u90bb\u5c0f\u683c\u5b50\u5219\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u53d8\u91cf \u56db\u53d8\u91cf\uff1a Buffer A buffer is a gate with the function F=X : the same as a connection used to improve circuit voltage levels and increase the speed of circuit operation NAND Gates This NAND symbol is called Invert-OR, since inputs are inverted and then ORed together. AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier. Exclusive OR/ Exclusive NOR The XOR function is: $X\u2295Y=X\\overline{Y}+\\overline{X}Y$ The eXclusive NOR (XNOR) function, otherwise known as equivalence is: $\\overline{X\u2295Y}=XY+\\overline{XY} $ $X\u2295\\overline{Y}= \\overline{X\u2295Y}$ $X\u2295Y\u2295Z=X\u2295(Y\u2295Z)$ Odd and Even Functions The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. \u5947\u51fd\u6570\u53d6\u975e\u5373\u4e3a\u5076\u51fd\u6570 Parity Generators and Checkers \u5076\u6821\u9a8c\u7801\u751f\u6210\u5668\u4e0e\u68c0\u9a8c\u5668 The 3-State Buffer For the symbol and truth table, IN is the data input, and EN, the control input. For EN = 0, regardless of the value on IN (denoted by X), the output value is Hi-Z. For EN = 1, the output value follows the input value. 3-State Logic Circuit Data Selection Function: If s = 0, OL = IN0, else OL = IN1 Performing data selection with 3-state buffers: Since EN0 = S and EN1 = S, one of the two buffer outputs is always Hi-Z plus the last row of the table never occurs. Chapter 3 Combinational Logic Design Part 1 Implementation Technology and Logic Design \u5de5\u827a\u6620\u5c04 NAND Mapping Algorithm Replace ANDs and ORs: Repeat the following pair of actions until there is at most one inverter between : A circuit input or driving NAND gate output, and- The attached NAND gate inputs. NOR Mapping Algorithm \u200b Similar to the NAND,first Replace ANDs and ORs Part 2 Combinational Logic Decoding Decoding - the conversion of an n-bit input code to an m-bit output code with$n\\leqslant m\\leqslant2n$ such that each valid code word produces a unique output code Circuits that perform decoding are called decoders Here, functional blocks for decoding are called n-to-m line decoders, where $m\\leqslant2n$, and generate 2n (or fewer) minterms for the n input variables Decoder with Enable \u7531\u4e8e2-4\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u53ea\u6709\u8be5\u95e8\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06$A_1,A_0$\u7ec4\u6210\u7684\u8bd1\u7801\u5668\u5f53\u6210EN\uff0cEN\u5f53\u6210\u8f93\u5165\u4fe1\u53f7 BCD-to-Segment Decoder \u5171\u9633\u6781\u4e0e\u5171\u9634\u6781\u63a5\u6cd5\uff1a Encoding Encoding - the opposite of decoding - the conversion of an m-bit input code to a $n$-bit output code with $n < m< 2^n$ such that each valid code word produces a unique output code An encoder has $2^n$ (or fewer) input lines and $n$ output lines which generate the binary code corresponding to the input values \u4f20\u7edf\u7f16\u7801\u5668\u95ee\u9898\uff1a\u5982\u4ee5\u4e0b\u8f93\u51fa\u65b9\u7a0b\u5f0f\u5bf9\u5e94\u7f16\u7801\u5668\uff0c\u82e5$D_6,D_7$\u540c\u65f6\u4e3a1\uff0c\u4e0d\u80fd\u5224\u65ad\u662f$A_2$\u8fd8\u662f$A_1$\uff0c\u5373\u6709\u4e0d\u786e\u5b9a\u6027 \u4f18\u5148\u7f16\u7801\u5668\uff08Priority Encoder\uff09 One encoder that can accept all possible combinations of input values and produce a meaningful result is a priority encoder. Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with the corresponding binary code for that position. example: Priority encoder with 5 inputs (D4, D3, D2, D1, D0) - highest priority to most significant 1 present - Code outputs A2, A1, A0 and V where V indicates at least one 1 present. Xs in input part of table represent 0 or 1; thus table entries correspond to product terms instead of minterms. The column on the left shows that all 32 minterms are present in the product terms in the table Xs \u5728\u8f93\u51fa\u5217\u8868\u793a\u65e0\u5173\u60c5\u51b5\u4e0d\u540c Selecting Selecting of data or information is a critical function in digital systems and computers Logic circuits that perform selecting are called multiplexers Selecting can also be done by three-state logic or transmission gates Multiplexer A multiplexer selects information from an input line and directs the information to an output line typical multiplexer has n control inputs ($S_{n-1}, \u2026 S_0$) called selection inputs, $2^n$ information inputs ($I_{2^n - 1}, \u2026 I_0$), and one output $Y$ A multiplexer can be designed to have m information inputs with $m < 2^n$ as well as n selection inputs 2-to-1-Line Multiplexer The single selection variable S has two values: S = 0 selects input $I_0$ S = 1 selects input $I_1$ The equation:$Y =\\overline{S}I_0 + SI_1$ The circuit: Multiplexer Width Expansion(\u9009\u62e9\u591a\u4f4d) example:4-to-1-line quad multiplexer Other Selection Implementations Three-state logic in place of AND-OR\u3002 Gate input cost = 18 Distributing the decoding across the three-state drivers\uff08\u5206\u5c42\u9009\u62e9\uff09 Gate input cost = 14 Combinational Logic Implementation- Multiplexer Approach 1 \u67e5\u627e\u8868 Combinational Logic Implementation - Multiplexer Approach 2 Part 3 Arithmetic functions Function Block Half-Adder \u4e24\u8f93\u5165\u4e24\u8f93\u51fa $S$\u4e3a$X\\oplus Y,$$C$\u4e3a$XY$ \u5e38\u89c1\u4e24\u79cd\u7535\u8def\u5b9e\u73b0 Full-Adder \u5168\u52a0\u5668\u5373\u8003\u8651\u4e0a\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u5373$Z$or$C_i$ S=$\\overline{C_i}(A\\oplus B)+C_i(\\overline{A\\oplus B})$ The term $X\\cdot Y$ is carry generate,$X\\oplus Y$ is carry propagate Ripple-Carry Binary Adder:\u9700\u8981\u5ef6\u65f6 \u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 Group Carry Lookahead Logic Unsigned Subtraction Complements \u8865\u7801 Diminished Radix Complement of N: defined as $(r^n-1)-N$ ,known as \u53cd\u7801 $1's$ complement Radix Complement: defined as $r^n-N$ $2's$ complement \u8865\u7801\uff1a\u5bf9n\u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u76f8\u5f53\u4e8e\u7b2c\u4e00\u4f4d$a_{n-1}$\u4ee3\u8868$-2^{n-1}$,\u540e\u7eed\u6bcf\u4f4d\u90fd\u4ee3\u8868$2^k$ \u5373M-N\u65f6\uff0c\u51cf\u6570N\u5148\u6c42\u8865\u7801$2^n-N$\uff0c\u7136\u540e$M+(2^n-N)$,\u82e5\u4ea7\u751f\u8fdb\u4f4d1\uff0c\u8bf4\u660e\u591f\u51cf\uff0c\u5bf9\u5e94\u503c\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u8fdb\u4f4d\u4e3a0\uff0c\u8bf4\u660e\u4e0d\u591f\u51cf\uff0c\u5219\u5bf9\u7ed3\u679c\u53d6\u8865\u7801\u5e76\u52a0\u8d1f\u53f7 \u6709\u7b26\u53f7\u51cf\u6cd5 \u8bbe\u52a0\u6cd5\u4e3a0\uff0c\u51cf\u6cd5\u4e3a1\uff0c\u6b63\u6570\u7b2c\u4e00\u4f4d0\uff0c\u8d1f\u6570\u7b2c\u4e00\u4f4d1\uff0c\u90a3\u4e48\u5bf9\u51cf\u6570\u7b2c\u4e00\u4f4d\uff0c\u7b26\u53f7\uff0c\u88ab\u51cf\u6570\u7b2c\u4e00\u4f4d\u6784\u6210\u7684\u5e8f\u5217\uff0c\u82e5\u6709\u5076\u6570\u4e2a0\uff0c\u5728\u6ca1\u6709\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u53f7\u76f8\u52a0 \u82e5\u88ab\u52a0\u6570\u4e0e\u88ab\u51cf\u6570\u4e3a\u8d1f\uff0c\u5219\u53d6\u5bf9\u5e94\u8865\u7801\uff08\u4e0d\u6539\u53d8\u7b26\u53f7\u4f4d\uff09\uff0c\u4e4b\u540e\u82e5\u662f\u52a0\u6cd5\u5219\u6b63\u5e38\u8fdb\u884c\uff0c\u51cf\u6cd5\u5219\u7c7b\u4f3c\u5730\u5bf9\u51cf\u6570\u53d6\u8865 \u6ea2\u51fa \u540c\u53f7\u76f8\u52a0\u3001\u5f02\u53f7\u76f8\u51cf\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa \u5224\u65ad\u6ea2\u51fa\uff1a$V=C_n\\oplus C_{n-1}$,\u5373$C_n$\u4e0e$C_{n-1}$\u7b26\u53f7\u4e00\u81f4\u5219\u4e0d\u6ea2\u51fa\uff0c\u5426\u5219\u6ea2\u51fa \u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f0\uff0c\u6ea2\u51fa\u53ea\u53ef\u80fd\u662f$C_{n-1}$\u4e3a1 \u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f1\uff0c\u82e5\u4e0d\u6ea2\u51fa$C_{n-1}$\u9700\u8981\u4e3a1 \u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a\u4e24\u4e2a\u9996\u4f4d\u90fd\u662f1 \u6709\u7b26\u53f7\u6570\uff1a\u540c\u53f7\u65f6\u6709\u53ef\u80fd\u6ea2\u51fa \u5e38\u6570\u9664\u6cd5\u3001\u4e58\u6cd5 \u5bf9\u4e8e2\u7684\u5e42\u6b21\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u7ed3\u679c\uff0c\u5bf9\u4e8e\u975e2\u5e42\u6b21\u53ef\u4ee5\u5e38\u6570\u52a0\u6cd5\u548c2\u7684\u5e42\u6b21\u4e58\u9664\u76f8\u7ed3\u5408\u5f97\u5230\u7ed3\u679c\u3002 \u5982$3x=2^1x+2^0x$,\u5373$x[31:0]={x[30:0],1'b0}+x[31:0]$.","title":"Chapter 1 Logic and Digital System"},{"location":"CLDF/Chapter1-3/#chapter-1-logic-and-digital-system","text":"Discrete information processing systems","title":"Chapter 1 Logic and Digital System"},{"location":"CLDF/Chapter1-3/#types-of-digital-systems","text":"No state present:combinational logic system, output=Function(input) State present: state updated at discrete times -> synchronous sequential system state updated at any time -> asynchronous\uff08\u5f02\u6b65\uff09 sequential systeam state = Function(state,input) output = Function(state) or Function(state,input) e.g \uff1adigital computer: synchronous,\u7ec4\u9891 beyond \uff1aembedded systems\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff09\uff1aanalog signal\uff0cneed A-to-D(digital) and D-to-A analog signal- continuous voltage- sample\uff08\u91c7\u6837\uff09- digital voltage - DAC - discrete voltage - signal conditioning - continuous voltage","title":"Types of Digital Systems"},{"location":"CLDF/Chapter1-3/#information-representation","text":"analog: continuous in value and time digital: asynchronous: discrete in value,continuous in time; synchronous:discrete in value and time \u4e8c\u8fdb\u5236\u6297\u5e72\u6270\u80fd\u529b\u5f3a dynamic RAM: capacitor charge (\u7535\u5bb9) K(2^10)-M-G-T \u6bcf\u4e2a\u76f8\u5dee2^10 non-numeric binary codes: e.g.\uff1acolor 'one hot' code : you can represent 4 elements in radix r=2 with n=4 digits: 0001,0010,0100,1000 ,each digit represents specific element \u4ee5\u4e0b\u4e24\u79cd\u8868\u793a0-9\u65f6\u5bf9\u79f0\u6570\u5b57\u4e92\u4e3a\u53cd\u7801 Excess3 Code:\u4f593\u7801 8\uff0c4\uff0c-2\uff0c-1 Code\uff1a\u540e\u4e24\u4f4d\u5206\u522b\u4ee3\u8868-2\uff0c-1 Binary Coded Decimal\uff08BCD\uff09\uff1ause 8\uff0c4\uff0c2\uff0c1 code\uff0cbut only represent 0-9 example: 13 -> 0001 | 0011 application: good for direct interaction to people,like elevator,air conditioner to correct the digit,subtract 10 by adding 6 modulo 16 eg :13-> 1101 +6 -> 10011 -> 0001 | 0011 ASCII: 0 30,A 41,a 61 (in 16\u8fdb\u5236) PARITY BIT Error-Detection Codes (\u5947\u5076\u68c0\u9519\u7801)\uff1a\u6dfb\u52a0\u4e00\u4f4d\uff08n+1\uff09\uff1aodd/even parity\uff1a\u4f7fn+1\u4f4d\u52a0\u8d77\u6765\u4e00\u5171\u6709\u5947/\u5076\u4e2a1 Gray Code\uff1a\u76f8\u90bb\u72b6\u6001\u53ea\u6709\u4e00\u4f4d\u7801\u4e0d\u4e00\u6837\uff0c\u6e10\u53d8\u8fc7\u7a0b\u65f6\u4e0d\u4f1a\u51fa\u73b0\u7a81\u7136\u53d8\u5316 Application: Optical Shaft Encoder\uff0cdark represents 0\uff0cwhite represents 1 \u5982\u679c\u4f20\u611f\u5668\u4f4d\u7f6e\u51fa\u73b0\u504f\u79fb\uff0c\u4e0d\u5728\u540c\u4e00\u76f4\u7ebf\uff0c\u7528Gray Code \u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef","title":"Information representation"},{"location":"CLDF/Chapter1-3/#chapter-2-combinational-logic-circuits","text":"\u4e0a\u4fa7 \u4e3aPMOS\u7ba1\uff0c\u5e38\u95ed\u5f00\u5173\uff1b\u4e0b\u4fa7 \u4e3aNMOS\u7ba1\uff0c\u5e38\u5f00\u5f00\u5173 Gate Delay: When input changes,the output change doesn't occur instantaneously. the delay between an input changes and the resulting output change is the gate delay denoted by $$ t_G $$ s Logic Diagrams and Expressions: Truth Table,Equation(\u903b\u8f91\u51fd\u6570),Diagram,\u6ce2\u5f62\u56fe Boolean Algebra: $$ X(Y+Z)=XY+XZ $$ $X+YZ=(X+Y)(X+Z)$ Prf: $$ A=A\\cdot A=A\\cdot (A+C) \\ A+BC=A(A+B+C)+BC=(A+B)(A+C) $$ $\\overline{X\u00b7Y}=\\overline{X}+\\overline{Y}$ Absorption Theorem: $A+A\u00b7B=A,A+\\overline{A}B=A+B$ Consensus Law: $(A+B)(\\overline{A}+C)(B+C)=(A+B)(\\overline{A}+C)$ $AB+\\overline{A}C+BC=AB+\\overline{A}C$ Hint\uff1a $BC=BC(A+\\overline{A})$ $\\overline{X}Z+X=(X+\\overline{X})(Z+X)=Z+X$ Hint: $X+YZ=(X+Y)(X+Z)$ Precedence: Parentheses NOT AND OR Examples: $$ F=\\overline{\\overline{AC+\\overline{A}BC}+\\overline{B}C+AB\\overline{C}} \\ =(AC+\\overline{A}BC)\\overline{\\overline{B}C}\\cdot \\overline{AB\\overline{C}}\\ =C(A+\\overline{A}B)(B+\\overline{C})(\\overline{A}+\\overline{B}+C) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC+\\overline{A}\\cdot\\overline{C}+\\overline{B}\\cdot\\overline{C}) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC) \\ =ABC+\\overline{A}BC=BC $$","title":"Chapter 2 Combinational Logic Circuits"},{"location":"CLDF/Chapter1-3/#canonical-forms","text":"minterm & maxterms:maxterm is complemented(\u53d6\u53cd) with minterm; $\\overline{m}_i=M_i,\\overline{M}_i=m_i$ $F=\\sum{m_i}=\\overline{\\prod{M_i}},i=0,1,2,3,\\dots,2^n-1$ usage:turn logic function into numbers by minterm","title":"Canonical Forms"},{"location":"CLDF/Chapter1-3/#standard-forms","text":"SOP: an OR of AND terms,POS: an AND of OR terms","title":"Standard Forms"},{"location":"CLDF/Chapter1-3/#gate-input-cost","text":"the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. G - inverters not counted GN - inverters counted For SOP and POS equations, it can be found from the equation(s) by finding the sum of: all literal appearances\uff08Literal cost,L:\u516c\u5f0f\u4e2d\u4e00\u5171\u51fa\u73b0\u7684\u53d8\u91cf\u4e2a\u6570\uff0c\u53ef\u91cd\u590d\uff09 the number of terms excluding single literal terms,(G) and optionally, the number of distinct complemented single literals (GN) \u8ba1\u7b97\u975e\u95e8.","title":"Gate Input Cost"},{"location":"CLDF/Chapter1-3/#karnaugh-maps","text":"\u76f8\u90bb\u7684\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0cGray\u7801\u987a\u5e8f \u4e09\u53d8\u91cf\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5708\uff0c\u5373\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u76f8\u90bb \u6d88\u9664\uff1aKarnaugh\u56fe\u4e2d\u6709\u4e24\u4e2a\u76f8\u90bb\u5c0f\u683c\u5b50\u5219\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u53d8\u91cf \u56db\u53d8\u91cf\uff1a","title":"Karnaugh Maps"},{"location":"CLDF/Chapter1-3/#buffer","text":"A buffer is a gate with the function F=X : the same as a connection used to improve circuit voltage levels and increase the speed of circuit operation","title":"Buffer"},{"location":"CLDF/Chapter1-3/#nand-gates","text":"This NAND symbol is called Invert-OR, since inputs are inverted and then ORed together. AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier.","title":"NAND Gates"},{"location":"CLDF/Chapter1-3/#exclusive-or-exclusive-nor","text":"The XOR function is: $X\u2295Y=X\\overline{Y}+\\overline{X}Y$ The eXclusive NOR (XNOR) function, otherwise known as equivalence is: $\\overline{X\u2295Y}=XY+\\overline{XY} $ $X\u2295\\overline{Y}= \\overline{X\u2295Y}$ $X\u2295Y\u2295Z=X\u2295(Y\u2295Z)$","title":"Exclusive OR/ Exclusive NOR"},{"location":"CLDF/Chapter1-3/#odd-and-even-functions","text":"The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. \u5947\u51fd\u6570\u53d6\u975e\u5373\u4e3a\u5076\u51fd\u6570","title":"Odd and Even Functions"},{"location":"CLDF/Chapter1-3/#parity-generators-and-checkers","text":"\u5076\u6821\u9a8c\u7801\u751f\u6210\u5668\u4e0e\u68c0\u9a8c\u5668","title":"Parity Generators and Checkers"},{"location":"CLDF/Chapter1-3/#the-3-state-buffer","text":"For the symbol and truth table, IN is the data input, and EN, the control input. For EN = 0, regardless of the value on IN (denoted by X), the output value is Hi-Z. For EN = 1, the output value follows the input value.","title":"The 3-State Buffer"},{"location":"CLDF/Chapter1-3/#3-state-logic-circuit","text":"Data Selection Function: If s = 0, OL = IN0, else OL = IN1 Performing data selection with 3-state buffers: Since EN0 = S and EN1 = S, one of the two buffer outputs is always Hi-Z plus the last row of the table never occurs.","title":"3-State Logic Circuit"},{"location":"CLDF/Chapter1-3/#chapter-3-combinational-logic-design","text":"","title":"Chapter 3 Combinational Logic Design"},{"location":"CLDF/Chapter1-3/#part-1-implementation-technology-and-logic-design","text":"","title":"Part 1 Implementation Technology and Logic Design"},{"location":"CLDF/Chapter1-3/#_1","text":"","title":"\u5de5\u827a\u6620\u5c04"},{"location":"CLDF/Chapter1-3/#nand-mapping-algorithm","text":"Replace ANDs and ORs: Repeat the following pair of actions until there is at most one inverter between : A circuit input or driving NAND gate output, and- The attached NAND gate inputs.","title":"NAND Mapping Algorithm"},{"location":"CLDF/Chapter1-3/#nor-mapping-algorithm","text":"\u200b Similar to the NAND,first Replace ANDs and ORs","title":"NOR Mapping Algorithm"},{"location":"CLDF/Chapter1-3/#part-2-combinational-logic","text":"","title":"Part 2 Combinational Logic"},{"location":"CLDF/Chapter1-3/#decoding","text":"Decoding - the conversion of an n-bit input code to an m-bit output code with$n\\leqslant m\\leqslant2n$ such that each valid code word produces a unique output code Circuits that perform decoding are called decoders Here, functional blocks for decoding are called n-to-m line decoders, where $m\\leqslant2n$, and generate 2n (or fewer) minterms for the n input variables","title":"Decoding"},{"location":"CLDF/Chapter1-3/#decoder-with-enable","text":"\u7531\u4e8e2-4\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u53ea\u6709\u8be5\u95e8\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06$A_1,A_0$\u7ec4\u6210\u7684\u8bd1\u7801\u5668\u5f53\u6210EN\uff0cEN\u5f53\u6210\u8f93\u5165\u4fe1\u53f7","title":"Decoder with Enable"},{"location":"CLDF/Chapter1-3/#bcd-to-segment-decoder","text":"\u5171\u9633\u6781\u4e0e\u5171\u9634\u6781\u63a5\u6cd5\uff1a","title":"BCD-to-Segment Decoder"},{"location":"CLDF/Chapter1-3/#encoding","text":"Encoding - the opposite of decoding - the conversion of an m-bit input code to a $n$-bit output code with $n < m< 2^n$ such that each valid code word produces a unique output code An encoder has $2^n$ (or fewer) input lines and $n$ output lines which generate the binary code corresponding to the input values \u4f20\u7edf\u7f16\u7801\u5668\u95ee\u9898\uff1a\u5982\u4ee5\u4e0b\u8f93\u51fa\u65b9\u7a0b\u5f0f\u5bf9\u5e94\u7f16\u7801\u5668\uff0c\u82e5$D_6,D_7$\u540c\u65f6\u4e3a1\uff0c\u4e0d\u80fd\u5224\u65ad\u662f$A_2$\u8fd8\u662f$A_1$\uff0c\u5373\u6709\u4e0d\u786e\u5b9a\u6027 \u4f18\u5148\u7f16\u7801\u5668\uff08Priority Encoder\uff09 One encoder that can accept all possible combinations of input values and produce a meaningful result is a priority encoder. Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with the corresponding binary code for that position. example: Priority encoder with 5 inputs (D4, D3, D2, D1, D0) - highest priority to most significant 1 present - Code outputs A2, A1, A0 and V where V indicates at least one 1 present. Xs in input part of table represent 0 or 1; thus table entries correspond to product terms instead of minterms. The column on the left shows that all 32 minterms are present in the product terms in the table Xs \u5728\u8f93\u51fa\u5217\u8868\u793a\u65e0\u5173\u60c5\u51b5\u4e0d\u540c","title":"Encoding"},{"location":"CLDF/Chapter1-3/#selecting","text":"Selecting of data or information is a critical function in digital systems and computers Logic circuits that perform selecting are called multiplexers Selecting can also be done by three-state logic or transmission gates","title":"Selecting"},{"location":"CLDF/Chapter1-3/#multiplexer","text":"A multiplexer selects information from an input line and directs the information to an output line typical multiplexer has n control inputs ($S_{n-1}, \u2026 S_0$) called selection inputs, $2^n$ information inputs ($I_{2^n - 1}, \u2026 I_0$), and one output $Y$ A multiplexer can be designed to have m information inputs with $m < 2^n$ as well as n selection inputs","title":"Multiplexer"},{"location":"CLDF/Chapter1-3/#2-to-1-line-multiplexer","text":"The single selection variable S has two values: S = 0 selects input $I_0$ S = 1 selects input $I_1$ The equation:$Y =\\overline{S}I_0 + SI_1$ The circuit:","title":"2-to-1-Line Multiplexer"},{"location":"CLDF/Chapter1-3/#multiplexer-width-expansion","text":"","title":"Multiplexer Width Expansion(\u9009\u62e9\u591a\u4f4d)"},{"location":"CLDF/Chapter1-3/#example4-to-1-line-quad-multiplexer","text":"","title":"example:4-to-1-line quad multiplexer"},{"location":"CLDF/Chapter1-3/#other-selection-implementations","text":"Three-state logic in place of AND-OR\u3002 Gate input cost = 18 Distributing the decoding across the three-state drivers\uff08\u5206\u5c42\u9009\u62e9\uff09 Gate input cost = 14","title":"Other Selection Implementations"},{"location":"CLDF/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-1","text":"\u67e5\u627e\u8868","title":"Combinational Logic Implementation- Multiplexer Approach 1"},{"location":"CLDF/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-2","text":"","title":"Combinational Logic Implementation - Multiplexer Approach 2"},{"location":"CLDF/Chapter1-3/#part-3-arithmetic-functions","text":"","title":"Part 3 Arithmetic functions"},{"location":"CLDF/Chapter1-3/#function-block","text":"","title":"Function Block"},{"location":"CLDF/Chapter1-3/#half-adder","text":"\u4e24\u8f93\u5165\u4e24\u8f93\u51fa $S$\u4e3a$X\\oplus Y,$$C$\u4e3a$XY$ \u5e38\u89c1\u4e24\u79cd\u7535\u8def\u5b9e\u73b0","title":"Half-Adder"},{"location":"CLDF/Chapter1-3/#full-adder","text":"\u5168\u52a0\u5668\u5373\u8003\u8651\u4e0a\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u5373$Z$or$C_i$ S=$\\overline{C_i}(A\\oplus B)+C_i(\\overline{A\\oplus B})$ The term $X\\cdot Y$ is carry generate,$X\\oplus Y$ is carry propagate Ripple-Carry Binary Adder:\u9700\u8981\u5ef6\u65f6 \u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 Group Carry Lookahead Logic","title":"Full-Adder"},{"location":"CLDF/Chapter1-3/#unsigned-subtraction","text":"","title":"Unsigned Subtraction"},{"location":"CLDF/Chapter1-3/#complements","text":"Diminished Radix Complement of N: defined as $(r^n-1)-N$ ,known as \u53cd\u7801 $1's$ complement Radix Complement: defined as $r^n-N$ $2's$ complement \u8865\u7801\uff1a\u5bf9n\u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u76f8\u5f53\u4e8e\u7b2c\u4e00\u4f4d$a_{n-1}$\u4ee3\u8868$-2^{n-1}$,\u540e\u7eed\u6bcf\u4f4d\u90fd\u4ee3\u8868$2^k$ \u5373M-N\u65f6\uff0c\u51cf\u6570N\u5148\u6c42\u8865\u7801$2^n-N$\uff0c\u7136\u540e$M+(2^n-N)$,\u82e5\u4ea7\u751f\u8fdb\u4f4d1\uff0c\u8bf4\u660e\u591f\u51cf\uff0c\u5bf9\u5e94\u503c\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u8fdb\u4f4d\u4e3a0\uff0c\u8bf4\u660e\u4e0d\u591f\u51cf\uff0c\u5219\u5bf9\u7ed3\u679c\u53d6\u8865\u7801\u5e76\u52a0\u8d1f\u53f7","title":"Complements \u8865\u7801"},{"location":"CLDF/Chapter1-3/#_2","text":"\u8bbe\u52a0\u6cd5\u4e3a0\uff0c\u51cf\u6cd5\u4e3a1\uff0c\u6b63\u6570\u7b2c\u4e00\u4f4d0\uff0c\u8d1f\u6570\u7b2c\u4e00\u4f4d1\uff0c\u90a3\u4e48\u5bf9\u51cf\u6570\u7b2c\u4e00\u4f4d\uff0c\u7b26\u53f7\uff0c\u88ab\u51cf\u6570\u7b2c\u4e00\u4f4d\u6784\u6210\u7684\u5e8f\u5217\uff0c\u82e5\u6709\u5076\u6570\u4e2a0\uff0c\u5728\u6ca1\u6709\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u53f7\u76f8\u52a0 \u82e5\u88ab\u52a0\u6570\u4e0e\u88ab\u51cf\u6570\u4e3a\u8d1f\uff0c\u5219\u53d6\u5bf9\u5e94\u8865\u7801\uff08\u4e0d\u6539\u53d8\u7b26\u53f7\u4f4d\uff09\uff0c\u4e4b\u540e\u82e5\u662f\u52a0\u6cd5\u5219\u6b63\u5e38\u8fdb\u884c\uff0c\u51cf\u6cd5\u5219\u7c7b\u4f3c\u5730\u5bf9\u51cf\u6570\u53d6\u8865","title":"\u6709\u7b26\u53f7\u51cf\u6cd5"},{"location":"CLDF/Chapter1-3/#_3","text":"\u540c\u53f7\u76f8\u52a0\u3001\u5f02\u53f7\u76f8\u51cf\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa \u5224\u65ad\u6ea2\u51fa\uff1a$V=C_n\\oplus C_{n-1}$,\u5373$C_n$\u4e0e$C_{n-1}$\u7b26\u53f7\u4e00\u81f4\u5219\u4e0d\u6ea2\u51fa\uff0c\u5426\u5219\u6ea2\u51fa \u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f0\uff0c\u6ea2\u51fa\u53ea\u53ef\u80fd\u662f$C_{n-1}$\u4e3a1 \u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f1\uff0c\u82e5\u4e0d\u6ea2\u51fa$C_{n-1}$\u9700\u8981\u4e3a1 \u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a\u4e24\u4e2a\u9996\u4f4d\u90fd\u662f1 \u6709\u7b26\u53f7\u6570\uff1a\u540c\u53f7\u65f6\u6709\u53ef\u80fd\u6ea2\u51fa","title":"\u6ea2\u51fa"},{"location":"CLDF/Chapter1-3/#_4","text":"\u5bf9\u4e8e2\u7684\u5e42\u6b21\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u7ed3\u679c\uff0c\u5bf9\u4e8e\u975e2\u5e42\u6b21\u53ef\u4ee5\u5e38\u6570\u52a0\u6cd5\u548c2\u7684\u5e42\u6b21\u4e58\u9664\u76f8\u7ed3\u5408\u5f97\u5230\u7ed3\u679c\u3002 \u5982$3x=2^1x+2^0x$,\u5373$x[31:0]={x[30:0],1'b0}+x[31:0]$.","title":"\u5e38\u6570\u9664\u6cd5\u3001\u4e58\u6cd5"},{"location":"CLDF/Chapter4-P1/","text":"Chapter 4 Part 1 Sequential Circuits Introduction \u65f6\u5e8f\u7535\u8def\u4ecb\u7ecd \u7ec4\u6210\uff1a \u73b0\u4ee3\u590d\u6742\u7535\u8def\u8bbe\u8ba1\u5927\u591a\u4f7f\u7528\u540c\u6b65 Storage elements: Latches or Flip-Flops \u7ec4\u5408\u903b\u8f91\uff1a Implements a multiple-output switching function Inputs are signals from the outside. Outputs are signals to the outside. Other inputs, State or Present State are signals from storage elements. The remaining outputs,Next State are inputs to storage elements. Combinatorial Logic: Next state function(\u6b21\u6001\u65b9\u7a0b): Next State = f(Inputs, State) Output function (Mealy): Outputs = g(Inputs, State) Output function (Moore): Outputs = h(State) \u65f6\u5e8f\u7535\u8def\u5206\u7c7b \u540c\u6b65(Synchronous)\uff1a\u5728\u67d0\u51e0\u4e2a\u65f6\u95f4\u68c0\u6d4b\uff0c\u4ec0\u4e48\u65f6\u5019\u89c2\u6d4b\u8f93\u5165\u548c\u6539\u53d8\u72b6\u6001\u4ec5\u4e0e\u65f6\u95f4\u4fe1\u53f7\u6709\u5173\u3002\u6240\u6709\u5143\u4ef6\u5728\u65f6\u949f\u6a21\u5757\u63a7\u5236\u4e0b\u540c\u65f6\u66f4\u65b0\u3002\u540c\u6b65\u62bd\u8c61\u4f7f\u590d\u6742\u7684\u8bbe\u8ba1\u53d8\u5f97\u6613\u4e8e\u5904\u7406\uff01 CPU\uff1a\u540c\u6b65 \u65f6\u949f\u6a21\u5757\uff1a always@ (posedge,clk) begin //\u53ea\u8981\u65f6\u949f\u4fe1\u53f7\u5411\u4e0a\u53d8\u52a8\uff0c\u5c31\u4f1a\u6267\u884c\u8be5\u6a21\u5757 ---> \u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u68c0\u6d4b \u540c\u6b65 end \u5f02\u6b65(Asynchronous)\uff1a\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u6539\u53d8\uff0c\u89c2\u6d4b\u8f93\u5165\u4e0e\u72b6\u6001\uff0c\u5373\u65f6\u54cd\u5e94\u3002 \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f Latch \u9519\u8bef\u7531\u4e8e$S$\u53d8\u5316\u4f20\u5230\u53cd\u76f8\u5668\u8f93\u51fa\u6709\u5ef6\u8fdf\uff0c\u56e0\u6b64\u51fa\u73b0$S$\u75311\u53d80\u540e\uff0c$\\overline{S}$\u5e76\u672a\u7acb\u5373\u75310\u53d81\uff0c\u4f7f\u5f97\u4e24\u8005\u90fd\u662f0\uff0c\u8f93\u51fa\u4e5f\u53d8\u6210\u4e860 \u5c06A\u4e0eY\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def S\u4e3a1\u65f6\uff0c$Y=B$\uff0cS\u4e3a0\u65f6\uff0cB\u4e0d\u6539\u53d8Y\uff0c\u56e0\u6b64Y\u53ef\u4ee5\u50a8\u5b58B\u7684\u503c \u518d\u52a0\u4e00\u4e2a\u975e\u95e8 \u4f18\u70b9\uff1a\u7535\u8def\u7b80\u5355 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u7cbe\u786e Basic (NAND) $\\overline{S} \u2013 \\overline{R}$ Latch \u9501\u5b58\u5668 \u8f93\u516500\u662f\u7981\u6b62\u7684 Basic (NOR) S \u2013 R Latch Clocked S-R Latch C\u4e3a0\uff0c\u9501\u5b58\u5668\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a1\uff0c\u4e0d\u6539\u53d8\u503c\uff1bC\u4e3a1\uff0c\u8f93\u5165\u76f8\u5f53\u4e8e$\\overline{S},\\overline{R}$. \u6539\u8fdb\uff1a\u4f7f\u5f97\u6ca1\u6709\u975e\u6cd5\u60c5\u51b5\u2014\u2014D Latch Flip-Flops The Latch Timing Problem \u53ea\u8981 C = 1\uff0cY \u7684\u503c\u5c31\u4f1a\u7ee7\u7eed\u53d8\u5316\uff01 \u6240\u9700\u884c\u4e3a\uff1aY \u5728\u6bcf\u4e2a\u65f6\u949f\u8109\u51b2\u4e2d\u4ec5\u66f4\u6539\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\u662f\u65ad\u5f00\u5b58\u50a8\u5143\u4ef6\u5185\u4ece Y \u5230 Y \u7684\u95ed\u5408\u8def\u5f84\uff0c\u4f7f\u7528\u89e6\u53d1\u5668\uff08flip-flop\uff09 a master-slave flip-flop an edge-triggered flip-flop S-R Master-Slave Flip-Flop \u5de6\u4e3b(master),\u53f3\u4ece(slave) \u5047\u8bbeS=1,R=0\uff0cC\u75310\u53d81\uff0c\u4e3b\u9501\u5b58\u5668\u5bf9\u5e94Q\u4e3a1\uff1bC\u518d\u53d80\uff0c\u4ece\u9501\u5b58\u5668\u63a5\u6536\u5916\u90e8\u8f93\u5165\uff0c\u5373Q\u4e0e$\\overline{Q}$\uff0c\u5bf9\u5e94\u8f93\u51faQ\u4e3a1 C\u5728\u4efb\u4f55\u72b6\u6001\uff0cS,R\u8f93\u5165\u7aef\u90fd\u4e0d\u53ef\u80fd\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\u72b6\u6001 \u53ea\u6709\u5f53clock\u5b8c\u6210\u4e00\u6b21$0\\rarr 1\\rarr 0$\u53d8\u5316\u7684\u5468\u671f\u540e\uff0c\u8f93\u51faQ\u624d\u4f1a\u6539\u53d8 \u95ee\u9898\uff1aclock\u4e3a1\u65f6\uff0c\u7531\u4e8e\u5916\u90e8\u8f93\u5165\u53d8\u5316\u5e26\u6765\u7684\u7d2f\u79ef\u6548\u5e94\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u80fd\u9519\u8bef\uff0c\u79f0\u4e3a 1\u2018s catching \u89e6\u53d1\u5668\u8f93\u51fa\u7684\u53d8\u5316\u4f1a\u56e0\u8109\u51b2\u5bbd\u5ea6\u800c\u5ef6\u8fdf\uff0c\u4ece\u800c\u4f7f\u7535\u8def\u53d8\u6162 \u5f53 C = 1 \u65f6\uff0c\u5141\u8bb8 S \u548c R \u66f4\u6539\uff0c\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1\uff0c\u7136\u540e\u53d8\u56de 0\uff0cR \u4fdd\u6301\u5728 0 \u3002\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a 1 \uff0c1 \u88ab\u8f6c\u79fb\u5230\u4ece\u9501\u5b58\u5668 \u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0\uff0cR \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0 \uff0c\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u590d\u4f4d 0 \u88ab\u4f20\u8f93\u5230\u4ece\u9501\u5b58\u5668 Edge-Triggered Flip-Flop \u4e3b\u9501\u5b58\u5668\u53d8\u4e3aD\u9501\u5b58\u5668 \u53ea\u770b\u8fb9\u6cbf\u60c5\u51b5\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa\uff0c\u5176\u4ed6\u65f6\u5019\u8f93\u5165\u4e0d\u5f71\u54cd \u200b \u4e0a\u5347\u6cbf\u89e6\u53d1\u5668\uff08Positive-Triggered Flip-Flop\uff09 Standard Symbols for Storage Elements \u4e3b\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u4fa7\u7684 \u8868\u793a\u4e0d\u5141\u8bb8\u8f93\u5165\u6539\u53d8\u3002 Actual Circuit of Edge-Triggered D Flip-Flop 6\u4e2a\u4e0e\u975e\u95e8\uff0c\u6210\u672c\u8f83\u4f4e Direct Input \u5f02\u6b65\u8d4b\u521d\u503c\uff1a\u901a\u8fc7S,R\u8f93\u5165\u4e3a\u89e6\u53d1\u5668\u8d4b\u521d\u503c\uff0c\u591a\u7528\u4e8e\u7cfb\u7edf\u590d\u4f4d \u82e5\u4f7f\u7528\u540c\u6b65\u8d4b\u521d\u503c\uff1a\u8bbe\u7f6eD \u5bf9\u6240\u793a\u7535\u8def 0 applied to R resets the flip-flop to the 0 state 0 applied to S sets the flip-flop to the 1 state Analysis \u8f93\u5165:$x(t)$,\u8f93\u51fa:$y(t)$,\u72b6\u6001:$A(t),B(t)$ a important equation:$Q=D$ Stable Table \u6709\u9650\u72b6\u6001\u673a Alternate State Table \u4e8c\u7ef4\u8868\uff1a State Diagrams The sequential circuit function can be represented in graphical form as a state diagram with the following components\uff1a A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example\uff1a/\u5de6\u4fa7\u8f93\u5165\uff0c\u53f3\u4fa7\u8f93\u51fa\uff0c\u7531\u73b0\u6001\u6307\u5411\u6b21\u6001\uff0c\u4e0b\u4f8b\u4e3aMealy\u578b Equivalent State Definitions \u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u5373\u5bf9\u4efb\u610f\u4e00\u79cd\u8f93\u5165\u90fd\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u4e0e\u6b21\u6001 \u4f8b\uff1a\u4e0b\u56fe\u4e2dS2\u4e0eS3 \u56e0\u6b64\u53ef\u4ee5\u6539\u5199 \u7136\u540e\u53d1\u73b0S1\u4e0eS2\u7b49\u6548 \u6b64\u65f6\u4e0d\u518d\u6709\u53ef\u4ee5\u5408\u5e76\u7684 Moore and Mealy Models Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist: Moore Model Outputs are a function ONLY of states.Usually specified on the states. State Table Mealy Model Outputs are a function of inputs AND states.Usually specified on the state transition arcs. State Table \u6df7\u5408\u578b\u5199\u6cd5 \u6307\u5411\u540c\u4e00\u4e2a\u6b21\u6001\u7684\u8f93\u51fa\u76f8\u540c\u65f6\u628a\u8f93\u51fa\u653e\u8fdb\u5708 One more example \u6a215\u8ba1\u6570\u5668\uff0c\u82e5\u4ece0\u5f00\u59cb\uff0c\u5219\u4f1a0~4\u5faa\u73af\u53d8\u5316\uff0c\u4f46\u82e5\u5916\u90e8\u5e72\u6270\u4ea7\u751f5-7\uff0c\u4e0b\u6b21\u4ecd\u4f1a\u5207\u6362\u56de0-4\uff0c\u4ece\u800c\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u4e0e\u9519\u8bef\u3002 Only states reachable from the reset state 000 are used: 000, 001, 010, 011, and 100. The circuit produces a 1 on Z after four clock periods and every five clock periods thereafter: 000 -> 001 -> 010 -> 011 -> 100 -> 000 -> 001 -> 010 -> 011 -> 100 \u2026 Filp-Flop Timing Parameters $t_s$\uff1asetup time\uff0c\u5efa\u7acb\u65f6\u95f4 \u6839\u636e\u5b9a\u4e49, $t_s$\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 $t_h$\uff1ahold time\uff0c\u89e6\u53d1\u8fb9\u6cbf\u540e\u8fc7\u4e00\u6bb5\u65f6\u95f4\u8f93\u5165\u624d\u80fd\u6539\u53d8\u3002\u73b0\u5728\u591a\u6570\u89e6\u53d1\u5668$t_h$\u53ef\u4ee5\u662f0 $t_w$\uff1aclock pulse width $t_{px}$\uff1apropagation delay. Measured from clock edge that triggers the output change to the output change. $t_{PHL}$ :High-to-Low $t_{PLH}$ :Low-to-High $t_{pd}$:max ($t_{PHL}$,$ t_{PLH}$) Circuit and System Level Timing New Timing Components $t_p$ clock period - The interval between occurrences of a specific clock edge in a periodic clock $t_{pd,COMB}$ :total delay of combinational logic along the path from flip-flop output to flip-flop input \u7ec4\u5408\u903b\u8f91\u5728\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7684\u603b\u5ef6\u8fdf $t_{pd,FF}$\uff1a\u89e6\u53d1\u5668\u603b\u5ef6\u8fdf $t_{slack}$ \uff1a extra time in the clock period in addition to the sum of the delays and setup time on a path \u53ef\u4ee5\u662f\u6b63\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570 \u6240\u6709\u8def\u5f84\u4e0a\u7684\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e\u96f6\u624d\u80fd\u6b63\u786e\u64cd\u4f5c Must be greater than or equal to zero on all paths for correct operation Timing Equations\uff1a $$ t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s) $$ For $t_{slack}$ greater than or equal to zero, $$ t_p\\geqslant max(t_{pd,FF}+t_{pd,COMB}+t_s) $$ for all paths from flip-flop output to flip-flop input Calculation of Allowable $t_{pd,COMB}$ \u56e0\u6b64\u66f4\u591a\u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668","title":"Chapter 4  Part 1"},{"location":"CLDF/Chapter4-P1/#chapter-4-part-1","text":"","title":"Chapter 4  Part 1"},{"location":"CLDF/Chapter4-P1/#sequential-circuits-introduction","text":"","title":"Sequential Circuits Introduction"},{"location":"CLDF/Chapter4-P1/#_1","text":"\u7ec4\u6210\uff1a \u73b0\u4ee3\u590d\u6742\u7535\u8def\u8bbe\u8ba1\u5927\u591a\u4f7f\u7528\u540c\u6b65 Storage elements: Latches or Flip-Flops \u7ec4\u5408\u903b\u8f91\uff1a Implements a multiple-output switching function Inputs are signals from the outside. Outputs are signals to the outside. Other inputs, State or Present State are signals from storage elements. The remaining outputs,Next State are inputs to storage elements. Combinatorial Logic: Next state function(\u6b21\u6001\u65b9\u7a0b): Next State = f(Inputs, State) Output function (Mealy): Outputs = g(Inputs, State) Output function (Moore): Outputs = h(State)","title":"\u65f6\u5e8f\u7535\u8def\u4ecb\u7ecd"},{"location":"CLDF/Chapter4-P1/#_2","text":"\u540c\u6b65(Synchronous)\uff1a\u5728\u67d0\u51e0\u4e2a\u65f6\u95f4\u68c0\u6d4b\uff0c\u4ec0\u4e48\u65f6\u5019\u89c2\u6d4b\u8f93\u5165\u548c\u6539\u53d8\u72b6\u6001\u4ec5\u4e0e\u65f6\u95f4\u4fe1\u53f7\u6709\u5173\u3002\u6240\u6709\u5143\u4ef6\u5728\u65f6\u949f\u6a21\u5757\u63a7\u5236\u4e0b\u540c\u65f6\u66f4\u65b0\u3002\u540c\u6b65\u62bd\u8c61\u4f7f\u590d\u6742\u7684\u8bbe\u8ba1\u53d8\u5f97\u6613\u4e8e\u5904\u7406\uff01 CPU\uff1a\u540c\u6b65 \u65f6\u949f\u6a21\u5757\uff1a always@ (posedge,clk) begin //\u53ea\u8981\u65f6\u949f\u4fe1\u53f7\u5411\u4e0a\u53d8\u52a8\uff0c\u5c31\u4f1a\u6267\u884c\u8be5\u6a21\u5757 ---> \u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u68c0\u6d4b \u540c\u6b65 end \u5f02\u6b65(Asynchronous)\uff1a\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u6539\u53d8\uff0c\u89c2\u6d4b\u8f93\u5165\u4e0e\u72b6\u6001\uff0c\u5373\u65f6\u54cd\u5e94\u3002","title":"\u65f6\u5e8f\u7535\u8def\u5206\u7c7b"},{"location":"CLDF/Chapter4-P1/#_3","text":"","title":"\u79bb\u6563\u4e8b\u4ef6\u4eff\u771f"},{"location":"CLDF/Chapter4-P1/#latch","text":"\u9519\u8bef\u7531\u4e8e$S$\u53d8\u5316\u4f20\u5230\u53cd\u76f8\u5668\u8f93\u51fa\u6709\u5ef6\u8fdf\uff0c\u56e0\u6b64\u51fa\u73b0$S$\u75311\u53d80\u540e\uff0c$\\overline{S}$\u5e76\u672a\u7acb\u5373\u75310\u53d81\uff0c\u4f7f\u5f97\u4e24\u8005\u90fd\u662f0\uff0c\u8f93\u51fa\u4e5f\u53d8\u6210\u4e860","title":"Latch"},{"location":"CLDF/Chapter4-P1/#ay","text":"S\u4e3a1\u65f6\uff0c$Y=B$\uff0cS\u4e3a0\u65f6\uff0cB\u4e0d\u6539\u53d8Y\uff0c\u56e0\u6b64Y\u53ef\u4ee5\u50a8\u5b58B\u7684\u503c","title":"\u5c06A\u4e0eY\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def"},{"location":"CLDF/Chapter4-P1/#_4","text":"\u4f18\u70b9\uff1a\u7535\u8def\u7b80\u5355 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u7cbe\u786e","title":"\u518d\u52a0\u4e00\u4e2a\u975e\u95e8"},{"location":"CLDF/Chapter4-P1/#basic-nand-overlines-overliner-latch","text":"\u8f93\u516500\u662f\u7981\u6b62\u7684","title":"Basic (NAND) $\\overline{S} \u2013 \\overline{R}$ Latch \u9501\u5b58\u5668"},{"location":"CLDF/Chapter4-P1/#basic-nor-s-r-latch","text":"","title":"Basic (NOR) S \u2013 R Latch"},{"location":"CLDF/Chapter4-P1/#clocked-s-r-latch","text":"C\u4e3a0\uff0c\u9501\u5b58\u5668\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a1\uff0c\u4e0d\u6539\u53d8\u503c\uff1bC\u4e3a1\uff0c\u8f93\u5165\u76f8\u5f53\u4e8e$\\overline{S},\\overline{R}$.","title":"Clocked S-R Latch"},{"location":"CLDF/Chapter4-P1/#d-latch","text":"","title":"\u6539\u8fdb\uff1a\u4f7f\u5f97\u6ca1\u6709\u975e\u6cd5\u60c5\u51b5\u2014\u2014D Latch"},{"location":"CLDF/Chapter4-P1/#flip-flops","text":"","title":"Flip-Flops"},{"location":"CLDF/Chapter4-P1/#the-latch-timing-problem","text":"\u53ea\u8981 C = 1\uff0cY \u7684\u503c\u5c31\u4f1a\u7ee7\u7eed\u53d8\u5316\uff01 \u6240\u9700\u884c\u4e3a\uff1aY \u5728\u6bcf\u4e2a\u65f6\u949f\u8109\u51b2\u4e2d\u4ec5\u66f4\u6539\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\u662f\u65ad\u5f00\u5b58\u50a8\u5143\u4ef6\u5185\u4ece Y \u5230 Y \u7684\u95ed\u5408\u8def\u5f84\uff0c\u4f7f\u7528\u89e6\u53d1\u5668\uff08flip-flop\uff09 a master-slave flip-flop an edge-triggered flip-flop","title":"The Latch Timing Problem"},{"location":"CLDF/Chapter4-P1/#s-r-master-slave-flip-flop","text":"\u5de6\u4e3b(master),\u53f3\u4ece(slave) \u5047\u8bbeS=1,R=0\uff0cC\u75310\u53d81\uff0c\u4e3b\u9501\u5b58\u5668\u5bf9\u5e94Q\u4e3a1\uff1bC\u518d\u53d80\uff0c\u4ece\u9501\u5b58\u5668\u63a5\u6536\u5916\u90e8\u8f93\u5165\uff0c\u5373Q\u4e0e$\\overline{Q}$\uff0c\u5bf9\u5e94\u8f93\u51faQ\u4e3a1 C\u5728\u4efb\u4f55\u72b6\u6001\uff0cS,R\u8f93\u5165\u7aef\u90fd\u4e0d\u53ef\u80fd\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\u72b6\u6001 \u53ea\u6709\u5f53clock\u5b8c\u6210\u4e00\u6b21$0\\rarr 1\\rarr 0$\u53d8\u5316\u7684\u5468\u671f\u540e\uff0c\u8f93\u51faQ\u624d\u4f1a\u6539\u53d8 \u95ee\u9898\uff1aclock\u4e3a1\u65f6\uff0c\u7531\u4e8e\u5916\u90e8\u8f93\u5165\u53d8\u5316\u5e26\u6765\u7684\u7d2f\u79ef\u6548\u5e94\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u80fd\u9519\u8bef\uff0c\u79f0\u4e3a 1\u2018s catching \u89e6\u53d1\u5668\u8f93\u51fa\u7684\u53d8\u5316\u4f1a\u56e0\u8109\u51b2\u5bbd\u5ea6\u800c\u5ef6\u8fdf\uff0c\u4ece\u800c\u4f7f\u7535\u8def\u53d8\u6162 \u5f53 C = 1 \u65f6\uff0c\u5141\u8bb8 S \u548c R \u66f4\u6539\uff0c\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1\uff0c\u7136\u540e\u53d8\u56de 0\uff0cR \u4fdd\u6301\u5728 0 \u3002\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a 1 \uff0c1 \u88ab\u8f6c\u79fb\u5230\u4ece\u9501\u5b58\u5668 \u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0\uff0cR \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0 \uff0c\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u590d\u4f4d 0 \u88ab\u4f20\u8f93\u5230\u4ece\u9501\u5b58\u5668","title":"S-R Master-Slave Flip-Flop"},{"location":"CLDF/Chapter4-P1/#edge-triggered-flip-flop","text":"\u4e3b\u9501\u5b58\u5668\u53d8\u4e3aD\u9501\u5b58\u5668 \u53ea\u770b\u8fb9\u6cbf\u60c5\u51b5\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa\uff0c\u5176\u4ed6\u65f6\u5019\u8f93\u5165\u4e0d\u5f71\u54cd \u200b \u4e0a\u5347\u6cbf\u89e6\u53d1\u5668\uff08Positive-Triggered Flip-Flop\uff09","title":"Edge-Triggered Flip-Flop"},{"location":"CLDF/Chapter4-P1/#standard-symbols-for-storage-elements","text":"\u4e3b\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u4fa7\u7684 \u8868\u793a\u4e0d\u5141\u8bb8\u8f93\u5165\u6539\u53d8\u3002","title":"Standard Symbols for Storage Elements"},{"location":"CLDF/Chapter4-P1/#actual-circuit-of-edge-triggered-d-flip-flop","text":"6\u4e2a\u4e0e\u975e\u95e8\uff0c\u6210\u672c\u8f83\u4f4e","title":"Actual Circuit of Edge-Triggered D Flip-Flop"},{"location":"CLDF/Chapter4-P1/#direct-input","text":"\u5f02\u6b65\u8d4b\u521d\u503c\uff1a\u901a\u8fc7S,R\u8f93\u5165\u4e3a\u89e6\u53d1\u5668\u8d4b\u521d\u503c\uff0c\u591a\u7528\u4e8e\u7cfb\u7edf\u590d\u4f4d \u82e5\u4f7f\u7528\u540c\u6b65\u8d4b\u521d\u503c\uff1a\u8bbe\u7f6eD \u5bf9\u6240\u793a\u7535\u8def 0 applied to R resets the flip-flop to the 0 state 0 applied to S sets the flip-flop to the 1 state","title":"Direct Input"},{"location":"CLDF/Chapter4-P1/#analysis","text":"\u8f93\u5165:$x(t)$,\u8f93\u51fa:$y(t)$,\u72b6\u6001:$A(t),B(t)$ a important equation:$Q=D$","title":"Analysis"},{"location":"CLDF/Chapter4-P1/#stable-table","text":"\u6709\u9650\u72b6\u6001\u673a Alternate State Table \u4e8c\u7ef4\u8868\uff1a","title":"Stable Table"},{"location":"CLDF/Chapter4-P1/#state-diagrams","text":"The sequential circuit function can be represented in graphical form as a state diagram with the following components\uff1a A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example\uff1a/\u5de6\u4fa7\u8f93\u5165\uff0c\u53f3\u4fa7\u8f93\u51fa\uff0c\u7531\u73b0\u6001\u6307\u5411\u6b21\u6001\uff0c\u4e0b\u4f8b\u4e3aMealy\u578b","title":"State Diagrams"},{"location":"CLDF/Chapter4-P1/#equivalent-state-definitions","text":"\u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u5373\u5bf9\u4efb\u610f\u4e00\u79cd\u8f93\u5165\u90fd\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u4e0e\u6b21\u6001 \u4f8b\uff1a\u4e0b\u56fe\u4e2dS2\u4e0eS3 \u56e0\u6b64\u53ef\u4ee5\u6539\u5199 \u7136\u540e\u53d1\u73b0S1\u4e0eS2\u7b49\u6548 \u6b64\u65f6\u4e0d\u518d\u6709\u53ef\u4ee5\u5408\u5e76\u7684","title":"Equivalent State Definitions"},{"location":"CLDF/Chapter4-P1/#moore-and-mealy-models","text":"Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist:","title":"Moore and Mealy Models"},{"location":"CLDF/Chapter4-P1/#moore-model","text":"Outputs are a function ONLY of states.Usually specified on the states. State Table","title":"Moore Model"},{"location":"CLDF/Chapter4-P1/#mealy-model","text":"Outputs are a function of inputs AND states.Usually specified on the state transition arcs. State Table","title":"Mealy Model"},{"location":"CLDF/Chapter4-P1/#_5","text":"\u6307\u5411\u540c\u4e00\u4e2a\u6b21\u6001\u7684\u8f93\u51fa\u76f8\u540c\u65f6\u628a\u8f93\u51fa\u653e\u8fdb\u5708","title":"\u6df7\u5408\u578b\u5199\u6cd5"},{"location":"CLDF/Chapter4-P1/#one-more-example","text":"\u6a215\u8ba1\u6570\u5668\uff0c\u82e5\u4ece0\u5f00\u59cb\uff0c\u5219\u4f1a0~4\u5faa\u73af\u53d8\u5316\uff0c\u4f46\u82e5\u5916\u90e8\u5e72\u6270\u4ea7\u751f5-7\uff0c\u4e0b\u6b21\u4ecd\u4f1a\u5207\u6362\u56de0-4\uff0c\u4ece\u800c\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u4e0e\u9519\u8bef\u3002 Only states reachable from the reset state 000 are used: 000, 001, 010, 011, and 100. The circuit produces a 1 on Z after four clock periods and every five clock periods thereafter: 000 -> 001 -> 010 -> 011 -> 100 -> 000 -> 001 -> 010 -> 011 -> 100 \u2026","title":"One more example"},{"location":"CLDF/Chapter4-P1/#filp-flop-timing-parameters","text":"$t_s$\uff1asetup time\uff0c\u5efa\u7acb\u65f6\u95f4 \u6839\u636e\u5b9a\u4e49, $t_s$\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 $t_h$\uff1ahold time\uff0c\u89e6\u53d1\u8fb9\u6cbf\u540e\u8fc7\u4e00\u6bb5\u65f6\u95f4\u8f93\u5165\u624d\u80fd\u6539\u53d8\u3002\u73b0\u5728\u591a\u6570\u89e6\u53d1\u5668$t_h$\u53ef\u4ee5\u662f0 $t_w$\uff1aclock pulse width $t_{px}$\uff1apropagation delay. Measured from clock edge that triggers the output change to the output change. $t_{PHL}$ :High-to-Low $t_{PLH}$ :Low-to-High $t_{pd}$:max ($t_{PHL}$,$ t_{PLH}$)","title":"Filp-Flop Timing Parameters"},{"location":"CLDF/Chapter4-P1/#circuit-and-system-level-timing","text":"New Timing Components $t_p$ clock period - The interval between occurrences of a specific clock edge in a periodic clock $t_{pd,COMB}$ :total delay of combinational logic along the path from flip-flop output to flip-flop input \u7ec4\u5408\u903b\u8f91\u5728\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7684\u603b\u5ef6\u8fdf $t_{pd,FF}$\uff1a\u89e6\u53d1\u5668\u603b\u5ef6\u8fdf $t_{slack}$ \uff1a extra time in the clock period in addition to the sum of the delays and setup time on a path \u53ef\u4ee5\u662f\u6b63\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570 \u6240\u6709\u8def\u5f84\u4e0a\u7684\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e\u96f6\u624d\u80fd\u6b63\u786e\u64cd\u4f5c Must be greater than or equal to zero on all paths for correct operation Timing Equations\uff1a $$ t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s) $$ For $t_{slack}$ greater than or equal to zero, $$ t_p\\geqslant max(t_{pd,FF}+t_{pd,COMB}+t_s) $$ for all paths from flip-flop output to flip-flop input Calculation of Allowable $t_{pd,COMB}$ \u56e0\u6b64\u66f4\u591a\u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668","title":"Circuit and System Level Timing"},{"location":"CLDF/Chapter4-P2/","text":"Chapter 4 Part 2 Sequential Circuit Design Formulation: Finding a State Diagram A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09 A Example: Sequence Recognizers \u5e8f\u5217\u8bc6\u522b A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurrence. \u9700\u8981\u627e\u5230\u6307\u5b9a\u5e8f\u5217\u7684\u5934\u5c3e To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurrence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred. \u72b6\u6001\u7b49\u6548 \u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1a \u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c\u3002 \u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001,\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c(S1, S2), \u6216\u8005\u8bf4\uff0c\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u5bf9\u3002\u7b49\u6548\u72b6\u6001\u53ef\u4ee5\u5408\u5e76\u3002\u8fd9\u91cc\u201c\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\u201d\u662f\u6307\u957f\u5ea6\u548c\u7ed3\u6784\u662f\u4efb\u610f\u7684\uff0c\u5b83\u5305\u542b\u65e0\u7a77\u591a\u4f4d\uff0c\u4e14\u6709\u65e0\u7a77\u591a\u79cd\u7ec4\u5408\u3002 \u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5\uff1a\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u5176\u6b21\u6216\u6b21\u6001\u76f8\u540c\uff0c\u6216\u6b21\u6001\u4ea4\u9519\uff0c\u6216\u6b21\u6001\u5faa\u73af $S_i$\u4e0e$S_j$\u7b49\u6548\uff0c$S_k$\u4e0e$S_l$\u7b49\u6548 \u9690\u542b\u8868\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u627e\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u7531\u4e8eCD\u3001DE\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5DG\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7 \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5206\u914d \u57fa\u672c\u539f\u5219\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \uff08 \u8f83\u4e3a\u91cd\u8981 \uff09 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910 \u6ce8\uff1a\uff084\uff09\u4e2d4\u4e2a\u72b6\u6001\u51fa\u73b0\u6b21\u6570\u90fd\u4e00\u6837\u591a\uff0c\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u5206\u914d\u4e3a\u903b\u8f910\u5373\u53ef Other Filp-Flop J-K Filp-Flop \u4e0eSR\u7c7b\u4f3c\uff0c\u4f46\u8f93\u516511\u65f6\u89e6\u53d1\u5668\u4e3a\u6c42\u53cd(opposite state)\uff0c\u5373\u6ca1\u6709\u975e\u6cd5\u72b6\u6001 Implementation by D Flip-Flop\uff08\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u6027\u91c7\u6837\uff09\uff1a J=0\uff0cK=0\uff0cQ\u8f93\u51fa\u9001\u7ed9D\uff0c\u4fdd\u6301 J=0\uff0cK=1\uff0c\u4e0a\u4e0b\u5168disable\uff0cD\u7f6e0\uff0creset J=1\uff0cK=0\uff0cD\u8f93\u5165\u4e3a$\\overline{Q}+Q$\uff0c\u4e3a1 J=1\uff0cK=1\uff0c$\\overline{Q}$\u9001\u7ed9D\uff0c\u6c42\u53cd T Flip-Flop \u5355\u8f93\u5165T\uff0cT=0\u4fdd\u6301\uff0cT=1\u6c42\u53cd Reset (asynchronous or synchronous) essential \u9700\u8981reset\u8d4b\u521d\u503c \u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1 \u660e\u786e\u9700\u6c42 \u72b6\u6001\u56fe \u72b6\u6001\u8868 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5de5\u827a\u6620\u5c04 \u7535\u8def\u9a8c\u8bc1","title":"Chapter 4  Part 2"},{"location":"CLDF/Chapter4-P2/#chapter-4-part-2","text":"","title":"Chapter 4  Part 2"},{"location":"CLDF/Chapter4-P2/#sequential-circuit-design","text":"","title":"Sequential Circuit Design"},{"location":"CLDF/Chapter4-P2/#formulation-finding-a-state-diagram","text":"A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09","title":"Formulation: Finding a State Diagram"},{"location":"CLDF/Chapter4-P2/#a-example-sequence-recognizers","text":"A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurrence. \u9700\u8981\u627e\u5230\u6307\u5b9a\u5e8f\u5217\u7684\u5934\u5c3e To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurrence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred.","title":"A Example: Sequence Recognizers \u5e8f\u5217\u8bc6\u522b"},{"location":"CLDF/Chapter4-P2/#_1","text":"\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1a \u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c\u3002 \u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001,\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c(S1, S2), \u6216\u8005\u8bf4\uff0c\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u5bf9\u3002\u7b49\u6548\u72b6\u6001\u53ef\u4ee5\u5408\u5e76\u3002\u8fd9\u91cc\u201c\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\u201d\u662f\u6307\u957f\u5ea6\u548c\u7ed3\u6784\u662f\u4efb\u610f\u7684\uff0c\u5b83\u5305\u542b\u65e0\u7a77\u591a\u4f4d\uff0c\u4e14\u6709\u65e0\u7a77\u591a\u79cd\u7ec4\u5408\u3002 \u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5\uff1a\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u5176\u6b21\u6216\u6b21\u6001\u76f8\u540c\uff0c\u6216\u6b21\u6001\u4ea4\u9519\uff0c\u6216\u6b21\u6001\u5faa\u73af $S_i$\u4e0e$S_j$\u7b49\u6548\uff0c$S_k$\u4e0e$S_l$\u7b49\u6548 \u9690\u542b\u8868\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u627e\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u7531\u4e8eCD\u3001DE\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5DG\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7 \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9","title":"\u72b6\u6001\u7b49\u6548"},{"location":"CLDF/Chapter4-P2/#_2","text":"\u57fa\u672c\u539f\u5219\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \uff08 \u8f83\u4e3a\u91cd\u8981 \uff09 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910 \u6ce8\uff1a\uff084\uff09\u4e2d4\u4e2a\u72b6\u6001\u51fa\u73b0\u6b21\u6570\u90fd\u4e00\u6837\u591a\uff0c\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u5206\u914d\u4e3a\u903b\u8f910\u5373\u53ef","title":"\u72b6\u6001\u5206\u914d"},{"location":"CLDF/Chapter4-P2/#other-filp-flop","text":"","title":"Other Filp-Flop"},{"location":"CLDF/Chapter4-P2/#j-k-filp-flop","text":"\u4e0eSR\u7c7b\u4f3c\uff0c\u4f46\u8f93\u516511\u65f6\u89e6\u53d1\u5668\u4e3a\u6c42\u53cd(opposite state)\uff0c\u5373\u6ca1\u6709\u975e\u6cd5\u72b6\u6001 Implementation by D Flip-Flop\uff08\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u6027\u91c7\u6837\uff09\uff1a J=0\uff0cK=0\uff0cQ\u8f93\u51fa\u9001\u7ed9D\uff0c\u4fdd\u6301 J=0\uff0cK=1\uff0c\u4e0a\u4e0b\u5168disable\uff0cD\u7f6e0\uff0creset J=1\uff0cK=0\uff0cD\u8f93\u5165\u4e3a$\\overline{Q}+Q$\uff0c\u4e3a1 J=1\uff0cK=1\uff0c$\\overline{Q}$\u9001\u7ed9D\uff0c\u6c42\u53cd","title":"J-K Filp-Flop"},{"location":"CLDF/Chapter4-P2/#t-flip-flop","text":"\u5355\u8f93\u5165T\uff0cT=0\u4fdd\u6301\uff0cT=1\u6c42\u53cd Reset (asynchronous or synchronous) essential \u9700\u8981reset\u8d4b\u521d\u503c","title":"T Flip-Flop"},{"location":"CLDF/Chapter4-P2/#_3","text":"\u660e\u786e\u9700\u6c42 \u72b6\u6001\u56fe \u72b6\u6001\u8868 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5de5\u827a\u6620\u5c04 \u7535\u8def\u9a8c\u8bc1","title":"\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1"},{"location":"CLDF/Chapter5/","text":"Chapter 5 Digital Hardware Implementation Why Programmable Logic? Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable. Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices! Programming Technologies Classification Control connection Mask programming\uff1a\u5de5\u5382\u751f\u4ea7\u65f6\u5b8c\u6210\uff0c\u4e0d\u53ef\u518d\u7f16\u7a0b\uff0c\u597d\u5904\u662f\u6210\u672c\u4f4e\uff0cone time programming Fuse(\u7194\u4e1d)\uff1a\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse\uff1a\u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element\uff1a\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00 Build Lookup Table(LUT) \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570 Transistor Switching Control \u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781\uff1a Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements(as in a memory) Characteristic Configuration ROM(Read Only Memory) \uff1aa fixed array of AND gates and a programmable array of OR gates \u56fa\u5b9a\u4e0e\u9635\u5217\uff0c\u53ef\u7f16\u7a0b\u6216\u9635\u5217 ROM size=address width \u00d7 word width = $2^2 \u00d74$= 16 bit Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. \u7f3a\u70b9\uff1a\u8f93\u5165\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570 \u6539\u8fdb\uff1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u65e2\u6709\u7684 PAL \u8f93\u51fa\u5f53\u4f5c\u8f93\u5165\uff0c\u8f93\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002 Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. \u4e0e PAL \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u80fd\u5bf9\u8f93\u51fa\u7ec4\u5408\u8fdb\u884c\u91cd\u7f16\u7a0b\u3002 \u5176\u540c PAL \u4e00\u6837\u5177\u6709\u4e00\u4e2a\u7f3a\u9677\u662f\uff0c\u56e0\u4e3a\u8868\u8fbe\u51fd\u6570\u7684\u65b9\u6cd5\u4e0d\u662f\u901a\u8fc7 SOM \u6216\u8005 POM \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570\u3002 \u5728\u57fa\u7840\u4e0a\u4e00\u4e2a\u6539\u8fdb\u662f\u5728\u8f93\u51fa\u7684\u65f6\u5019\u518d\u505a\u4e00\u6b21\u5f02\u6216\uff08\u4e0d\u7528\u975e\u95e8\u4f53\u73b0\u4e86\u53ef\u91cd\u7f16\u7a0b\u7684\u601d\u60f3\uff09\uff0c\u4ee5\u4ea7\u751f\u65b0\u7684\u9879\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u5f02\u6216\u95e8\u4f53\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u3002 \u4e0e\u9879\u8d44\u6e90\u6709\u9650\uff0c\u9700\u8981\u627e\u5230\u53ef\u91cd\u7528\u7684\u4e0e\u9879\u3002","title":"Chapter 5 Digital Hardware Implementation"},{"location":"CLDF/Chapter5/#chapter-5-digital-hardware-implementation","text":"","title":"Chapter 5 Digital Hardware Implementation"},{"location":"CLDF/Chapter5/#why-programmable-logic","text":"Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable. Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices!","title":"Why Programmable Logic?"},{"location":"CLDF/Chapter5/#programming-technologies","text":"","title":"Programming Technologies"},{"location":"CLDF/Chapter5/#classification","text":"","title":"Classification"},{"location":"CLDF/Chapter5/#control-connection","text":"Mask programming\uff1a\u5de5\u5382\u751f\u4ea7\u65f6\u5b8c\u6210\uff0c\u4e0d\u53ef\u518d\u7f16\u7a0b\uff0c\u597d\u5904\u662f\u6210\u672c\u4f4e\uff0cone time programming Fuse(\u7194\u4e1d)\uff1a\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse\uff1a\u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element\uff1a\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00","title":"Control connection"},{"location":"CLDF/Chapter5/#build-lookup-tablelut","text":"\u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570","title":"Build Lookup Table(LUT)"},{"location":"CLDF/Chapter5/#transistor-switching-control","text":"\u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781\uff1a Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements(as in a memory)","title":"Transistor Switching Control"},{"location":"CLDF/Chapter5/#characteristic","text":"","title":"Characteristic"},{"location":"CLDF/Chapter5/#configuration","text":"ROM(Read Only Memory) \uff1aa fixed array of AND gates and a programmable array of OR gates \u56fa\u5b9a\u4e0e\u9635\u5217\uff0c\u53ef\u7f16\u7a0b\u6216\u9635\u5217 ROM size=address width \u00d7 word width = $2^2 \u00d74$= 16 bit Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. \u7f3a\u70b9\uff1a\u8f93\u5165\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570 \u6539\u8fdb\uff1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u65e2\u6709\u7684 PAL \u8f93\u51fa\u5f53\u4f5c\u8f93\u5165\uff0c\u8f93\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002 Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. \u4e0e PAL \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u80fd\u5bf9\u8f93\u51fa\u7ec4\u5408\u8fdb\u884c\u91cd\u7f16\u7a0b\u3002 \u5176\u540c PAL \u4e00\u6837\u5177\u6709\u4e00\u4e2a\u7f3a\u9677\u662f\uff0c\u56e0\u4e3a\u8868\u8fbe\u51fd\u6570\u7684\u65b9\u6cd5\u4e0d\u662f\u901a\u8fc7 SOM \u6216\u8005 POM \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570\u3002 \u5728\u57fa\u7840\u4e0a\u4e00\u4e2a\u6539\u8fdb\u662f\u5728\u8f93\u51fa\u7684\u65f6\u5019\u518d\u505a\u4e00\u6b21\u5f02\u6216\uff08\u4e0d\u7528\u975e\u95e8\u4f53\u73b0\u4e86\u53ef\u91cd\u7f16\u7a0b\u7684\u601d\u60f3\uff09\uff0c\u4ee5\u4ea7\u751f\u65b0\u7684\u9879\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u5f02\u6216\u95e8\u4f53\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u3002 \u4e0e\u9879\u8d44\u6e90\u6709\u9650\uff0c\u9700\u8981\u627e\u5230\u53ef\u91cd\u7528\u7684\u4e0e\u9879\u3002","title":"Configuration"},{"location":"CLDF/Chapter6/","text":"Registers & Register Transfers Register \u4fdd\u6301\u4fe1\u53f7\u5728\u591a\u4e2a\u65f6\u949f\u5468\u671f\u4e0d\u53d8 \u6dfb\u52a0Load\uff0cLoad\u4e3a0\u65f6\u65e0\u8bbaclock\u4e3a\u4f55\u503c\uff0c\u8f93\u51fa\u4e0d\u53d8\uff0cLoad\u4e3a1\u65f6\uff0c\u8f93\u51fa\u968fclock\u53d8\u5316 \u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u52a0\u6216\u95e8 \u7136\u800c\uff0c\u5728\u95e8\u63a7\u65f6\u949f\u6280\u672f\u4e2d\uff0c\u7531\u4e8e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u903b\u8f91\u95e8\uff0c\u65f6\u949f\u8109\u51b2\u5230\u8fbe Control \u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u989d\u5916\u7684\u4f20\u64ad\u5ef6\u65f6\uff0c\u5373\u65f6\u949f\u504f\u79fb(clock skew)\u3002\u800c\u8fd9\u5fae\u5c0f\u7684\u5ef6\u65f6\u4f1a\u5bfc\u81f4\u5728\u6574\u4e2a\u540c\u6b65\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7ec4\u4ef6\u5f97\u5230\u7684\u65f6\u949f\u8109\u51b2\u6709\u504f\u5dee\uff0c\u800c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u6240\u4ee5\u5728\u5b9e\u9645\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5e94\u5f53\u907f\u514d\u6216\u5c3d\u53ef\u80fd\u7f29\u5c0f\u65f6\u949f\u504f\u79fb\u3002 \u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u4e0d\u5e0c\u671b\u5b83\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c06\u5b83\u7684\u8f93\u5165\u8f7d\u5165\uff0c\u4e5f\u5c31\u662f\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e8c\u9009\u4e00\u591a\u8def\u590d\u7528\u5668\u5b9e\u73b0\u3002 Register Cell Design Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate Specifications A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state) Register Transfer Operations The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations \u76d1\u7763\u64cd\u4f5c\u5e8f\u5217\u7684\u63a7\u5236 Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations \u5176\u4e2d\uff0c\u6700\u57fa\u7840\u7684\u90a3\u90e8\u5206\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5fae\u64cd\u4f5c(microoperation)\uff0c\u5b83\u4eec\u662f\u5b9e\u73b0\u590d\u6742\u64cd\u4f5c\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u5c06 R1 \u7684\u6570\u636e\u8f7d\u5165 R2\uff0c\u5c06 R1 \u548c R2 \u76f8\u52a0\uff0c\u6216\u662f\u81ea\u589e R1 \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u6bd4\u7279\u5411\u91cf\u4e3a\u8f7d\u4f53\u5e76\u884c\u5b9e\u73b0\u7684\u3002 Register Notation RTL: \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00(Register Transfer Language) $sl,sr$\u4f8b\u5b50\uff1a R2<-sl R1 \uff0cR1\u5de6\u79fb\u4e00\u4f4d\u4f20\u7ed9R2 example:\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d R1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002K1\u63a7\u5236\u7684\u662fR2\u662f\u5426\u63a5\u6536R1\u7684\u4fe1\u53f7\uff0c\u800c\u975eR1\u662f\u5426\u53d1\u9001 Register Transfer Structures 1.Multiplexer-Based Transfers\uff1a $K1:R0\\leftarrow R1,K2\\overline{K1}:R0\\leftarrow R2 $,\u4e5f\u5c31\u662f$K1+K2$\u4e3a\u771f\u65f6R0\u4f1a\u88ab\u66f4\u65b0 \u5176\u4e2d MUX \u7684 k \u223c( n \u22121) \u5b9e\u73b0\u4e86 \u8f6c\u79fb \u64cd\u4f5c\u3002 2. Multiplexer Bus \u901a\u8fc7\u603b\u7ebfbus\u5b9e\u73b0n\u90091\u591a\u8def\u590d\u7528\u5668\u5b8c\u6210\u5bc4\u5b58\u5668\u4e4b\u95f4\u503c\u7684\u4ea4\u6362 3. Three-State Bus The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers. Cost is further reduced, but transfers are limited. \u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u88ab\u4f7f\u80fd\u65f6\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u4e0d\u5904\u4e8e\u9ad8\u963b\u6001\u3002\u7535\u8def\u4e2d\u6240\u6709\u90fd\u662f\u8be5\u503c\u3002 \u51cf\u5c11\u63a5\u7ebf\uff0c\u964d\u4f4e\u5e03\u7ebf\u96be\u5ea6\u3002 \u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09 Shift Registers \u4f7f\u7528\u89e6\u53d1\u5668\u800c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\uff08\u9664\u6781\u5c11\u7279\u4f8b\uff09 \u53f3\u79fb \u53f3\u79fb+\u5e76\u884c\u8f93\u5165 Parallel Load Shift Registers Shift\u4e3a1\uff0c\u79fb\u4f4d Shift\u4e3a0\uff0cLoad0\uff0c\u4fdd\u6301 Shift\u4e3a0\uff0cLoad1\uff0c\u5e76\u884c\u52a0\u8f7d \u53cc\u5411\u4f4d\u79fb\u5bc4\u5b58\u5668 \u5bf9$S_1S_0$,00\u4fdd\u6301\uff0c01\u5de6\u79fb\uff0c10\u53f3\u79fb\uff0c11\u5e76\u884c\u8f93\u5165 \u5176\u672c\u8d28\u4e0a\u5c31\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MUX \u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u65f6\u949f\u662f\u7ee7\u627f $(i+1)\u3001(i-1)\u3001D_i$\u8fd8\u662f$Q$ Counters Ripple Counter B\u9891\u7387\u662fA\u4e00\u534a\u3002A\u8f93\u51fa\u53d6\u53cd\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u3002 \u53ef\u4ee5\u7528\u505a\u65f6\u949f\u5206\u9891\u3002 \u4e0a\u56fe\u4e2d\uff0c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 1 \u5230 0 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u6b63\u5411\u8ba1\u65f6(Upward Counting)\uff1b \u53cd\u4e4b\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 0 \u5230 1 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u9006\u5411\u8f93\u51fa(Downward Counting)\uff1b \u7f3a\u70b9\uff1a\u6bcf\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u4f20\u9012\u90fd\u6709\u5ef6\u65f6\uff0c\u540c\u65f6\u4e0d\u80fd\u4f5c\u4e3a\u540c\u6b65\u8ba1\u6570\u5668\u3002\u7b80\u5355\u4f46\u4e0d\u5b89\u5168\u3002 \u7406\u8bba\u4e0a\uff0c111\u4e4b\u540e\u5e94\u8be5\u53d8\u6210000\uff0c\u4f46\u5b9e\u9645\u4e0a\uff1a$111->110->100->000$ \u6b64\u5916\u5bf9\u4e8en bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f $n\\cdot t_{PHL}$ \u901f\u5ea6\u4f1a\u975e\u5e38\u6162. \u4f7f\u7528\uff1a\u8d8a\u9ad8\u7ea7\u7684\u89e6\u53d1\u5668\u8d8a\u4e0d\u5bb9\u6613\u88ab\u89e6\u53d1\uff0c\u529f\u8017\u4f4e\uff0c\u53ef\u7528\u4e8e\u8109\u51b2\u8ba1\u6570\u7b49\u573a\u666f\u3002 Synchronous Counters \u6bcf\u6b21\u901a\u8fc7\u81ea\u589e\u5668+1 \u89c2\u5bdf\u53d1\u73b0\uff0c\u4f4d\u6570\u589e\u52a0\u65f6\u4e0d\u5229\u4e8e\u5316\u7b80\uff0c\u4f46$Q_n$\u53d6\u53cd\u5f53\u4e14\u4ec5\u5f530~n-1\u5747\u4e3a1\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e0e\u95e8\u94fe\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7 \u4f7f\u80fd\u4e3a0\u76f8\u5f53\u4e8e\u4fdd\u6301\u3002 CO\u8f93\u51fa\u8fdb\u4f4d\u7528\u4e8e\u4e0b\u4e00\u90e8\u5206\u7535\u8def \u95ee\u9898\uff1a\u540c\u6837\u5b58\u5728\u5ef6\u8fdf\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1alook ahead \u7528\u4e00\u4e2a\u4e0e\u95e8\u628a\u6240\u6709\u4f4e\u4f4d\u63a5\u8d77\u6765 symbol\uff1a Other Counters Down Counter Up-Down Counter Parallel Load Counter Divide-by-n(Module n) Counter\uff1a\u5341\u8fdb\u5236\u6a219\uff0c\u65f6\u949f\u6a215 Counter with Parallel Load \u5b9e\u73b0\u5e76\u884c\u8f93\u5165 Design Example: Synchronous BCD \u72b6\u6001\u8868\uff1a \u5361\u8bfa\u56fe\u5316\u7b80 \u9a8c\u8bc1\u65e0\u7528\u72b6\u6001\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u4f1a\u6b7b\u9501 Counting Modulo N \u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u57fa\u7840\u4e0a\uff0c\u91c7\u53d6\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6 \u5f02\u6b65\uff0c\u901a\u8fc7clear\uff08\u5f02\u6b65\u590d\u4f4d\u811a\uff09\uff0c\u8ba1\u6570\u8fbe\u5230N\u5b9e\u65f6\u6e05\u96f6\u5373\u53ef \u540c\u6b65\uff0cN-1\u65f6reset\u4e3a1\uff0c\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u6e05\u96f6 better choice \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7. Serial Operations \u4e32\u884c\uff1a\u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8 \u5f53\u4eca\u9ad8\u901f\u4f20\u8f93\u5982USB\uff0c\u4ee5\u592a\u7f51\u7ebf\u7b49\u90fd\u4f7f\u7528\u4e32\u884c \u4e32\u884c\u52a0\u6cd5\u5668\uff1a\u4ec5\u4f7f\u7528\u4e00\u4f4d\u5168\u52a0\u5668\u4e0e\u4e00\u4e2a\u7528\u4e8e\u8fdb\u4f4d\u7684\u89e6\u53d1\u5668\u3002The result is stored in the A register and the final carry in the flip-flop Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Shifting a binary number left is equivalent to multiplying by 2.Shifting a binary number right is equivalent to dividing by 2.","title":"Registers & Register Transfers"},{"location":"CLDF/Chapter6/#registers-register-transfers","text":"","title":"Registers &amp; Register Transfers"},{"location":"CLDF/Chapter6/#register","text":"","title":"Register"},{"location":"CLDF/Chapter6/#_1","text":"\u6dfb\u52a0Load\uff0cLoad\u4e3a0\u65f6\u65e0\u8bbaclock\u4e3a\u4f55\u503c\uff0c\u8f93\u51fa\u4e0d\u53d8\uff0cLoad\u4e3a1\u65f6\uff0c\u8f93\u51fa\u968fclock\u53d8\u5316 \u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u52a0\u6216\u95e8 \u7136\u800c\uff0c\u5728\u95e8\u63a7\u65f6\u949f\u6280\u672f\u4e2d\uff0c\u7531\u4e8e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u903b\u8f91\u95e8\uff0c\u65f6\u949f\u8109\u51b2\u5230\u8fbe Control \u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u989d\u5916\u7684\u4f20\u64ad\u5ef6\u65f6\uff0c\u5373\u65f6\u949f\u504f\u79fb(clock skew)\u3002\u800c\u8fd9\u5fae\u5c0f\u7684\u5ef6\u65f6\u4f1a\u5bfc\u81f4\u5728\u6574\u4e2a\u540c\u6b65\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7ec4\u4ef6\u5f97\u5230\u7684\u65f6\u949f\u8109\u51b2\u6709\u504f\u5dee\uff0c\u800c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u6240\u4ee5\u5728\u5b9e\u9645\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5e94\u5f53\u907f\u514d\u6216\u5c3d\u53ef\u80fd\u7f29\u5c0f\u65f6\u949f\u504f\u79fb\u3002 \u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u4e0d\u5e0c\u671b\u5b83\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c06\u5b83\u7684\u8f93\u5165\u8f7d\u5165\uff0c\u4e5f\u5c31\u662f\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e8c\u9009\u4e00\u591a\u8def\u590d\u7528\u5668\u5b9e\u73b0\u3002","title":"\u4fdd\u6301\u4fe1\u53f7\u5728\u591a\u4e2a\u65f6\u949f\u5468\u671f\u4e0d\u53d8"},{"location":"CLDF/Chapter6/#register-cell-design","text":"Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate","title":"Register Cell Design"},{"location":"CLDF/Chapter6/#specifications","text":"A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state)","title":"Specifications"},{"location":"CLDF/Chapter6/#register-transfer-operations","text":"The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations \u76d1\u7763\u64cd\u4f5c\u5e8f\u5217\u7684\u63a7\u5236 Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations \u5176\u4e2d\uff0c\u6700\u57fa\u7840\u7684\u90a3\u90e8\u5206\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5fae\u64cd\u4f5c(microoperation)\uff0c\u5b83\u4eec\u662f\u5b9e\u73b0\u590d\u6742\u64cd\u4f5c\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u5c06 R1 \u7684\u6570\u636e\u8f7d\u5165 R2\uff0c\u5c06 R1 \u548c R2 \u76f8\u52a0\uff0c\u6216\u662f\u81ea\u589e R1 \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u6bd4\u7279\u5411\u91cf\u4e3a\u8f7d\u4f53\u5e76\u884c\u5b9e\u73b0\u7684\u3002","title":"Register Transfer Operations"},{"location":"CLDF/Chapter6/#register-notation","text":"RTL: \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00(Register Transfer Language) $sl,sr$\u4f8b\u5b50\uff1a R2<-sl R1 \uff0cR1\u5de6\u79fb\u4e00\u4f4d\u4f20\u7ed9R2 example:\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d R1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002K1\u63a7\u5236\u7684\u662fR2\u662f\u5426\u63a5\u6536R1\u7684\u4fe1\u53f7\uff0c\u800c\u975eR1\u662f\u5426\u53d1\u9001","title":"Register Notation"},{"location":"CLDF/Chapter6/#register-transfer-structures","text":"","title":"Register Transfer Structures"},{"location":"CLDF/Chapter6/#1multiplexer-based-transfers","text":"$K1:R0\\leftarrow R1,K2\\overline{K1}:R0\\leftarrow R2 $,\u4e5f\u5c31\u662f$K1+K2$\u4e3a\u771f\u65f6R0\u4f1a\u88ab\u66f4\u65b0 \u5176\u4e2d MUX \u7684 k \u223c( n \u22121) \u5b9e\u73b0\u4e86 \u8f6c\u79fb \u64cd\u4f5c\u3002","title":"1.Multiplexer-Based Transfers\uff1a"},{"location":"CLDF/Chapter6/#2-multiplexer-bus","text":"\u901a\u8fc7\u603b\u7ebfbus\u5b9e\u73b0n\u90091\u591a\u8def\u590d\u7528\u5668\u5b8c\u6210\u5bc4\u5b58\u5668\u4e4b\u95f4\u503c\u7684\u4ea4\u6362","title":"2. Multiplexer Bus"},{"location":"CLDF/Chapter6/#3-three-state-bus","text":"The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers. Cost is further reduced, but transfers are limited. \u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u88ab\u4f7f\u80fd\u65f6\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u4e0d\u5904\u4e8e\u9ad8\u963b\u6001\u3002\u7535\u8def\u4e2d\u6240\u6709\u90fd\u662f\u8be5\u503c\u3002 \u51cf\u5c11\u63a5\u7ebf\uff0c\u964d\u4f4e\u5e03\u7ebf\u96be\u5ea6\u3002 \u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09","title":"3. Three-State Bus"},{"location":"CLDF/Chapter6/#shift-registers","text":"\u4f7f\u7528\u89e6\u53d1\u5668\u800c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\uff08\u9664\u6781\u5c11\u7279\u4f8b\uff09 \u53f3\u79fb \u53f3\u79fb+\u5e76\u884c\u8f93\u5165 Parallel Load Shift Registers Shift\u4e3a1\uff0c\u79fb\u4f4d Shift\u4e3a0\uff0cLoad0\uff0c\u4fdd\u6301 Shift\u4e3a0\uff0cLoad1\uff0c\u5e76\u884c\u52a0\u8f7d","title":"Shift Registers"},{"location":"CLDF/Chapter6/#_2","text":"\u5bf9$S_1S_0$,00\u4fdd\u6301\uff0c01\u5de6\u79fb\uff0c10\u53f3\u79fb\uff0c11\u5e76\u884c\u8f93\u5165 \u5176\u672c\u8d28\u4e0a\u5c31\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MUX \u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u65f6\u949f\u662f\u7ee7\u627f $(i+1)\u3001(i-1)\u3001D_i$\u8fd8\u662f$Q$","title":"\u53cc\u5411\u4f4d\u79fb\u5bc4\u5b58\u5668"},{"location":"CLDF/Chapter6/#counters","text":"","title":"Counters"},{"location":"CLDF/Chapter6/#ripple-counter","text":"B\u9891\u7387\u662fA\u4e00\u534a\u3002A\u8f93\u51fa\u53d6\u53cd\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u3002 \u53ef\u4ee5\u7528\u505a\u65f6\u949f\u5206\u9891\u3002 \u4e0a\u56fe\u4e2d\uff0c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 1 \u5230 0 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u6b63\u5411\u8ba1\u65f6(Upward Counting)\uff1b \u53cd\u4e4b\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 0 \u5230 1 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u9006\u5411\u8f93\u51fa(Downward Counting)\uff1b \u7f3a\u70b9\uff1a\u6bcf\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u4f20\u9012\u90fd\u6709\u5ef6\u65f6\uff0c\u540c\u65f6\u4e0d\u80fd\u4f5c\u4e3a\u540c\u6b65\u8ba1\u6570\u5668\u3002\u7b80\u5355\u4f46\u4e0d\u5b89\u5168\u3002 \u7406\u8bba\u4e0a\uff0c111\u4e4b\u540e\u5e94\u8be5\u53d8\u6210000\uff0c\u4f46\u5b9e\u9645\u4e0a\uff1a$111->110->100->000$ \u6b64\u5916\u5bf9\u4e8en bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f $n\\cdot t_{PHL}$ \u901f\u5ea6\u4f1a\u975e\u5e38\u6162. \u4f7f\u7528\uff1a\u8d8a\u9ad8\u7ea7\u7684\u89e6\u53d1\u5668\u8d8a\u4e0d\u5bb9\u6613\u88ab\u89e6\u53d1\uff0c\u529f\u8017\u4f4e\uff0c\u53ef\u7528\u4e8e\u8109\u51b2\u8ba1\u6570\u7b49\u573a\u666f\u3002","title":"Ripple Counter"},{"location":"CLDF/Chapter6/#synchronous-counters","text":"\u6bcf\u6b21\u901a\u8fc7\u81ea\u589e\u5668+1 \u89c2\u5bdf\u53d1\u73b0\uff0c\u4f4d\u6570\u589e\u52a0\u65f6\u4e0d\u5229\u4e8e\u5316\u7b80\uff0c\u4f46$Q_n$\u53d6\u53cd\u5f53\u4e14\u4ec5\u5f530~n-1\u5747\u4e3a1\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e0e\u95e8\u94fe\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7 \u4f7f\u80fd\u4e3a0\u76f8\u5f53\u4e8e\u4fdd\u6301\u3002 CO\u8f93\u51fa\u8fdb\u4f4d\u7528\u4e8e\u4e0b\u4e00\u90e8\u5206\u7535\u8def \u95ee\u9898\uff1a\u540c\u6837\u5b58\u5728\u5ef6\u8fdf\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1alook ahead \u7528\u4e00\u4e2a\u4e0e\u95e8\u628a\u6240\u6709\u4f4e\u4f4d\u63a5\u8d77\u6765 symbol\uff1a","title":"Synchronous Counters"},{"location":"CLDF/Chapter6/#other-counters","text":"Down Counter Up-Down Counter Parallel Load Counter Divide-by-n(Module n) Counter\uff1a\u5341\u8fdb\u5236\u6a219\uff0c\u65f6\u949f\u6a215","title":"Other Counters"},{"location":"CLDF/Chapter6/#counter-with-parallel-load","text":"\u5b9e\u73b0\u5e76\u884c\u8f93\u5165","title":"Counter with Parallel Load"},{"location":"CLDF/Chapter6/#design-example-synchronous-bcd","text":"\u72b6\u6001\u8868\uff1a \u5361\u8bfa\u56fe\u5316\u7b80 \u9a8c\u8bc1\u65e0\u7528\u72b6\u6001\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u4f1a\u6b7b\u9501","title":"Design Example: Synchronous BCD"},{"location":"CLDF/Chapter6/#counting-modulo-n","text":"\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u57fa\u7840\u4e0a\uff0c\u91c7\u53d6\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6 \u5f02\u6b65\uff0c\u901a\u8fc7clear\uff08\u5f02\u6b65\u590d\u4f4d\u811a\uff09\uff0c\u8ba1\u6570\u8fbe\u5230N\u5b9e\u65f6\u6e05\u96f6\u5373\u53ef \u540c\u6b65\uff0cN-1\u65f6reset\u4e3a1\uff0c\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u6e05\u96f6 better choice \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7.","title":"Counting Modulo N"},{"location":"CLDF/Chapter6/#serial-operations","text":"\u4e32\u884c\uff1a\u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8 \u5f53\u4eca\u9ad8\u901f\u4f20\u8f93\u5982USB\uff0c\u4ee5\u592a\u7f51\u7ebf\u7b49\u90fd\u4f7f\u7528\u4e32\u884c \u4e32\u884c\u52a0\u6cd5\u5668\uff1a\u4ec5\u4f7f\u7528\u4e00\u4f4d\u5168\u52a0\u5668\u4e0e\u4e00\u4e2a\u7528\u4e8e\u8fdb\u4f4d\u7684\u89e6\u53d1\u5668\u3002The result is stored in the A register and the final carry in the flip-flop Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Shifting a binary number left is equivalent to multiplying by 2.Shifting a binary number right is equivalent to dividing by 2.","title":"Serial Operations"},{"location":"CLDF/slide/Chapter1-3/","text":"Chapter 1 Logic and Digital System Discrete information processing systems Types of Digital Systems No state present:combinational logic system, output=Function(input) State present: state updated at discrete times -> synchronous sequential system state updated at any time -> asynchronous\uff08\u5f02\u6b65\uff09 sequential systeam state = Function(state,input) output = Function(state) or Function(state,input) e.g \uff1adigital computer: synchronous,\u7ec4\u9891 beyond \uff1aembedded systems\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff09\uff1aanalog signal\uff0cneed A-to-D(digital) and D-to-A analog signal- continuous voltage- sample\uff08\u91c7\u6837\uff09- digital voltage - DAC - discrete voltage - signal conditioning - continuous voltage Information representation analog: continuous in value and time digital: asynchronous: discrete in value,continuous in time; synchronous:discrete in value and time \u4e8c\u8fdb\u5236\u6297\u5e72\u6270\u80fd\u529b\u5f3a dynamic RAM: capacitor charge (\u7535\u5bb9) K(2^10)-M-G-T \u6bcf\u4e2a\u76f8\u5dee2^10 non-numeric binary codes: e.g.\uff1acolor 'one hot' code : you can represent 4 elements in radix r=2 with n=4 digits: 0001,0010,0100,1000 ,each digit represents specific element \u4ee5\u4e0b\u4e24\u79cd\u8868\u793a0-9\u65f6\u5bf9\u79f0\u6570\u5b57\u4e92\u4e3a\u53cd\u7801 Excess3 Code:\u4f593\u7801 8\uff0c4\uff0c-2\uff0c-1 Code\uff1a\u540e\u4e24\u4f4d\u5206\u522b\u4ee3\u8868-2\uff0c-1 Binary Coded Decimal\uff08BCD\uff09\uff1ause 8\uff0c4\uff0c2\uff0c1 code\uff0cbut only represent 0-9 example: 13 -> 0001 | 0011 application: good for direct interaction to people,like elevator,air conditioner to correct the digit,subtract 10 by adding 6 modulo 16 eg :13-> 1101 +6 -> 10011 -> 0001 | 0011 ASCII: 0 30,A 41,a 61 (in 16\u8fdb\u5236) PARITY BIT Error-Detection Codes (\u5947\u5076\u68c0\u9519\u7801)\uff1a\u6dfb\u52a0\u4e00\u4f4d\uff08n+1\uff09\uff1aodd/even parity\uff1a\u4f7fn+1\u4f4d\u52a0\u8d77\u6765\u4e00\u5171\u6709\u5947/\u5076\u4e2a1 Gray Code\uff1a\u76f8\u90bb\u72b6\u6001\u53ea\u6709\u4e00\u4f4d\u7801\u4e0d\u4e00\u6837\uff0c\u6e10\u53d8\u8fc7\u7a0b\u65f6\u4e0d\u4f1a\u51fa\u73b0\u7a81\u7136\u53d8\u5316 Application: Optical Shaft Encoder\uff0cdark represents 0\uff0cwhite represents 1 \u5982\u679c\u4f20\u611f\u5668\u4f4d\u7f6e\u51fa\u73b0\u504f\u79fb\uff0c\u4e0d\u5728\u540c\u4e00\u76f4\u7ebf\uff0c\u7528Gray Code \u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef Chapter 2 Combinational Logic Circuits \u4e0a\u4fa7 \u4e3aPMOS\u7ba1\uff0c\u5e38\u95ed\u5f00\u5173\uff1b\u4e0b\u4fa7 \u4e3aNMOS\u7ba1\uff0c\u5e38\u5f00\u5f00\u5173 Gate Delay: When input changes,the output change doesn't occur instantaneously. the delay between an input changes and the resulting output change is the gate delay denoted by $$ t_G $$ s Logic Diagrams and Expressions: Truth Table,Equation(\u903b\u8f91\u51fd\u6570),Diagram,\u6ce2\u5f62\u56fe Boolean Algebra: $$ X(Y+Z)=XY+XZ $$ $X+YZ=(X+Y)(X+Z)$ Prf: $$ A=A\\cdot A=A\\cdot (A+C) \\ A+BC=A(A+B+C)+BC=(A+B)(A+C) $$ $\\overline{X\u00b7Y}=\\overline{X}+\\overline{Y}$ Absorption Theorem: $A+A\u00b7B=A,A+\\overline{A}B=A+B$ Consensus Law: $(A+B)(\\overline{A}+C)(B+C)=(A+B)(\\overline{A}+C)$ $AB+\\overline{A}C+BC=AB+\\overline{A}C$ Hint\uff1a $BC=BC(A+\\overline{A})$ $\\overline{X}Z+X=(X+\\overline{X})(Z+X)=Z+X$ Hint: $X+YZ=(X+Y)(X+Z)$ Precedence: Parentheses NOT AND OR Examples: $$ F=\\overline{\\overline{AC+\\overline{A}BC}+\\overline{B}C+AB\\overline{C}} \\ =(AC+\\overline{A}BC)\\overline{\\overline{B}C}\\cdot \\overline{AB\\overline{C}}\\ =C(A+\\overline{A}B)(B+\\overline{C})(\\overline{A}+\\overline{B}+C) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC+\\overline{A}\\cdot\\overline{C}+\\overline{B}\\cdot\\overline{C}) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC) \\ =ABC+\\overline{A}BC=BC $$ Canonical Forms minterm & maxterms:maxterm is complemented(\u53d6\u53cd) with minterm; $\\overline{m}_i=M_i,\\overline{M}_i=m_i$ $F=\\sum{m_i}=\\overline{\\prod{M_i}},i=0,1,2,3,\\dots,2^n-1$ usage:turn logic function into numbers by minterm Standard Forms SOP: an OR of AND terms,POS: an AND of OR terms Gate Input Cost the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. G - inverters not counted GN - inverters counted For SOP and POS equations, it can be found from the equation(s) by finding the sum of: all literal appearances\uff08Literal cost,L:\u516c\u5f0f\u4e2d\u4e00\u5171\u51fa\u73b0\u7684\u53d8\u91cf\u4e2a\u6570\uff0c\u53ef\u91cd\u590d\uff09 the number of terms excluding single literal terms,(G) and optionally, the number of distinct complemented single literals (GN) \u8ba1\u7b97\u975e\u95e8. Karnaugh Maps \u76f8\u90bb\u7684\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0cGray\u7801\u987a\u5e8f \u4e09\u53d8\u91cf\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5708\uff0c\u5373\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u76f8\u90bb \u6d88\u9664\uff1aKarnaugh\u56fe\u4e2d\u6709\u4e24\u4e2a\u76f8\u90bb\u5c0f\u683c\u5b50\u5219\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u53d8\u91cf \u56db\u53d8\u91cf\uff1a Buffer A buffer is a gate with the function F=X : the same as a connection used to improve circuit voltage levels and increase the speed of circuit operation NAND Gates This NAND symbol is called Invert-OR, since inputs are inverted and then ORed together. AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier. Exclusive OR/ Exclusive NOR The XOR function is: $X\u2295Y=X\\overline{Y}+\\overline{X}Y$ The eXclusive NOR (XNOR) function, otherwise known as equivalence is: $\\overline{X\u2295Y}=XY+\\overline{XY} $ $X\u2295\\overline{Y}= \\overline{X\u2295Y}$ $X\u2295Y\u2295Z=X\u2295(Y\u2295Z)$ Odd and Even Functions The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. \u5947\u51fd\u6570\u53d6\u975e\u5373\u4e3a\u5076\u51fd\u6570 Parity Generators and Checkers \u5076\u6821\u9a8c\u7801\u751f\u6210\u5668\u4e0e\u68c0\u9a8c\u5668 The 3-State Buffer For the symbol and truth table, IN is the data input, and EN, the control input. For EN = 0, regardless of the value on IN (denoted by X), the output value is Hi-Z. For EN = 1, the output value follows the input value. 3-State Logic Circuit Data Selection Function: If s = 0, OL = IN0, else OL = IN1 Performing data selection with 3-state buffers: Since EN0 = S and EN1 = S, one of the two buffer outputs is always Hi-Z plus the last row of the table never occurs. Chapter 3 Combinational Logic Design Part 1 Implementation Technology and Logic Design \u5de5\u827a\u6620\u5c04 NAND Mapping Algorithm Replace ANDs and ORs: Repeat the following pair of actions until there is at most one inverter between : A circuit input or driving NAND gate output, and- The attached NAND gate inputs. NOR Mapping Algorithm \u200b Similar to the NAND,first Replace ANDs and ORs Part 2 Combinational Logic Decoding Decoding - the conversion of an n-bit input code to an m-bit output code with$n\\leqslant m\\leqslant2n$ such that each valid code word produces a unique output code Circuits that perform decoding are called decoders Here, functional blocks for decoding are called n-to-m line decoders, where $m\\leqslant2n$, and generate 2n (or fewer) minterms for the n input variables Decoder with Enable \u7531\u4e8e2-4\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u53ea\u6709\u8be5\u95e8\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06$A_1,A_0$\u7ec4\u6210\u7684\u8bd1\u7801\u5668\u5f53\u6210EN\uff0cEN\u5f53\u6210\u8f93\u5165\u4fe1\u53f7 BCD-to-Segment Decoder \u5171\u9633\u6781\u4e0e\u5171\u9634\u6781\u63a5\u6cd5\uff1a Encoding Encoding - the opposite of decoding - the conversion of an m-bit input code to a $n$-bit output code with $n < m< 2^n$ such that each valid code word produces a unique output code An encoder has $2^n$ (or fewer) input lines and $n$ output lines which generate the binary code corresponding to the input values \u4f20\u7edf\u7f16\u7801\u5668\u95ee\u9898\uff1a\u5982\u4ee5\u4e0b\u8f93\u51fa\u65b9\u7a0b\u5f0f\u5bf9\u5e94\u7f16\u7801\u5668\uff0c\u82e5$D_6,D_7$\u540c\u65f6\u4e3a1\uff0c\u4e0d\u80fd\u5224\u65ad\u662f$A_2$\u8fd8\u662f$A_1$\uff0c\u5373\u6709\u4e0d\u786e\u5b9a\u6027 \u4f18\u5148\u7f16\u7801\u5668\uff08Priority Encoder\uff09 One encoder that can accept all possible combinations of input values and produce a meaningful result is a priority encoder. Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with the corresponding binary code for that position. example: Priority encoder with 5 inputs (D4, D3, D2, D1, D0) - highest priority to most significant 1 present - Code outputs A2, A1, A0 and V where V indicates at least one 1 present. Xs in input part of table represent 0 or 1; thus table entries correspond to product terms instead of minterms. The column on the left shows that all 32 minterms are present in the product terms in the table Xs \u5728\u8f93\u51fa\u5217\u8868\u793a\u65e0\u5173\u60c5\u51b5\u4e0d\u540c Selecting Selecting of data or information is a critical function in digital systems and computers Logic circuits that perform selecting are called multiplexers Selecting can also be done by three-state logic or transmission gates Multiplexer A multiplexer selects information from an input line and directs the information to an output line typical multiplexer has n control inputs ($S_{n-1}, \u2026 S_0$) called selection inputs, $2^n$ information inputs ($I_{2^n - 1}, \u2026 I_0$), and one output $Y$ A multiplexer can be designed to have m information inputs with $m < 2^n$ as well as n selection inputs 2-to-1-Line Multiplexer The single selection variable S has two values: S = 0 selects input $I_0$ S = 1 selects input $I_1$ The equation:$Y =\\overline{S}I_0 + SI_1$ The circuit: Multiplexer Width Expansion(\u9009\u62e9\u591a\u4f4d) example:4-to-1-line quad multiplexer Other Selection Implementations Three-state logic in place of AND-OR\u3002 Gate input cost = 18 Distributing the decoding across the three-state drivers\uff08\u5206\u5c42\u9009\u62e9\uff09 Gate input cost = 14 Combinational Logic Implementation- Multiplexer Approach 1 \u67e5\u627e\u8868 Combinational Logic Implementation - Multiplexer Approach 2 Part 3 Arithmetic functions Function Block Half-Adder \u4e24\u8f93\u5165\u4e24\u8f93\u51fa $S$\u4e3a$X\\oplus Y,$$C$\u4e3a$XY$ \u5e38\u89c1\u4e24\u79cd\u7535\u8def\u5b9e\u73b0 Full-Adder \u5168\u52a0\u5668\u5373\u8003\u8651\u4e0a\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u5373$Z$or$C_i$ S=$\\overline{C_i}(A\\oplus B)+C_i(\\overline{A\\oplus B})$ The term $X\\cdot Y$ is carry generate,$X\\oplus Y$ is carry propagate Ripple-Carry Binary Adder:\u9700\u8981\u5ef6\u65f6 \u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 Group Carry Lookahead Logic Unsigned Subtraction Complements \u8865\u7801 Diminished Radix Complement of N: defined as $(r^n-1)-N$ ,known as \u53cd\u7801 $1's$ complement Radix Complement: defined as $r^n-N$ $2's$ complement \u8865\u7801\uff1a\u5bf9n\u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u76f8\u5f53\u4e8e\u7b2c\u4e00\u4f4d$a_{n-1}$\u4ee3\u8868$-2^{n-1}$,\u540e\u7eed\u6bcf\u4f4d\u90fd\u4ee3\u8868$2^k$ \u5373M-N\u65f6\uff0c\u51cf\u6570N\u5148\u6c42\u8865\u7801$2^n-N$\uff0c\u7136\u540e$M+(2^n-N)$,\u82e5\u4ea7\u751f\u8fdb\u4f4d1\uff0c\u8bf4\u660e\u591f\u51cf\uff0c\u5bf9\u5e94\u503c\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u8fdb\u4f4d\u4e3a0\uff0c\u8bf4\u660e\u4e0d\u591f\u51cf\uff0c\u5219\u5bf9\u7ed3\u679c\u53d6\u8865\u7801\u5e76\u52a0\u8d1f\u53f7 \u6709\u7b26\u53f7\u51cf\u6cd5 \u8bbe\u52a0\u6cd5\u4e3a0\uff0c\u51cf\u6cd5\u4e3a1\uff0c\u6b63\u6570\u7b2c\u4e00\u4f4d0\uff0c\u8d1f\u6570\u7b2c\u4e00\u4f4d1\uff0c\u90a3\u4e48\u5bf9\u51cf\u6570\u7b2c\u4e00\u4f4d\uff0c\u7b26\u53f7\uff0c\u88ab\u51cf\u6570\u7b2c\u4e00\u4f4d\u6784\u6210\u7684\u5e8f\u5217\uff0c\u82e5\u6709\u5076\u6570\u4e2a0\uff0c\u5728\u6ca1\u6709\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u53f7\u76f8\u52a0 \u82e5\u88ab\u52a0\u6570\u4e0e\u88ab\u51cf\u6570\u4e3a\u8d1f\uff0c\u5219\u53d6\u5bf9\u5e94\u8865\u7801\uff08\u4e0d\u6539\u53d8\u7b26\u53f7\u4f4d\uff09\uff0c\u4e4b\u540e\u82e5\u662f\u52a0\u6cd5\u5219\u6b63\u5e38\u8fdb\u884c\uff0c\u51cf\u6cd5\u5219\u7c7b\u4f3c\u5730\u5bf9\u51cf\u6570\u53d6\u8865 \u6ea2\u51fa \u540c\u53f7\u76f8\u52a0\u3001\u5f02\u53f7\u76f8\u51cf\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa \u5224\u65ad\u6ea2\u51fa\uff1a$V=C_n\\oplus C_{n-1}$,\u5373$C_n$\u4e0e$C_{n-1}$\u7b26\u53f7\u4e00\u81f4\u5219\u4e0d\u6ea2\u51fa\uff0c\u5426\u5219\u6ea2\u51fa \u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f0\uff0c\u6ea2\u51fa\u53ea\u53ef\u80fd\u662f$C_{n-1}$\u4e3a1 \u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f1\uff0c\u82e5\u4e0d\u6ea2\u51fa$C_{n-1}$\u9700\u8981\u4e3a1 \u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a\u4e24\u4e2a\u9996\u4f4d\u90fd\u662f1 \u6709\u7b26\u53f7\u6570\uff1a\u540c\u53f7\u65f6\u6709\u53ef\u80fd\u6ea2\u51fa \u5e38\u6570\u9664\u6cd5\u3001\u4e58\u6cd5 \u5bf9\u4e8e2\u7684\u5e42\u6b21\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u7ed3\u679c\uff0c\u5bf9\u4e8e\u975e2\u5e42\u6b21\u53ef\u4ee5\u5e38\u6570\u52a0\u6cd5\u548c2\u7684\u5e42\u6b21\u4e58\u9664\u76f8\u7ed3\u5408\u5f97\u5230\u7ed3\u679c\u3002 \u5982$3x=2^1x+2^0x$,\u5373$x[31:0]={x[30:0],1'b0}+x[31:0]$.","title":"Chapter 1 Logic and Digital System"},{"location":"CLDF/slide/Chapter1-3/#chapter-1-logic-and-digital-system","text":"Discrete information processing systems","title":"Chapter 1 Logic and Digital System"},{"location":"CLDF/slide/Chapter1-3/#types-of-digital-systems","text":"No state present:combinational logic system, output=Function(input) State present: state updated at discrete times -> synchronous sequential system state updated at any time -> asynchronous\uff08\u5f02\u6b65\uff09 sequential systeam state = Function(state,input) output = Function(state) or Function(state,input) e.g \uff1adigital computer: synchronous,\u7ec4\u9891 beyond \uff1aembedded systems\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff09\uff1aanalog signal\uff0cneed A-to-D(digital) and D-to-A analog signal- continuous voltage- sample\uff08\u91c7\u6837\uff09- digital voltage - DAC - discrete voltage - signal conditioning - continuous voltage","title":"Types of Digital Systems"},{"location":"CLDF/slide/Chapter1-3/#information-representation","text":"analog: continuous in value and time digital: asynchronous: discrete in value,continuous in time; synchronous:discrete in value and time \u4e8c\u8fdb\u5236\u6297\u5e72\u6270\u80fd\u529b\u5f3a dynamic RAM: capacitor charge (\u7535\u5bb9) K(2^10)-M-G-T \u6bcf\u4e2a\u76f8\u5dee2^10 non-numeric binary codes: e.g.\uff1acolor 'one hot' code : you can represent 4 elements in radix r=2 with n=4 digits: 0001,0010,0100,1000 ,each digit represents specific element \u4ee5\u4e0b\u4e24\u79cd\u8868\u793a0-9\u65f6\u5bf9\u79f0\u6570\u5b57\u4e92\u4e3a\u53cd\u7801 Excess3 Code:\u4f593\u7801 8\uff0c4\uff0c-2\uff0c-1 Code\uff1a\u540e\u4e24\u4f4d\u5206\u522b\u4ee3\u8868-2\uff0c-1 Binary Coded Decimal\uff08BCD\uff09\uff1ause 8\uff0c4\uff0c2\uff0c1 code\uff0cbut only represent 0-9 example: 13 -> 0001 | 0011 application: good for direct interaction to people,like elevator,air conditioner to correct the digit,subtract 10 by adding 6 modulo 16 eg :13-> 1101 +6 -> 10011 -> 0001 | 0011 ASCII: 0 30,A 41,a 61 (in 16\u8fdb\u5236) PARITY BIT Error-Detection Codes (\u5947\u5076\u68c0\u9519\u7801)\uff1a\u6dfb\u52a0\u4e00\u4f4d\uff08n+1\uff09\uff1aodd/even parity\uff1a\u4f7fn+1\u4f4d\u52a0\u8d77\u6765\u4e00\u5171\u6709\u5947/\u5076\u4e2a1 Gray Code\uff1a\u76f8\u90bb\u72b6\u6001\u53ea\u6709\u4e00\u4f4d\u7801\u4e0d\u4e00\u6837\uff0c\u6e10\u53d8\u8fc7\u7a0b\u65f6\u4e0d\u4f1a\u51fa\u73b0\u7a81\u7136\u53d8\u5316 Application: Optical Shaft Encoder\uff0cdark represents 0\uff0cwhite represents 1 \u5982\u679c\u4f20\u611f\u5668\u4f4d\u7f6e\u51fa\u73b0\u504f\u79fb\uff0c\u4e0d\u5728\u540c\u4e00\u76f4\u7ebf\uff0c\u7528Gray Code \u4e0d\u4f1a\u51fa\u73b0\u9519\u8bef","title":"Information representation"},{"location":"CLDF/slide/Chapter1-3/#chapter-2-combinational-logic-circuits","text":"\u4e0a\u4fa7 \u4e3aPMOS\u7ba1\uff0c\u5e38\u95ed\u5f00\u5173\uff1b\u4e0b\u4fa7 \u4e3aNMOS\u7ba1\uff0c\u5e38\u5f00\u5f00\u5173 Gate Delay: When input changes,the output change doesn't occur instantaneously. the delay between an input changes and the resulting output change is the gate delay denoted by $$ t_G $$ s Logic Diagrams and Expressions: Truth Table,Equation(\u903b\u8f91\u51fd\u6570),Diagram,\u6ce2\u5f62\u56fe Boolean Algebra: $$ X(Y+Z)=XY+XZ $$ $X+YZ=(X+Y)(X+Z)$ Prf: $$ A=A\\cdot A=A\\cdot (A+C) \\ A+BC=A(A+B+C)+BC=(A+B)(A+C) $$ $\\overline{X\u00b7Y}=\\overline{X}+\\overline{Y}$ Absorption Theorem: $A+A\u00b7B=A,A+\\overline{A}B=A+B$ Consensus Law: $(A+B)(\\overline{A}+C)(B+C)=(A+B)(\\overline{A}+C)$ $AB+\\overline{A}C+BC=AB+\\overline{A}C$ Hint\uff1a $BC=BC(A+\\overline{A})$ $\\overline{X}Z+X=(X+\\overline{X})(Z+X)=Z+X$ Hint: $X+YZ=(X+Y)(X+Z)$ Precedence: Parentheses NOT AND OR Examples: $$ F=\\overline{\\overline{AC+\\overline{A}BC}+\\overline{B}C+AB\\overline{C}} \\ =(AC+\\overline{A}BC)\\overline{\\overline{B}C}\\cdot \\overline{AB\\overline{C}}\\ =C(A+\\overline{A}B)(B+\\overline{C})(\\overline{A}+\\overline{B}+C) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC+\\overline{A}\\cdot\\overline{C}+\\overline{B}\\cdot\\overline{C}) \\ =C(A+\\overline{A}B)(\\overline{A}B+BC) \\ =ABC+\\overline{A}BC=BC $$","title":"Chapter 2 Combinational Logic Circuits"},{"location":"CLDF/slide/Chapter1-3/#canonical-forms","text":"minterm & maxterms:maxterm is complemented(\u53d6\u53cd) with minterm; $\\overline{m}_i=M_i,\\overline{M}_i=m_i$ $F=\\sum{m_i}=\\overline{\\prod{M_i}},i=0,1,2,3,\\dots,2^n-1$ usage:turn logic function into numbers by minterm","title":"Canonical Forms"},{"location":"CLDF/slide/Chapter1-3/#standard-forms","text":"SOP: an OR of AND terms,POS: an AND of OR terms","title":"Standard Forms"},{"location":"CLDF/slide/Chapter1-3/#gate-input-cost","text":"the number of inputs to the gates in the implementation corresponding exactly to the given equation or equations. G - inverters not counted GN - inverters counted For SOP and POS equations, it can be found from the equation(s) by finding the sum of: all literal appearances\uff08Literal cost,L:\u516c\u5f0f\u4e2d\u4e00\u5171\u51fa\u73b0\u7684\u53d8\u91cf\u4e2a\u6570\uff0c\u53ef\u91cd\u590d\uff09 the number of terms excluding single literal terms,(G) and optionally, the number of distinct complemented single literals (GN) \u8ba1\u7b97\u975e\u95e8.","title":"Gate Input Cost"},{"location":"CLDF/slide/Chapter1-3/#karnaugh-maps","text":"\u76f8\u90bb\u7684\u53ea\u6709\u4e00\u4f4d\u4e0d\u540c\uff0cGray\u7801\u987a\u5e8f \u4e09\u53d8\u91cf\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5708\uff0c\u5373\u6700\u5de6\u4fa7\u548c\u6700\u53f3\u4fa7\u76f8\u90bb \u6d88\u9664\uff1aKarnaugh\u56fe\u4e2d\u6709\u4e24\u4e2a\u76f8\u90bb\u5c0f\u683c\u5b50\u5219\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u53d8\u91cf \u56db\u53d8\u91cf\uff1a","title":"Karnaugh Maps"},{"location":"CLDF/slide/Chapter1-3/#buffer","text":"A buffer is a gate with the function F=X : the same as a connection used to improve circuit voltage levels and increase the speed of circuit operation","title":"Buffer"},{"location":"CLDF/slide/Chapter1-3/#nand-gates","text":"This NAND symbol is called Invert-OR, since inputs are inverted and then ORed together. AND-Invert and Invert-OR both represent the NAND gate. Having both makes visualization of circuit function easier.","title":"NAND Gates"},{"location":"CLDF/slide/Chapter1-3/#exclusive-or-exclusive-nor","text":"The XOR function is: $X\u2295Y=X\\overline{Y}+\\overline{X}Y$ The eXclusive NOR (XNOR) function, otherwise known as equivalence is: $\\overline{X\u2295Y}=XY+\\overline{XY} $ $X\u2295\\overline{Y}= \\overline{X\u2295Y}$ $X\u2295Y\u2295Z=X\u2295(Y\u2295Z)$","title":"Exclusive OR/ Exclusive NOR"},{"location":"CLDF/slide/Chapter1-3/#odd-and-even-functions","text":"The 1s of an odd function correspond to minterms having an index with an odd number of 1s. The 1s of an even function correspond to minterms having an index with an even number of 1s. \u5947\u51fd\u6570\u53d6\u975e\u5373\u4e3a\u5076\u51fd\u6570","title":"Odd and Even Functions"},{"location":"CLDF/slide/Chapter1-3/#parity-generators-and-checkers","text":"\u5076\u6821\u9a8c\u7801\u751f\u6210\u5668\u4e0e\u68c0\u9a8c\u5668","title":"Parity Generators and Checkers"},{"location":"CLDF/slide/Chapter1-3/#the-3-state-buffer","text":"For the symbol and truth table, IN is the data input, and EN, the control input. For EN = 0, regardless of the value on IN (denoted by X), the output value is Hi-Z. For EN = 1, the output value follows the input value.","title":"The 3-State Buffer"},{"location":"CLDF/slide/Chapter1-3/#3-state-logic-circuit","text":"Data Selection Function: If s = 0, OL = IN0, else OL = IN1 Performing data selection with 3-state buffers: Since EN0 = S and EN1 = S, one of the two buffer outputs is always Hi-Z plus the last row of the table never occurs.","title":"3-State Logic Circuit"},{"location":"CLDF/slide/Chapter1-3/#chapter-3-combinational-logic-design","text":"","title":"Chapter 3 Combinational Logic Design"},{"location":"CLDF/slide/Chapter1-3/#part-1-implementation-technology-and-logic-design","text":"","title":"Part 1 Implementation Technology and Logic Design"},{"location":"CLDF/slide/Chapter1-3/#_1","text":"","title":"\u5de5\u827a\u6620\u5c04"},{"location":"CLDF/slide/Chapter1-3/#nand-mapping-algorithm","text":"Replace ANDs and ORs: Repeat the following pair of actions until there is at most one inverter between : A circuit input or driving NAND gate output, and- The attached NAND gate inputs.","title":"NAND Mapping Algorithm"},{"location":"CLDF/slide/Chapter1-3/#nor-mapping-algorithm","text":"\u200b Similar to the NAND,first Replace ANDs and ORs","title":"NOR Mapping Algorithm"},{"location":"CLDF/slide/Chapter1-3/#part-2-combinational-logic","text":"","title":"Part 2 Combinational Logic"},{"location":"CLDF/slide/Chapter1-3/#decoding","text":"Decoding - the conversion of an n-bit input code to an m-bit output code with$n\\leqslant m\\leqslant2n$ such that each valid code word produces a unique output code Circuits that perform decoding are called decoders Here, functional blocks for decoding are called n-to-m line decoders, where $m\\leqslant2n$, and generate 2n (or fewer) minterms for the n input variables","title":"Decoding"},{"location":"CLDF/slide/Chapter1-3/#decoder-with-enable","text":"\u7531\u4e8e2-4\u8bd1\u7801\u5668\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u4e3a1\uff0c\u53ea\u6709\u8be5\u95e8\u53ef\u4ee5\u8f93\u51fa\u5185\u5bb9\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06$A_1,A_0$\u7ec4\u6210\u7684\u8bd1\u7801\u5668\u5f53\u6210EN\uff0cEN\u5f53\u6210\u8f93\u5165\u4fe1\u53f7","title":"Decoder with Enable"},{"location":"CLDF/slide/Chapter1-3/#bcd-to-segment-decoder","text":"\u5171\u9633\u6781\u4e0e\u5171\u9634\u6781\u63a5\u6cd5\uff1a","title":"BCD-to-Segment Decoder"},{"location":"CLDF/slide/Chapter1-3/#encoding","text":"Encoding - the opposite of decoding - the conversion of an m-bit input code to a $n$-bit output code with $n < m< 2^n$ such that each valid code word produces a unique output code An encoder has $2^n$ (or fewer) input lines and $n$ output lines which generate the binary code corresponding to the input values \u4f20\u7edf\u7f16\u7801\u5668\u95ee\u9898\uff1a\u5982\u4ee5\u4e0b\u8f93\u51fa\u65b9\u7a0b\u5f0f\u5bf9\u5e94\u7f16\u7801\u5668\uff0c\u82e5$D_6,D_7$\u540c\u65f6\u4e3a1\uff0c\u4e0d\u80fd\u5224\u65ad\u662f$A_2$\u8fd8\u662f$A_1$\uff0c\u5373\u6709\u4e0d\u786e\u5b9a\u6027 \u4f18\u5148\u7f16\u7801\u5668\uff08Priority Encoder\uff09 One encoder that can accept all possible combinations of input values and produce a meaningful result is a priority encoder. Among the 1s that appear, it selects the most significant input position (or the least significant input position) containing a 1 and responds with the corresponding binary code for that position. example: Priority encoder with 5 inputs (D4, D3, D2, D1, D0) - highest priority to most significant 1 present - Code outputs A2, A1, A0 and V where V indicates at least one 1 present. Xs in input part of table represent 0 or 1; thus table entries correspond to product terms instead of minterms. The column on the left shows that all 32 minterms are present in the product terms in the table Xs \u5728\u8f93\u51fa\u5217\u8868\u793a\u65e0\u5173\u60c5\u51b5\u4e0d\u540c","title":"Encoding"},{"location":"CLDF/slide/Chapter1-3/#selecting","text":"Selecting of data or information is a critical function in digital systems and computers Logic circuits that perform selecting are called multiplexers Selecting can also be done by three-state logic or transmission gates","title":"Selecting"},{"location":"CLDF/slide/Chapter1-3/#multiplexer","text":"A multiplexer selects information from an input line and directs the information to an output line typical multiplexer has n control inputs ($S_{n-1}, \u2026 S_0$) called selection inputs, $2^n$ information inputs ($I_{2^n - 1}, \u2026 I_0$), and one output $Y$ A multiplexer can be designed to have m information inputs with $m < 2^n$ as well as n selection inputs","title":"Multiplexer"},{"location":"CLDF/slide/Chapter1-3/#2-to-1-line-multiplexer","text":"The single selection variable S has two values: S = 0 selects input $I_0$ S = 1 selects input $I_1$ The equation:$Y =\\overline{S}I_0 + SI_1$ The circuit:","title":"2-to-1-Line Multiplexer"},{"location":"CLDF/slide/Chapter1-3/#multiplexer-width-expansion","text":"","title":"Multiplexer Width Expansion(\u9009\u62e9\u591a\u4f4d)"},{"location":"CLDF/slide/Chapter1-3/#example4-to-1-line-quad-multiplexer","text":"","title":"example:4-to-1-line quad multiplexer"},{"location":"CLDF/slide/Chapter1-3/#other-selection-implementations","text":"Three-state logic in place of AND-OR\u3002 Gate input cost = 18 Distributing the decoding across the three-state drivers\uff08\u5206\u5c42\u9009\u62e9\uff09 Gate input cost = 14","title":"Other Selection Implementations"},{"location":"CLDF/slide/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-1","text":"\u67e5\u627e\u8868","title":"Combinational Logic Implementation- Multiplexer Approach 1"},{"location":"CLDF/slide/Chapter1-3/#combinational-logic-implementation-multiplexer-approach-2","text":"","title":"Combinational Logic Implementation - Multiplexer Approach 2"},{"location":"CLDF/slide/Chapter1-3/#part-3-arithmetic-functions","text":"","title":"Part 3 Arithmetic functions"},{"location":"CLDF/slide/Chapter1-3/#function-block","text":"","title":"Function Block"},{"location":"CLDF/slide/Chapter1-3/#half-adder","text":"\u4e24\u8f93\u5165\u4e24\u8f93\u51fa $S$\u4e3a$X\\oplus Y,$$C$\u4e3a$XY$ \u5e38\u89c1\u4e24\u79cd\u7535\u8def\u5b9e\u73b0","title":"Half-Adder"},{"location":"CLDF/slide/Chapter1-3/#full-adder","text":"\u5168\u52a0\u5668\u5373\u8003\u8651\u4e0a\u4e00\u4f4d\u7684\u8fdb\u4f4d\uff0c\u5373$Z$or$C_i$ S=$\\overline{C_i}(A\\oplus B)+C_i(\\overline{A\\oplus B})$ The term $X\\cdot Y$ is carry generate,$X\\oplus Y$ is carry propagate Ripple-Carry Binary Adder:\u9700\u8981\u5ef6\u65f6 \u884c\u6ce2\u8fdb\u4f4d\u52a0\u6cd5\u5668 Group Carry Lookahead Logic","title":"Full-Adder"},{"location":"CLDF/slide/Chapter1-3/#unsigned-subtraction","text":"","title":"Unsigned Subtraction"},{"location":"CLDF/slide/Chapter1-3/#complements","text":"Diminished Radix Complement of N: defined as $(r^n-1)-N$ ,known as \u53cd\u7801 $1's$ complement Radix Complement: defined as $r^n-N$ $2's$ complement \u8865\u7801\uff1a\u5bf9n\u4f4d\u4e8c\u8fdb\u5236\u6570\uff0c\u76f8\u5f53\u4e8e\u7b2c\u4e00\u4f4d$a_{n-1}$\u4ee3\u8868$-2^{n-1}$,\u540e\u7eed\u6bcf\u4f4d\u90fd\u4ee3\u8868$2^k$ \u5373M-N\u65f6\uff0c\u51cf\u6570N\u5148\u6c42\u8865\u7801$2^n-N$\uff0c\u7136\u540e$M+(2^n-N)$,\u82e5\u4ea7\u751f\u8fdb\u4f4d1\uff0c\u8bf4\u660e\u591f\u51cf\uff0c\u5bf9\u5e94\u503c\u5373\u4e3a\u7b54\u6848\uff1b\u82e5\u8fdb\u4f4d\u4e3a0\uff0c\u8bf4\u660e\u4e0d\u591f\u51cf\uff0c\u5219\u5bf9\u7ed3\u679c\u53d6\u8865\u7801\u5e76\u52a0\u8d1f\u53f7","title":"Complements \u8865\u7801"},{"location":"CLDF/slide/Chapter1-3/#_2","text":"\u8bbe\u52a0\u6cd5\u4e3a0\uff0c\u51cf\u6cd5\u4e3a1\uff0c\u6b63\u6570\u7b2c\u4e00\u4f4d0\uff0c\u8d1f\u6570\u7b2c\u4e00\u4f4d1\uff0c\u90a3\u4e48\u5bf9\u51cf\u6570\u7b2c\u4e00\u4f4d\uff0c\u7b26\u53f7\uff0c\u88ab\u51cf\u6570\u7b2c\u4e00\u4f4d\u6784\u6210\u7684\u5e8f\u5217\uff0c\u82e5\u6709\u5076\u6570\u4e2a0\uff0c\u5728\u6ca1\u6709\u6ea2\u51fa\u60c5\u51b5\u4e0b\u5219\u53ef\u4ee5\u8f6c\u5316\u4e3a\u540c\u53f7\u76f8\u52a0 \u82e5\u88ab\u52a0\u6570\u4e0e\u88ab\u51cf\u6570\u4e3a\u8d1f\uff0c\u5219\u53d6\u5bf9\u5e94\u8865\u7801\uff08\u4e0d\u6539\u53d8\u7b26\u53f7\u4f4d\uff09\uff0c\u4e4b\u540e\u82e5\u662f\u52a0\u6cd5\u5219\u6b63\u5e38\u8fdb\u884c\uff0c\u51cf\u6cd5\u5219\u7c7b\u4f3c\u5730\u5bf9\u51cf\u6570\u53d6\u8865","title":"\u6709\u7b26\u53f7\u51cf\u6cd5"},{"location":"CLDF/slide/Chapter1-3/#_3","text":"\u540c\u53f7\u76f8\u52a0\u3001\u5f02\u53f7\u76f8\u51cf\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa \u5224\u65ad\u6ea2\u51fa\uff1a$V=C_n\\oplus C_{n-1}$,\u5373$C_n$\u4e0e$C_{n-1}$\u7b26\u53f7\u4e00\u81f4\u5219\u4e0d\u6ea2\u51fa\uff0c\u5426\u5219\u6ea2\u51fa \u4e24\u4e2a\u6b63\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f0\uff0c\u6ea2\u51fa\u53ea\u53ef\u80fd\u662f$C_{n-1}$\u4e3a1 \u4e24\u4e2a\u8d1f\u6570\u76f8\u52a0\uff0c$C_n$\u4e00\u5b9a\u662f1\uff0c\u82e5\u4e0d\u6ea2\u51fa$C_{n-1}$\u9700\u8981\u4e3a1 \u65e0\u7b26\u53f7\u6570\u6ea2\u51fa\uff1a\u4e24\u4e2a\u9996\u4f4d\u90fd\u662f1 \u6709\u7b26\u53f7\u6570\uff1a\u540c\u53f7\u65f6\u6709\u53ef\u80fd\u6ea2\u51fa","title":"\u6ea2\u51fa"},{"location":"CLDF/slide/Chapter1-3/#_4","text":"\u5bf9\u4e8e2\u7684\u5e42\u6b21\u53ef\u4ee5\u901a\u8fc7\u79fb\u4f4d\u5f97\u5230\u7ed3\u679c\uff0c\u5bf9\u4e8e\u975e2\u5e42\u6b21\u53ef\u4ee5\u5e38\u6570\u52a0\u6cd5\u548c2\u7684\u5e42\u6b21\u4e58\u9664\u76f8\u7ed3\u5408\u5f97\u5230\u7ed3\u679c\u3002 \u5982$3x=2^1x+2^0x$,\u5373$x[31:0]={x[30:0],1'b0}+x[31:0]$.","title":"\u5e38\u6570\u9664\u6cd5\u3001\u4e58\u6cd5"},{"location":"CLDF/slide/Chapter4-P1/","text":"Chapter 4 Part 1 Sequential Circuits Introduction \u65f6\u5e8f\u7535\u8def\u4ecb\u7ecd \u7ec4\u6210\uff1a \u73b0\u4ee3\u590d\u6742\u7535\u8def\u8bbe\u8ba1\u5927\u591a\u4f7f\u7528\u540c\u6b65 Storage elements: Latches or Flip-Flops \u7ec4\u5408\u903b\u8f91\uff1a Implements a multiple-output switching function Inputs are signals from the outside. Outputs are signals to the outside. Other inputs, State or Present State are signals from storage elements. The remaining outputs,Next State are inputs to storage elements. Combinatorial Logic: Next state function(\u6b21\u6001\u65b9\u7a0b): Next State = f(Inputs, State) Output function (Mealy): Outputs = g(Inputs, State) Output function (Moore): Outputs = h(State) \u65f6\u5e8f\u7535\u8def\u5206\u7c7b \u540c\u6b65(Synchronous)\uff1a\u5728\u67d0\u51e0\u4e2a\u65f6\u95f4\u68c0\u6d4b\uff0c\u4ec0\u4e48\u65f6\u5019\u89c2\u6d4b\u8f93\u5165\u548c\u6539\u53d8\u72b6\u6001\u4ec5\u4e0e\u65f6\u95f4\u4fe1\u53f7\u6709\u5173\u3002\u6240\u6709\u5143\u4ef6\u5728\u65f6\u949f\u6a21\u5757\u63a7\u5236\u4e0b\u540c\u65f6\u66f4\u65b0\u3002\u540c\u6b65\u62bd\u8c61\u4f7f\u590d\u6742\u7684\u8bbe\u8ba1\u53d8\u5f97\u6613\u4e8e\u5904\u7406\uff01 CPU\uff1a\u540c\u6b65 \u65f6\u949f\u6a21\u5757\uff1a always@ (posedge,clk) begin //\u53ea\u8981\u65f6\u949f\u4fe1\u53f7\u5411\u4e0a\u53d8\u52a8\uff0c\u5c31\u4f1a\u6267\u884c\u8be5\u6a21\u5757 ---> \u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u68c0\u6d4b \u540c\u6b65 end \u5f02\u6b65(Asynchronous)\uff1a\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u6539\u53d8\uff0c\u89c2\u6d4b\u8f93\u5165\u4e0e\u72b6\u6001\uff0c\u5373\u65f6\u54cd\u5e94\u3002 \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f Latch \u9519\u8bef\u7531\u4e8e$S$\u53d8\u5316\u4f20\u5230\u53cd\u76f8\u5668\u8f93\u51fa\u6709\u5ef6\u8fdf\uff0c\u56e0\u6b64\u51fa\u73b0$S$\u75311\u53d80\u540e\uff0c$\\overline{S}$\u5e76\u672a\u7acb\u5373\u75310\u53d81\uff0c\u4f7f\u5f97\u4e24\u8005\u90fd\u662f0\uff0c\u8f93\u51fa\u4e5f\u53d8\u6210\u4e860 \u5c06A\u4e0eY\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def S\u4e3a1\u65f6\uff0c$Y=B$\uff0cS\u4e3a0\u65f6\uff0cB\u4e0d\u6539\u53d8Y\uff0c\u56e0\u6b64Y\u53ef\u4ee5\u50a8\u5b58B\u7684\u503c \u518d\u52a0\u4e00\u4e2a\u975e\u95e8 \u4f18\u70b9\uff1a\u7535\u8def\u7b80\u5355 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u7cbe\u786e Basic (NAND) $\\overline{S} \u2013 \\overline{R}$ Latch \u9501\u5b58\u5668 \u8f93\u516500\u662f\u7981\u6b62\u7684 Basic (NOR) S \u2013 R Latch Clocked S-R Latch C\u4e3a0\uff0c\u9501\u5b58\u5668\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a1\uff0c\u4e0d\u6539\u53d8\u503c\uff1bC\u4e3a1\uff0c\u8f93\u5165\u76f8\u5f53\u4e8e$\\overline{S},\\overline{R}$. \u6539\u8fdb\uff1a\u4f7f\u5f97\u6ca1\u6709\u975e\u6cd5\u60c5\u51b5\u2014\u2014D Latch Flip-Flops The Latch Timing Problem \u53ea\u8981 C = 1\uff0cY \u7684\u503c\u5c31\u4f1a\u7ee7\u7eed\u53d8\u5316\uff01 \u6240\u9700\u884c\u4e3a\uff1aY \u5728\u6bcf\u4e2a\u65f6\u949f\u8109\u51b2\u4e2d\u4ec5\u66f4\u6539\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\u662f\u65ad\u5f00\u5b58\u50a8\u5143\u4ef6\u5185\u4ece Y \u5230 Y \u7684\u95ed\u5408\u8def\u5f84\uff0c\u4f7f\u7528\u89e6\u53d1\u5668\uff08flip-flop\uff09 a master-slave flip-flop an edge-triggered flip-flop S-R Master-Slave Flip-Flop \u5de6\u4e3b(master),\u53f3\u4ece(slave) \u5047\u8bbeS=1,R=0\uff0cC\u75310\u53d81\uff0c\u4e3b\u9501\u5b58\u5668\u5bf9\u5e94Q\u4e3a1\uff1bC\u518d\u53d80\uff0c\u4ece\u9501\u5b58\u5668\u63a5\u6536\u5916\u90e8\u8f93\u5165\uff0c\u5373Q\u4e0e$\\overline{Q}$\uff0c\u5bf9\u5e94\u8f93\u51faQ\u4e3a1 C\u5728\u4efb\u4f55\u72b6\u6001\uff0cS,R\u8f93\u5165\u7aef\u90fd\u4e0d\u53ef\u80fd\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\u72b6\u6001 \u53ea\u6709\u5f53clock\u5b8c\u6210\u4e00\u6b21$0\\rarr 1\\rarr 0$\u53d8\u5316\u7684\u5468\u671f\u540e\uff0c\u8f93\u51faQ\u624d\u4f1a\u6539\u53d8 \u95ee\u9898\uff1aclock\u4e3a1\u65f6\uff0c\u7531\u4e8e\u5916\u90e8\u8f93\u5165\u53d8\u5316\u5e26\u6765\u7684\u7d2f\u79ef\u6548\u5e94\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u80fd\u9519\u8bef\uff0c\u79f0\u4e3a 1\u2018s catching \u89e6\u53d1\u5668\u8f93\u51fa\u7684\u53d8\u5316\u4f1a\u56e0\u8109\u51b2\u5bbd\u5ea6\u800c\u5ef6\u8fdf\uff0c\u4ece\u800c\u4f7f\u7535\u8def\u53d8\u6162 \u5f53 C = 1 \u65f6\uff0c\u5141\u8bb8 S \u548c R \u66f4\u6539\uff0c\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1\uff0c\u7136\u540e\u53d8\u56de 0\uff0cR \u4fdd\u6301\u5728 0 \u3002\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a 1 \uff0c1 \u88ab\u8f6c\u79fb\u5230\u4ece\u9501\u5b58\u5668 \u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0\uff0cR \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0 \uff0c\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u590d\u4f4d 0 \u88ab\u4f20\u8f93\u5230\u4ece\u9501\u5b58\u5668 Edge-Triggered Flip-Flop \u4e3b\u9501\u5b58\u5668\u53d8\u4e3aD\u9501\u5b58\u5668 \u53ea\u770b\u8fb9\u6cbf\u60c5\u51b5\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa\uff0c\u5176\u4ed6\u65f6\u5019\u8f93\u5165\u4e0d\u5f71\u54cd \u200b \u4e0a\u5347\u6cbf\u89e6\u53d1\u5668\uff08Positive-Triggered Flip-Flop\uff09 Standard Symbols for Storage Elements \u4e3b\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u4fa7\u7684 \u8868\u793a\u4e0d\u5141\u8bb8\u8f93\u5165\u6539\u53d8\u3002 Actual Circuit of Edge-Triggered D Flip-Flop 6\u4e2a\u4e0e\u975e\u95e8\uff0c\u6210\u672c\u8f83\u4f4e Direct Input \u5f02\u6b65\u8d4b\u521d\u503c\uff1a\u901a\u8fc7S,R\u8f93\u5165\u4e3a\u89e6\u53d1\u5668\u8d4b\u521d\u503c\uff0c\u591a\u7528\u4e8e\u7cfb\u7edf\u590d\u4f4d \u82e5\u4f7f\u7528\u540c\u6b65\u8d4b\u521d\u503c\uff1a\u8bbe\u7f6eD \u5bf9\u6240\u793a\u7535\u8def 0 applied to R resets the flip-flop to the 0 state 0 applied to S sets the flip-flop to the 1 state Analysis \u8f93\u5165:$x(t)$,\u8f93\u51fa:$y(t)$,\u72b6\u6001:$A(t),B(t)$ a important equation:$Q=D$ Stable Table \u6709\u9650\u72b6\u6001\u673a Alternate State Table \u4e8c\u7ef4\u8868\uff1a State Diagrams The sequential circuit function can be represented in graphical form as a state diagram with the following components\uff1a A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example\uff1a/\u5de6\u4fa7\u8f93\u5165\uff0c\u53f3\u4fa7\u8f93\u51fa\uff0c\u7531\u73b0\u6001\u6307\u5411\u6b21\u6001\uff0c\u4e0b\u4f8b\u4e3aMealy\u578b Equivalent State Definitions \u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u5373\u5bf9\u4efb\u610f\u4e00\u79cd\u8f93\u5165\u90fd\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u4e0e\u6b21\u6001 \u4f8b\uff1a\u4e0b\u56fe\u4e2dS2\u4e0eS3 \u56e0\u6b64\u53ef\u4ee5\u6539\u5199 \u7136\u540e\u53d1\u73b0S1\u4e0eS2\u7b49\u6548 \u6b64\u65f6\u4e0d\u518d\u6709\u53ef\u4ee5\u5408\u5e76\u7684 Moore and Mealy Models Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist: Moore Model Outputs are a function ONLY of states.Usually specified on the states. State Table Mealy Model Outputs are a function of inputs AND states.Usually specified on the state transition arcs. State Table \u6df7\u5408\u578b\u5199\u6cd5 \u6307\u5411\u540c\u4e00\u4e2a\u6b21\u6001\u7684\u8f93\u51fa\u76f8\u540c\u65f6\u628a\u8f93\u51fa\u653e\u8fdb\u5708 One more example \u6a215\u8ba1\u6570\u5668\uff0c\u82e5\u4ece0\u5f00\u59cb\uff0c\u5219\u4f1a0~4\u5faa\u73af\u53d8\u5316\uff0c\u4f46\u82e5\u5916\u90e8\u5e72\u6270\u4ea7\u751f5-7\uff0c\u4e0b\u6b21\u4ecd\u4f1a\u5207\u6362\u56de0-4\uff0c\u4ece\u800c\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u4e0e\u9519\u8bef\u3002 Only states reachable from the reset state 000 are used: 000, 001, 010, 011, and 100. The circuit produces a 1 on Z after four clock periods and every five clock periods thereafter: 000 -> 001 -> 010 -> 011 -> 100 -> 000 -> 001 -> 010 -> 011 -> 100 \u2026 Filp-Flop Timing Parameters $t_s$\uff1asetup time\uff0c\u5efa\u7acb\u65f6\u95f4 \u6839\u636e\u5b9a\u4e49, $t_s$\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 $t_h$\uff1ahold time\uff0c\u89e6\u53d1\u8fb9\u6cbf\u540e\u8fc7\u4e00\u6bb5\u65f6\u95f4\u8f93\u5165\u624d\u80fd\u6539\u53d8\u3002\u73b0\u5728\u591a\u6570\u89e6\u53d1\u5668$t_h$\u53ef\u4ee5\u662f0 $t_w$\uff1aclock pulse width $t_{px}$\uff1apropagation delay. Measured from clock edge that triggers the output change to the output change. $t_{PHL}$ :High-to-Low $t_{PLH}$ :Low-to-High $t_{pd}$:max ($t_{PHL}$,$ t_{PLH}$) Circuit and System Level Timing New Timing Components $t_p$ clock period - The interval between occurrences of a specific clock edge in a periodic clock $t_{pd,COMB}$ :total delay of combinational logic along the path from flip-flop output to flip-flop input \u7ec4\u5408\u903b\u8f91\u5728\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7684\u603b\u5ef6\u8fdf $t_{pd,FF}$\uff1a\u89e6\u53d1\u5668\u603b\u5ef6\u8fdf $t_{slack}$ \uff1a extra time in the clock period in addition to the sum of the delays and setup time on a path \u53ef\u4ee5\u662f\u6b63\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570 \u6240\u6709\u8def\u5f84\u4e0a\u7684\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e\u96f6\u624d\u80fd\u6b63\u786e\u64cd\u4f5c Must be greater than or equal to zero on all paths for correct operation Timing Equations\uff1a $$ t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s) $$ For $t_{slack}$ greater than or equal to zero, $$ t_p\\geqslant max(t_{pd,FF}+t_{pd,COMB}+t_s) $$ for all paths from flip-flop output to flip-flop input Calculation of Allowable $t_{pd,COMB}$ \u56e0\u6b64\u66f4\u591a\u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668","title":"Chapter 4  Part 1"},{"location":"CLDF/slide/Chapter4-P1/#chapter-4-part-1","text":"","title":"Chapter 4  Part 1"},{"location":"CLDF/slide/Chapter4-P1/#sequential-circuits-introduction","text":"","title":"Sequential Circuits Introduction"},{"location":"CLDF/slide/Chapter4-P1/#_1","text":"\u7ec4\u6210\uff1a \u73b0\u4ee3\u590d\u6742\u7535\u8def\u8bbe\u8ba1\u5927\u591a\u4f7f\u7528\u540c\u6b65 Storage elements: Latches or Flip-Flops \u7ec4\u5408\u903b\u8f91\uff1a Implements a multiple-output switching function Inputs are signals from the outside. Outputs are signals to the outside. Other inputs, State or Present State are signals from storage elements. The remaining outputs,Next State are inputs to storage elements. Combinatorial Logic: Next state function(\u6b21\u6001\u65b9\u7a0b): Next State = f(Inputs, State) Output function (Mealy): Outputs = g(Inputs, State) Output function (Moore): Outputs = h(State)","title":"\u65f6\u5e8f\u7535\u8def\u4ecb\u7ecd"},{"location":"CLDF/slide/Chapter4-P1/#_2","text":"\u540c\u6b65(Synchronous)\uff1a\u5728\u67d0\u51e0\u4e2a\u65f6\u95f4\u68c0\u6d4b\uff0c\u4ec0\u4e48\u65f6\u5019\u89c2\u6d4b\u8f93\u5165\u548c\u6539\u53d8\u72b6\u6001\u4ec5\u4e0e\u65f6\u95f4\u4fe1\u53f7\u6709\u5173\u3002\u6240\u6709\u5143\u4ef6\u5728\u65f6\u949f\u6a21\u5757\u63a7\u5236\u4e0b\u540c\u65f6\u66f4\u65b0\u3002\u540c\u6b65\u62bd\u8c61\u4f7f\u590d\u6742\u7684\u8bbe\u8ba1\u53d8\u5f97\u6613\u4e8e\u5904\u7406\uff01 CPU\uff1a\u540c\u6b65 \u65f6\u949f\u6a21\u5757\uff1a always@ (posedge,clk) begin //\u53ea\u8981\u65f6\u949f\u4fe1\u53f7\u5411\u4e0a\u53d8\u52a8\uff0c\u5c31\u4f1a\u6267\u884c\u8be5\u6a21\u5757 ---> \u53ea\u5728\u7279\u5b9a\u60c5\u51b5\u68c0\u6d4b \u540c\u6b65 end \u5f02\u6b65(Asynchronous)\uff1a\u5728\u4efb\u4f55\u65f6\u95f4\u90fd\u53ef\u4ee5\u6539\u53d8\uff0c\u89c2\u6d4b\u8f93\u5165\u4e0e\u72b6\u6001\uff0c\u5373\u65f6\u54cd\u5e94\u3002","title":"\u65f6\u5e8f\u7535\u8def\u5206\u7c7b"},{"location":"CLDF/slide/Chapter4-P1/#_3","text":"","title":"\u79bb\u6563\u4e8b\u4ef6\u4eff\u771f"},{"location":"CLDF/slide/Chapter4-P1/#latch","text":"\u9519\u8bef\u7531\u4e8e$S$\u53d8\u5316\u4f20\u5230\u53cd\u76f8\u5668\u8f93\u51fa\u6709\u5ef6\u8fdf\uff0c\u56e0\u6b64\u51fa\u73b0$S$\u75311\u53d80\u540e\uff0c$\\overline{S}$\u5e76\u672a\u7acb\u5373\u75310\u53d81\uff0c\u4f7f\u5f97\u4e24\u8005\u90fd\u662f0\uff0c\u8f93\u51fa\u4e5f\u53d8\u6210\u4e860","title":"Latch"},{"location":"CLDF/slide/Chapter4-P1/#ay","text":"S\u4e3a1\u65f6\uff0c$Y=B$\uff0cS\u4e3a0\u65f6\uff0cB\u4e0d\u6539\u53d8Y\uff0c\u56e0\u6b64Y\u53ef\u4ee5\u50a8\u5b58B\u7684\u503c","title":"\u5c06A\u4e0eY\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u65f6\u5e8f\u7535\u8def"},{"location":"CLDF/slide/Chapter4-P1/#_4","text":"\u4f18\u70b9\uff1a\u7535\u8def\u7b80\u5355 \u7f3a\u70b9\uff1a\u9891\u7387\u4e0d\u7cbe\u786e","title":"\u518d\u52a0\u4e00\u4e2a\u975e\u95e8"},{"location":"CLDF/slide/Chapter4-P1/#basic-nand-overlines-overliner-latch","text":"\u8f93\u516500\u662f\u7981\u6b62\u7684","title":"Basic (NAND) $\\overline{S} \u2013 \\overline{R}$ Latch \u9501\u5b58\u5668"},{"location":"CLDF/slide/Chapter4-P1/#basic-nor-s-r-latch","text":"","title":"Basic (NOR) S \u2013 R Latch"},{"location":"CLDF/slide/Chapter4-P1/#clocked-s-r-latch","text":"C\u4e3a0\uff0c\u9501\u5b58\u5668\u4e24\u4e2a\u8f93\u5165\u90fd\u4e3a1\uff0c\u4e0d\u6539\u53d8\u503c\uff1bC\u4e3a1\uff0c\u8f93\u5165\u76f8\u5f53\u4e8e$\\overline{S},\\overline{R}$.","title":"Clocked S-R Latch"},{"location":"CLDF/slide/Chapter4-P1/#d-latch","text":"","title":"\u6539\u8fdb\uff1a\u4f7f\u5f97\u6ca1\u6709\u975e\u6cd5\u60c5\u51b5\u2014\u2014D Latch"},{"location":"CLDF/slide/Chapter4-P1/#flip-flops","text":"","title":"Flip-Flops"},{"location":"CLDF/slide/Chapter4-P1/#the-latch-timing-problem","text":"\u53ea\u8981 C = 1\uff0cY \u7684\u503c\u5c31\u4f1a\u7ee7\u7eed\u53d8\u5316\uff01 \u6240\u9700\u884c\u4e3a\uff1aY \u5728\u6bcf\u4e2a\u65f6\u949f\u8109\u51b2\u4e2d\u4ec5\u66f4\u6539\u4e00\u6b21 \u89e3\u51b3\u65b9\u6848\u662f\u65ad\u5f00\u5b58\u50a8\u5143\u4ef6\u5185\u4ece Y \u5230 Y \u7684\u95ed\u5408\u8def\u5f84\uff0c\u4f7f\u7528\u89e6\u53d1\u5668\uff08flip-flop\uff09 a master-slave flip-flop an edge-triggered flip-flop","title":"The Latch Timing Problem"},{"location":"CLDF/slide/Chapter4-P1/#s-r-master-slave-flip-flop","text":"\u5de6\u4e3b(master),\u53f3\u4ece(slave) \u5047\u8bbeS=1,R=0\uff0cC\u75310\u53d81\uff0c\u4e3b\u9501\u5b58\u5668\u5bf9\u5e94Q\u4e3a1\uff1bC\u518d\u53d80\uff0c\u4ece\u9501\u5b58\u5668\u63a5\u6536\u5916\u90e8\u8f93\u5165\uff0c\u5373Q\u4e0e$\\overline{Q}$\uff0c\u5bf9\u5e94\u8f93\u51faQ\u4e3a1 C\u5728\u4efb\u4f55\u72b6\u6001\uff0cS,R\u8f93\u5165\u7aef\u90fd\u4e0d\u53ef\u80fd\u76f4\u63a5\u6539\u53d8\u8f93\u51fa\u72b6\u6001 \u53ea\u6709\u5f53clock\u5b8c\u6210\u4e00\u6b21$0\\rarr 1\\rarr 0$\u53d8\u5316\u7684\u5468\u671f\u540e\uff0c\u8f93\u51faQ\u624d\u4f1a\u6539\u53d8 \u95ee\u9898\uff1aclock\u4e3a1\u65f6\uff0c\u7531\u4e8e\u5916\u90e8\u8f93\u5165\u53d8\u5316\u5e26\u6765\u7684\u7d2f\u79ef\u6548\u5e94\uff0c\u4f7f\u5f97\u7ed3\u679c\u53ef\u80fd\u9519\u8bef\uff0c\u79f0\u4e3a 1\u2018s catching \u89e6\u53d1\u5668\u8f93\u51fa\u7684\u53d8\u5316\u4f1a\u56e0\u8109\u51b2\u5bbd\u5ea6\u800c\u5ef6\u8fdf\uff0c\u4ece\u800c\u4f7f\u7535\u8def\u53d8\u6162 \u5f53 C = 1 \u65f6\uff0c\u5141\u8bb8 S \u548c R \u66f4\u6539\uff0c\u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1\uff0c\u7136\u540e\u53d8\u56de 0\uff0cR \u4fdd\u6301\u5728 0 \u3002\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a 1 \uff0c1 \u88ab\u8f6c\u79fb\u5230\u4ece\u9501\u5b58\u5668 \u5047\u8bbe Q = 0\uff0cS \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0\uff0cR \u53d8\u4e3a 1 \u5e76\u8fd4\u56de 0 \uff0c\u4e3b\u9501\u5b58\u5668\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u590d\u4f4d 0 \u88ab\u4f20\u8f93\u5230\u4ece\u9501\u5b58\u5668","title":"S-R Master-Slave Flip-Flop"},{"location":"CLDF/slide/Chapter4-P1/#edge-triggered-flip-flop","text":"\u4e3b\u9501\u5b58\u5668\u53d8\u4e3aD\u9501\u5b58\u5668 \u53ea\u770b\u8fb9\u6cbf\u60c5\u51b5\u8f93\u5165\u51b3\u5b9a\u8f93\u51fa\uff0c\u5176\u4ed6\u65f6\u5019\u8f93\u5165\u4e0d\u5f71\u54cd \u200b \u4e0a\u5347\u6cbf\u89e6\u53d1\u5668\uff08Positive-Triggered Flip-Flop\uff09","title":"Edge-Triggered Flip-Flop"},{"location":"CLDF/slide/Chapter4-P1/#standard-symbols-for-storage-elements","text":"\u4e3b\u4ece\u89e6\u53d1\u5668\u8f93\u51fa\u4fa7\u7684 \u8868\u793a\u4e0d\u5141\u8bb8\u8f93\u5165\u6539\u53d8\u3002","title":"Standard Symbols for Storage Elements"},{"location":"CLDF/slide/Chapter4-P1/#actual-circuit-of-edge-triggered-d-flip-flop","text":"6\u4e2a\u4e0e\u975e\u95e8\uff0c\u6210\u672c\u8f83\u4f4e","title":"Actual Circuit of Edge-Triggered D Flip-Flop"},{"location":"CLDF/slide/Chapter4-P1/#direct-input","text":"\u5f02\u6b65\u8d4b\u521d\u503c\uff1a\u901a\u8fc7S,R\u8f93\u5165\u4e3a\u89e6\u53d1\u5668\u8d4b\u521d\u503c\uff0c\u591a\u7528\u4e8e\u7cfb\u7edf\u590d\u4f4d \u82e5\u4f7f\u7528\u540c\u6b65\u8d4b\u521d\u503c\uff1a\u8bbe\u7f6eD \u5bf9\u6240\u793a\u7535\u8def 0 applied to R resets the flip-flop to the 0 state 0 applied to S sets the flip-flop to the 1 state","title":"Direct Input"},{"location":"CLDF/slide/Chapter4-P1/#analysis","text":"\u8f93\u5165:$x(t)$,\u8f93\u51fa:$y(t)$,\u72b6\u6001:$A(t),B(t)$ a important equation:$Q=D$","title":"Analysis"},{"location":"CLDF/slide/Chapter4-P1/#stable-table","text":"\u6709\u9650\u72b6\u6001\u673a Alternate State Table \u4e8c\u7ef4\u8868\uff1a","title":"Stable Table"},{"location":"CLDF/slide/Chapter4-P1/#state-diagrams","text":"The sequential circuit function can be represented in graphical form as a state diagram with the following components\uff1a A circle with the state name in it for each state A directed arc from the Present State to the Next State for each state transition A label on each directed arc with the Input values which causes the state transition, and A label: On each circle with the output value produced, or On each directed arc with the output value produced. Moore type output depends only on state(\u8f93\u51fa\u753b\u5728\u5708\u91cc\u9762) Mealy type output depends on state and input(\u8f93\u51fa\u753b\u5728\u6709\u5411\u5f27\u4e0a) Example\uff1a/\u5de6\u4fa7\u8f93\u5165\uff0c\u53f3\u4fa7\u8f93\u51fa\uff0c\u7531\u73b0\u6001\u6307\u5411\u6b21\u6001\uff0c\u4e0b\u4f8b\u4e3aMealy\u578b","title":"State Diagrams"},{"location":"CLDF/slide/Chapter4-P1/#equivalent-state-definitions","text":"\u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u5373\u5bf9\u4efb\u610f\u4e00\u79cd\u8f93\u5165\u90fd\u4ea7\u751f\u76f8\u540c\u7684\u8f93\u51fa\u4e0e\u6b21\u6001 \u4f8b\uff1a\u4e0b\u56fe\u4e2dS2\u4e0eS3 \u56e0\u6b64\u53ef\u4ee5\u6539\u5199 \u7136\u540e\u53d1\u73b0S1\u4e0eS2\u7b49\u6548 \u6b64\u65f6\u4e0d\u518d\u6709\u53ef\u4ee5\u5408\u5e76\u7684","title":"Equivalent State Definitions"},{"location":"CLDF/slide/Chapter4-P1/#moore-and-mealy-models","text":"Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist:","title":"Moore and Mealy Models"},{"location":"CLDF/slide/Chapter4-P1/#moore-model","text":"Outputs are a function ONLY of states.Usually specified on the states. State Table","title":"Moore Model"},{"location":"CLDF/slide/Chapter4-P1/#mealy-model","text":"Outputs are a function of inputs AND states.Usually specified on the state transition arcs. State Table","title":"Mealy Model"},{"location":"CLDF/slide/Chapter4-P1/#_5","text":"\u6307\u5411\u540c\u4e00\u4e2a\u6b21\u6001\u7684\u8f93\u51fa\u76f8\u540c\u65f6\u628a\u8f93\u51fa\u653e\u8fdb\u5708","title":"\u6df7\u5408\u578b\u5199\u6cd5"},{"location":"CLDF/slide/Chapter4-P1/#one-more-example","text":"\u6a215\u8ba1\u6570\u5668\uff0c\u82e5\u4ece0\u5f00\u59cb\uff0c\u5219\u4f1a0~4\u5faa\u73af\u53d8\u5316\uff0c\u4f46\u82e5\u5916\u90e8\u5e72\u6270\u4ea7\u751f5-7\uff0c\u4e0b\u6b21\u4ecd\u4f1a\u5207\u6362\u56de0-4\uff0c\u4ece\u800c\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u9501\u4e0e\u9519\u8bef\u3002 Only states reachable from the reset state 000 are used: 000, 001, 010, 011, and 100. The circuit produces a 1 on Z after four clock periods and every five clock periods thereafter: 000 -> 001 -> 010 -> 011 -> 100 -> 000 -> 001 -> 010 -> 011 -> 100 \u2026","title":"One more example"},{"location":"CLDF/slide/Chapter4-P1/#filp-flop-timing-parameters","text":"$t_s$\uff1asetup time\uff0c\u5efa\u7acb\u65f6\u95f4 \u6839\u636e\u5b9a\u4e49, $t_s$\u6307\u5728\u91c7\u6837\u524d\u89e6\u53d1\u5668\u9700\u8981\u7684\u51c6\u5907\u65f6\u95f4\u3002\u5bf9\u4e8e\u4e3b\u4ece\u89e6\u53d1\u5668\uff0c\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u7684\u65f6\u5019 S \u90e8\u5206\u7684\u8f93\u5165\u662f\u4e0d\u80fd\u6539\u53d8\u7684\uff0c\u5426\u5219\u53ef\u80fd\u6709\u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898\uff0c\u56e0\u6b64\u5728\u4fe1\u53f7\u5904\u4e8e\u4e0a\u5347\u6cbf\u90fd\u662f\u89e6\u53d1\u5668\u7684\u51c6\u5907\u65f6\u95f4\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u6211\u4eec\u666e\u904d\u4f7f\u7528\u8fb9\u7f18\u89e6\u53d1\u5668\u7684\u539f\u56e0\u3002 \u5bf9\u4e8e D \u89e6\u53d1\u5668\u800c\u8a00\uff0c\u4e0d\u8981\u5361\u5728\u65f6\u949f\u8fb9\u6cbf\u6539\u53d8 D \u7684\u8f93\u5165\uff0c\u800c\u662f\u5728\u65f6\u949f\u6539\u53d8\u4e4b\u524d\u5c31\u8fdb\u884c\uff0c\u8fd9\u6837 D \u89e6\u53d1\u5668\u624d\u80fd\u6709\u8db3\u591f\u7684\u51c6\u5907\u65f6\u95f4\u3002 $t_h$\uff1ahold time\uff0c\u89e6\u53d1\u8fb9\u6cbf\u540e\u8fc7\u4e00\u6bb5\u65f6\u95f4\u8f93\u5165\u624d\u80fd\u6539\u53d8\u3002\u73b0\u5728\u591a\u6570\u89e6\u53d1\u5668$t_h$\u53ef\u4ee5\u662f0 $t_w$\uff1aclock pulse width $t_{px}$\uff1apropagation delay. Measured from clock edge that triggers the output change to the output change. $t_{PHL}$ :High-to-Low $t_{PLH}$ :Low-to-High $t_{pd}$:max ($t_{PHL}$,$ t_{PLH}$)","title":"Filp-Flop Timing Parameters"},{"location":"CLDF/slide/Chapter4-P1/#circuit-and-system-level-timing","text":"New Timing Components $t_p$ clock period - The interval between occurrences of a specific clock edge in a periodic clock $t_{pd,COMB}$ :total delay of combinational logic along the path from flip-flop output to flip-flop input \u7ec4\u5408\u903b\u8f91\u5728\u89e6\u53d1\u5668\u8f93\u51fa\u5230\u89e6\u53d1\u5668\u8f93\u5165\u8def\u5f84\u4e0a\u7684\u603b\u5ef6\u8fdf $t_{pd,FF}$\uff1a\u89e6\u53d1\u5668\u603b\u5ef6\u8fdf $t_{slack}$ \uff1a extra time in the clock period in addition to the sum of the delays and setup time on a path \u53ef\u4ee5\u662f\u6b63\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u8d1f\u6570 \u6240\u6709\u8def\u5f84\u4e0a\u7684\u5fc5\u987b\u5927\u4e8e\u6216\u7b49\u4e8e\u96f6\u624d\u80fd\u6b63\u786e\u64cd\u4f5c Must be greater than or equal to zero on all paths for correct operation Timing Equations\uff1a $$ t_p=t_{slack}+(t_{pd,FF}+t_{pd,COMB}+t_s) $$ For $t_{slack}$ greater than or equal to zero, $$ t_p\\geqslant max(t_{pd,FF}+t_{pd,COMB}+t_s) $$ for all paths from flip-flop output to flip-flop input Calculation of Allowable $t_{pd,COMB}$ \u56e0\u6b64\u66f4\u591a\u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u5668","title":"Circuit and System Level Timing"},{"location":"CLDF/slide/Chapter4-P2/","text":"Chapter 4 Part 2 Sequential Circuit Design Formulation: Finding a State Diagram A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09 A Example: Sequence Recognizers \u5e8f\u5217\u8bc6\u522b A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurrence. \u9700\u8981\u627e\u5230\u6307\u5b9a\u5e8f\u5217\u7684\u5934\u5c3e To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurrence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred. \u72b6\u6001\u7b49\u6548 \u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1a \u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c\u3002 \u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001,\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c(S1, S2), \u6216\u8005\u8bf4\uff0c\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u5bf9\u3002\u7b49\u6548\u72b6\u6001\u53ef\u4ee5\u5408\u5e76\u3002\u8fd9\u91cc\u201c\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\u201d\u662f\u6307\u957f\u5ea6\u548c\u7ed3\u6784\u662f\u4efb\u610f\u7684\uff0c\u5b83\u5305\u542b\u65e0\u7a77\u591a\u4f4d\uff0c\u4e14\u6709\u65e0\u7a77\u591a\u79cd\u7ec4\u5408\u3002 \u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5\uff1a\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u5176\u6b21\u6216\u6b21\u6001\u76f8\u540c\uff0c\u6216\u6b21\u6001\u4ea4\u9519\uff0c\u6216\u6b21\u6001\u5faa\u73af $S_i$\u4e0e$S_j$\u7b49\u6548\uff0c$S_k$\u4e0e$S_l$\u7b49\u6548 \u9690\u542b\u8868\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u627e\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u7531\u4e8eCD\u3001DE\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5DG\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7 \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5206\u914d \u57fa\u672c\u539f\u5219\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \uff08 \u8f83\u4e3a\u91cd\u8981 \uff09 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910 \u6ce8\uff1a\uff084\uff09\u4e2d4\u4e2a\u72b6\u6001\u51fa\u73b0\u6b21\u6570\u90fd\u4e00\u6837\u591a\uff0c\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u5206\u914d\u4e3a\u903b\u8f910\u5373\u53ef Other Filp-Flop J-K Filp-Flop \u4e0eSR\u7c7b\u4f3c\uff0c\u4f46\u8f93\u516511\u65f6\u89e6\u53d1\u5668\u4e3a\u6c42\u53cd(opposite state)\uff0c\u5373\u6ca1\u6709\u975e\u6cd5\u72b6\u6001 Implementation by D Flip-Flop\uff08\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u6027\u91c7\u6837\uff09\uff1a J=0\uff0cK=0\uff0cQ\u8f93\u51fa\u9001\u7ed9D\uff0c\u4fdd\u6301 J=0\uff0cK=1\uff0c\u4e0a\u4e0b\u5168disable\uff0cD\u7f6e0\uff0creset J=1\uff0cK=0\uff0cD\u8f93\u5165\u4e3a$\\overline{Q}+Q$\uff0c\u4e3a1 J=1\uff0cK=1\uff0c$\\overline{Q}$\u9001\u7ed9D\uff0c\u6c42\u53cd T Flip-Flop \u5355\u8f93\u5165T\uff0cT=0\u4fdd\u6301\uff0cT=1\u6c42\u53cd Reset (asynchronous or synchronous) essential \u9700\u8981reset\u8d4b\u521d\u503c \u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1 \u660e\u786e\u9700\u6c42 \u72b6\u6001\u56fe \u72b6\u6001\u8868 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5de5\u827a\u6620\u5c04 \u7535\u8def\u9a8c\u8bc1","title":"Chapter 4  Part 2"},{"location":"CLDF/slide/Chapter4-P2/#chapter-4-part-2","text":"","title":"Chapter 4  Part 2"},{"location":"CLDF/slide/Chapter4-P2/#sequential-circuit-design","text":"","title":"Sequential Circuit Design"},{"location":"CLDF/slide/Chapter4-P2/#formulation-finding-a-state-diagram","text":"A state is an abstraction of the history of the past applied inputs to the circuit (including power-up reset or system reset). \u5c06\u6587\u672c\u5316\u7684\u9700\u6c42\u53d8\u4e3a\u7528\u72b6\u6001\u673a\u63cf\u8ff0\uff08\u6574\u4e2a\u7535\u8def\u7ecf\u8fc7\u54ea\u4e9b\u72b6\u6001\uff1f\u6bcf\u4e2a\u72b6\u6001\u4e4b\u95f4\u7531\u54ea\u4e2a\u8f93\u5165\u8fdb\u884c\u9a71\u52a8\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\uff09","title":"Formulation: Finding a State Diagram"},{"location":"CLDF/slide/Chapter4-P2/#a-example-sequence-recognizers","text":"A sequence recognizer is a sequential circuit that produces a distinct output value whenever a prescribed pattern of input symbols occur in sequence, i.e, recognizes an input sequence occurrence. \u9700\u8981\u627e\u5230\u6307\u5b9a\u5e8f\u5217\u7684\u5934\u5c3e To develop a sequence recognizer state diagram: Begin in an initial state in which NONE of the initial portion of the sequence has occurred (typically \u201creset\u201d state). Add a state that recognizes that the first symbol has occurred. Add states that recognize each successive symbol occurring. The final state represents the input sequence (possibly less the final input value) occurrence. Add state transition arcs which specify what happens when a symbol not in the proper sequence has occurred. Add other arcs on non-sequence inputs which transition to states that represent the input subsequence that has occurred.","title":"A Example: Sequence Recognizers \u5e8f\u5217\u8bc6\u522b"},{"location":"CLDF/slide/Chapter4-P2/#_1","text":"\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\uff1a \u72b6\u6001\u8868\u4e2d\u7684\u6b21\u6001\u548c\u8f93\u51fa\u90fd\u6709\u786e\u5b9a\u7684\u72b6\u6001\u548c\u786e\u5b9a\u7684\u8f93\u51fa\u503c\u3002 \u7b49\u6548\u72b6\u6001\uff1a\u8bbe\u72b6\u6001S1\u548cS2\u662f\u5b8c\u5168\u786e\u5b9a\u72b6\u6001\u8868\u4e2d\u7684\u4e24\u4e2a\u72b6\u6001,\u5982\u679c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u5206\u522b\u4ece\u72b6\u6001S1\u548c\u72b6\u6001S2\u51fa\u53d1\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u54cd\u5e94\u5e8f\u5217\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u7684\uff0c\u8bb0\u4f5c(S1, S2), \u6216\u8005\u8bf4\uff0c\u72b6\u6001S1\u548cS2\u662f\u7b49\u6548\u5bf9\u3002\u7b49\u6548\u72b6\u6001\u53ef\u4ee5\u5408\u5e76\u3002\u8fd9\u91cc\u201c\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\u201d\u662f\u6307\u957f\u5ea6\u548c\u7ed3\u6784\u662f\u4efb\u610f\u7684\uff0c\u5b83\u5305\u542b\u65e0\u7a77\u591a\u4f4d\uff0c\u4e14\u6709\u65e0\u7a77\u591a\u79cd\u7ec4\u5408\u3002 \u72b6\u6001\u7b49\u6548\u7684\u4e09\u79cd\u60c5\u51b5\uff1a\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u5176\u6b21\u6216\u6b21\u6001\u76f8\u540c\uff0c\u6216\u6b21\u6001\u4ea4\u9519\uff0c\u6216\u6b21\u6001\u5faa\u73af $S_i$\u4e0e$S_j$\u7b49\u6548\uff0c$S_k$\u4e0e$S_l$\u7b49\u6548 \u9690\u542b\u8868\u5316\u7b80 \u4f5c\u9690\u542b\u8868 \u987a\u5e8f\u6bd4\u8f83\uff0c\u5bfb\u627e\u7b49\u6548\u72b6\u6001\u5bf9 \u72b6\u6001\u5bf9\u7b49\u6548\uff0c\u6253\u201c\u221a\u201d\uff1b \u72b6\u6001\u5bf9\u4e0d\u7b49\u6548\uff0c\u6253\u201c\u00d7\u201d\uff1b \u72b6\u6001\u5bf9\u662f\u5426\u7b49\u6548\u9700\u8fdb\u4e00\u6b65\u68c0\u67e5\uff0c\u5219\u6807\u8bb0\u6b21\u6001\u5bf9\u3002 \u8fdb\u884c\u5173\u8054\u6bd4\u8f83\uff0c\u786e\u5b9a\u7b49\u6548\u72b6\u6001\u5bf9 \u7531\u4e8eCD\u3001DE\u4e0d\u7b49\u6548\uff0c\u6240\u4ee5DG\u4e0d\u7b49\u6548\uff0c\u753b\u659c\u7ebf\u6807\u5fd7 \u5904\u4e8e\u5faa\u73af\u94fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u72b6\u6001\u90fd\u662f\u7b49\u6548\u72b6\u6001\u5bf9","title":"\u72b6\u6001\u7b49\u6548"},{"location":"CLDF/slide/Chapter4-P2/#_2","text":"\u57fa\u672c\u539f\u5219\uff1a\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002 \u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \uff08 \u8f83\u4e3a\u91cd\u8981 \uff09 \u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801 \u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f910 \u6ce8\uff1a\uff084\uff09\u4e2d4\u4e2a\u72b6\u6001\u51fa\u73b0\u6b21\u6570\u90fd\u4e00\u6837\u591a\uff0c\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u5206\u914d\u4e3a\u903b\u8f910\u5373\u53ef","title":"\u72b6\u6001\u5206\u914d"},{"location":"CLDF/slide/Chapter4-P2/#other-filp-flop","text":"","title":"Other Filp-Flop"},{"location":"CLDF/slide/Chapter4-P2/#j-k-filp-flop","text":"\u4e0eSR\u7c7b\u4f3c\uff0c\u4f46\u8f93\u516511\u65f6\u89e6\u53d1\u5668\u4e3a\u6c42\u53cd(opposite state)\uff0c\u5373\u6ca1\u6709\u975e\u6cd5\u72b6\u6001 Implementation by D Flip-Flop\uff08\u4e3a\u4e86\u907f\u514d\u4e00\u6b21\u6027\u91c7\u6837\uff09\uff1a J=0\uff0cK=0\uff0cQ\u8f93\u51fa\u9001\u7ed9D\uff0c\u4fdd\u6301 J=0\uff0cK=1\uff0c\u4e0a\u4e0b\u5168disable\uff0cD\u7f6e0\uff0creset J=1\uff0cK=0\uff0cD\u8f93\u5165\u4e3a$\\overline{Q}+Q$\uff0c\u4e3a1 J=1\uff0cK=1\uff0c$\\overline{Q}$\u9001\u7ed9D\uff0c\u6c42\u53cd","title":"J-K Filp-Flop"},{"location":"CLDF/slide/Chapter4-P2/#t-flip-flop","text":"\u5355\u8f93\u5165T\uff0cT=0\u4fdd\u6301\uff0cT=1\u6c42\u53cd Reset (asynchronous or synchronous) essential \u9700\u8981reset\u8d4b\u521d\u503c","title":"T Flip-Flop"},{"location":"CLDF/slide/Chapter4-P2/#_3","text":"\u660e\u786e\u9700\u6c42 \u72b6\u6001\u56fe \u72b6\u6001\u8868 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b \u5de5\u827a\u6620\u5c04 \u7535\u8def\u9a8c\u8bc1","title":"\u65f6\u5e8f\u7535\u8def\u8bbe\u8ba1"},{"location":"CLDF/slide/Chapter5/","text":"Chapter 5 Digital Hardware Implementation Why Programmable Logic? Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable. Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices! Programming Technologies Classification Control connection Mask programming\uff1a\u5de5\u5382\u751f\u4ea7\u65f6\u5b8c\u6210\uff0c\u4e0d\u53ef\u518d\u7f16\u7a0b\uff0c\u597d\u5904\u662f\u6210\u672c\u4f4e\uff0cone time programming Fuse(\u7194\u4e1d)\uff1a\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse\uff1a\u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element\uff1a\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00 Build Lookup Table(LUT) \u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570 Transistor Switching Control \u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781\uff1a Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements(as in a memory) Characteristic Configuration ROM(Read Only Memory) \uff1aa fixed array of AND gates and a programmable array of OR gates \u56fa\u5b9a\u4e0e\u9635\u5217\uff0c\u53ef\u7f16\u7a0b\u6216\u9635\u5217 ROM size=address width \u00d7 word width = $2^2 \u00d74$= 16 bit Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. \u7f3a\u70b9\uff1a\u8f93\u5165\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570 \u6539\u8fdb\uff1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u65e2\u6709\u7684 PAL \u8f93\u51fa\u5f53\u4f5c\u8f93\u5165\uff0c\u8f93\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002 Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. \u4e0e PAL \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u80fd\u5bf9\u8f93\u51fa\u7ec4\u5408\u8fdb\u884c\u91cd\u7f16\u7a0b\u3002 \u5176\u540c PAL \u4e00\u6837\u5177\u6709\u4e00\u4e2a\u7f3a\u9677\u662f\uff0c\u56e0\u4e3a\u8868\u8fbe\u51fd\u6570\u7684\u65b9\u6cd5\u4e0d\u662f\u901a\u8fc7 SOM \u6216\u8005 POM \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570\u3002 \u5728\u57fa\u7840\u4e0a\u4e00\u4e2a\u6539\u8fdb\u662f\u5728\u8f93\u51fa\u7684\u65f6\u5019\u518d\u505a\u4e00\u6b21\u5f02\u6216\uff08\u4e0d\u7528\u975e\u95e8\u4f53\u73b0\u4e86\u53ef\u91cd\u7f16\u7a0b\u7684\u601d\u60f3\uff09\uff0c\u4ee5\u4ea7\u751f\u65b0\u7684\u9879\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u5f02\u6216\u95e8\u4f53\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u3002 \u4e0e\u9879\u8d44\u6e90\u6709\u9650\uff0c\u9700\u8981\u627e\u5230\u53ef\u91cd\u7528\u7684\u4e0e\u9879\u3002","title":"Chapter 5 Digital Hardware Implementation"},{"location":"CLDF/slide/Chapter5/#chapter-5-digital-hardware-implementation","text":"","title":"Chapter 5 Digital Hardware Implementation"},{"location":"CLDF/slide/Chapter5/#why-programmable-logic","text":"Facts: It is most economical to produce an IC in large volumes Many designs required only small volumes of ICs Need an IC that can be: Produced in large volumes Handle many designs required in small volumes A programmable logic part can be: made in large volumes programmed to implement large numbers of different low-volume designs Many programmable logic devices are field-programmable, i. e., can be programmed outside of the manufacturing environment Most programmable logic devices are erasable and reprogrammable. Allows \u201cupdating\u201d a device or correction of errors Allows reuse the device for a different design - the ultimate in re-usability! Ideal for course laboratories Programmable logic devices can be used to prototype design that will be implemented for sale in regular ICs. Complete Intel Pentium designs were actually prototyped with specialized systems based on large numbers of VLSI programmable devices!","title":"Why Programmable Logic?"},{"location":"CLDF/slide/Chapter5/#programming-technologies","text":"","title":"Programming Technologies"},{"location":"CLDF/slide/Chapter5/#classification","text":"","title":"Classification"},{"location":"CLDF/slide/Chapter5/#control-connection","text":"Mask programming\uff1a\u5de5\u5382\u751f\u4ea7\u65f6\u5b8c\u6210\uff0c\u4e0d\u53ef\u518d\u7f16\u7a0b\uff0c\u597d\u5904\u662f\u6210\u672c\u4f4e\uff0cone time programming Fuse(\u7194\u4e1d)\uff1a\u5728\u82af\u7247\u8bbe\u8ba1\u65f6\uff0c\u5728\u5f88\u591a\u82af\u7247\u5f15\u811a\u8fde\u63a5\u4e4b\u95f4\u6709 fuse, \u8bbe\u8ba1\u7535\u8def\u65f6\u4e0d\u9700\u8981\u4fdd\u7559\u8fde\u63a5\u7684\u7528\u9ad8\u7535\u538b\u4ea7\u751f\u9ad8\u7535\u6d41\uff0c\u7194\u65ad fuse. Antifuse\uff1a\u6700\u5f00\u59cb\u65ad\u5f00\uff0c\u51fb\u7a7f\u540e\u7535\u8def\u8fde\u63a5\u597d Single-bit storage element\uff1a\u5b58\u50a8\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u8fd9\u4e2a\u4f4d\u7684\u8f93\u51fa\u63a7\u5236\u4e00\u4e2a\u6676\u4f53\u7ba1\uff0c\u8fdb\u800c\u63a7\u5236\u4e24\u4e2a\u5f15\u811a\u8fde\u63a5/\u65ad\u5f00","title":"Control connection"},{"location":"CLDF/slide/Chapter5/#build-lookup-tablelut","text":"\u5982 16 \u4f4d\u5bc4\u5b58\u5668\uff08\u5b58\u771f\u503c\u8868\u7684\u503c\uff09 +16-1 Mux \u53ef\u6784\u6210\u56db\u8f93\u5165\u4e4b\u5185\u7684\u903b\u8f91\u6a21\u5757\uff0c\u53ea\u9700\u8981\u5c06 16\u4f4d\u5bc4\u5b58\u5668\u586b\u4e0a\u4e0d\u540c\u7684\u503c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e0d\u540c\u7684\u903b\u8f91\u51fd\u6570","title":"Build Lookup Table(LUT)"},{"location":"CLDF/slide/Chapter5/#transistor-switching-control","text":"\u7528\u6676\u4f53\u7ba1\u63a7\u5236\u5f00\u5173\uff0c\u7c7b\u4f3c\u8fde\u63a5\u63a7\u5236 \u6d6e\u52a8\u6805\u6781\uff1a Stored charge on a floating transistor gate Erasable Electrically erasable Flash (as in Flash Memory) Storage elements(as in a memory)","title":"Transistor Switching Control"},{"location":"CLDF/slide/Chapter5/#characteristic","text":"","title":"Characteristic"},{"location":"CLDF/slide/Chapter5/#configuration","text":"ROM(Read Only Memory) \uff1aa fixed array of AND gates and a programmable array of OR gates \u56fa\u5b9a\u4e0e\u9635\u5217\uff0c\u53ef\u7f16\u7a0b\u6216\u9635\u5217 ROM size=address width \u00d7 word width = $2^2 \u00d74$= 16 bit Programmable Array Logic (PAL) - a programmable array of AND gates feeding a fixed array of OR gates. \u7f3a\u70b9\uff1a\u8f93\u5165\u6570\u91cf\u6709\u9650\uff0c\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570 \u6539\u8fdb\uff1a\u901a\u8fc7\u5c06\u4e00\u4e2a\u65e2\u6709\u7684 PAL \u8f93\u51fa\u5f53\u4f5c\u8f93\u5165\uff0c\u8f93\u5165\u5230\u53e6\u5916\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002 Programmable Logic Array (PLA) - a programmable array of AND gates feeding a programmable array of OR gates. \u4e0e PAL \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u8f93\u51fa\u7684\u65f6\u5019\u4e5f\u80fd\u5bf9\u8f93\u51fa\u7ec4\u5408\u8fdb\u884c\u91cd\u7f16\u7a0b\u3002 \u5176\u540c PAL \u4e00\u6837\u5177\u6709\u4e00\u4e2a\u7f3a\u9677\u662f\uff0c\u56e0\u4e3a\u8868\u8fbe\u51fd\u6570\u7684\u65b9\u6cd5\u4e0d\u662f\u901a\u8fc7 SOM \u6216\u8005 POM \u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u4e0d\u4e00\u5b9a\u80fd\u591f\u5b8c\u5907\u8868\u8fbe\u51fd\u6570\u3002 \u5728\u57fa\u7840\u4e0a\u4e00\u4e2a\u6539\u8fdb\u662f\u5728\u8f93\u51fa\u7684\u65f6\u5019\u518d\u505a\u4e00\u6b21\u5f02\u6216\uff08\u4e0d\u7528\u975e\u95e8\u4f53\u73b0\u4e86\u53ef\u91cd\u7f16\u7a0b\u7684\u601d\u60f3\uff09\uff0c\u4ee5\u4ea7\u751f\u65b0\u7684\u9879\uff0c\u6765\u5f25\u8865\u9879\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u5f02\u6216\u95e8\u4f53\u73b0\u4e86\u53ef\u63a7\u6c42\u53cd\u3002 \u4e0e\u9879\u8d44\u6e90\u6709\u9650\uff0c\u9700\u8981\u627e\u5230\u53ef\u91cd\u7528\u7684\u4e0e\u9879\u3002","title":"Configuration"},{"location":"CLDF/slide/Chapter6/","text":"Registers & Register Transfers Register \u4fdd\u6301\u4fe1\u53f7\u5728\u591a\u4e2a\u65f6\u949f\u5468\u671f\u4e0d\u53d8 \u6dfb\u52a0Load\uff0cLoad\u4e3a0\u65f6\u65e0\u8bbaclock\u4e3a\u4f55\u503c\uff0c\u8f93\u51fa\u4e0d\u53d8\uff0cLoad\u4e3a1\u65f6\uff0c\u8f93\u51fa\u968fclock\u53d8\u5316 \u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u52a0\u6216\u95e8 \u7136\u800c\uff0c\u5728\u95e8\u63a7\u65f6\u949f\u6280\u672f\u4e2d\uff0c\u7531\u4e8e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u903b\u8f91\u95e8\uff0c\u65f6\u949f\u8109\u51b2\u5230\u8fbe Control \u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u989d\u5916\u7684\u4f20\u64ad\u5ef6\u65f6\uff0c\u5373\u65f6\u949f\u504f\u79fb(clock skew)\u3002\u800c\u8fd9\u5fae\u5c0f\u7684\u5ef6\u65f6\u4f1a\u5bfc\u81f4\u5728\u6574\u4e2a\u540c\u6b65\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7ec4\u4ef6\u5f97\u5230\u7684\u65f6\u949f\u8109\u51b2\u6709\u504f\u5dee\uff0c\u800c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u6240\u4ee5\u5728\u5b9e\u9645\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5e94\u5f53\u907f\u514d\u6216\u5c3d\u53ef\u80fd\u7f29\u5c0f\u65f6\u949f\u504f\u79fb\u3002 \u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u4e0d\u5e0c\u671b\u5b83\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c06\u5b83\u7684\u8f93\u5165\u8f7d\u5165\uff0c\u4e5f\u5c31\u662f\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e8c\u9009\u4e00\u591a\u8def\u590d\u7528\u5668\u5b9e\u73b0\u3002 Register Cell Design Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate Specifications A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state) Register Transfer Operations The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations \u76d1\u7763\u64cd\u4f5c\u5e8f\u5217\u7684\u63a7\u5236 Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations \u5176\u4e2d\uff0c\u6700\u57fa\u7840\u7684\u90a3\u90e8\u5206\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5fae\u64cd\u4f5c(microoperation)\uff0c\u5b83\u4eec\u662f\u5b9e\u73b0\u590d\u6742\u64cd\u4f5c\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u5c06 R1 \u7684\u6570\u636e\u8f7d\u5165 R2\uff0c\u5c06 R1 \u548c R2 \u76f8\u52a0\uff0c\u6216\u662f\u81ea\u589e R1 \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u6bd4\u7279\u5411\u91cf\u4e3a\u8f7d\u4f53\u5e76\u884c\u5b9e\u73b0\u7684\u3002 Register Notation RTL: \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00(Register Transfer Language) $sl,sr$\u4f8b\u5b50\uff1a R2<-sl R1 \uff0cR1\u5de6\u79fb\u4e00\u4f4d\u4f20\u7ed9R2 example:\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d R1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002K1\u63a7\u5236\u7684\u662fR2\u662f\u5426\u63a5\u6536R1\u7684\u4fe1\u53f7\uff0c\u800c\u975eR1\u662f\u5426\u53d1\u9001 Register Transfer Structures 1.Multiplexer-Based Transfers\uff1a $K1:R0\\leftarrow R1,K2\\overline{K1}:R0\\leftarrow R2 $,\u4e5f\u5c31\u662f$K1+K2$\u4e3a\u771f\u65f6R0\u4f1a\u88ab\u66f4\u65b0 \u5176\u4e2d MUX \u7684 k \u223c( n \u22121) \u5b9e\u73b0\u4e86 \u8f6c\u79fb \u64cd\u4f5c\u3002 2. Multiplexer Bus \u901a\u8fc7\u603b\u7ebfbus\u5b9e\u73b0n\u90091\u591a\u8def\u590d\u7528\u5668\u5b8c\u6210\u5bc4\u5b58\u5668\u4e4b\u95f4\u503c\u7684\u4ea4\u6362 3. Three-State Bus The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers. Cost is further reduced, but transfers are limited. \u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u88ab\u4f7f\u80fd\u65f6\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u4e0d\u5904\u4e8e\u9ad8\u963b\u6001\u3002\u7535\u8def\u4e2d\u6240\u6709\u90fd\u662f\u8be5\u503c\u3002 \u51cf\u5c11\u63a5\u7ebf\uff0c\u964d\u4f4e\u5e03\u7ebf\u96be\u5ea6\u3002 \u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09 Shift Registers \u4f7f\u7528\u89e6\u53d1\u5668\u800c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\uff08\u9664\u6781\u5c11\u7279\u4f8b\uff09 \u53f3\u79fb \u53f3\u79fb+\u5e76\u884c\u8f93\u5165 Parallel Load Shift Registers Shift\u4e3a1\uff0c\u79fb\u4f4d Shift\u4e3a0\uff0cLoad0\uff0c\u4fdd\u6301 Shift\u4e3a0\uff0cLoad1\uff0c\u5e76\u884c\u52a0\u8f7d \u53cc\u5411\u4f4d\u79fb\u5bc4\u5b58\u5668 \u5bf9$S_1S_0$,00\u4fdd\u6301\uff0c01\u5de6\u79fb\uff0c10\u53f3\u79fb\uff0c11\u5e76\u884c\u8f93\u5165 \u5176\u672c\u8d28\u4e0a\u5c31\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MUX \u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u65f6\u949f\u662f\u7ee7\u627f $(i+1)\u3001(i-1)\u3001D_i$\u8fd8\u662f$Q$ Counters Ripple Counter B\u9891\u7387\u662fA\u4e00\u534a\u3002A\u8f93\u51fa\u53d6\u53cd\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u3002 \u53ef\u4ee5\u7528\u505a\u65f6\u949f\u5206\u9891\u3002 \u4e0a\u56fe\u4e2d\uff0c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 1 \u5230 0 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u6b63\u5411\u8ba1\u65f6(Upward Counting)\uff1b \u53cd\u4e4b\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 0 \u5230 1 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u9006\u5411\u8f93\u51fa(Downward Counting)\uff1b \u7f3a\u70b9\uff1a\u6bcf\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u4f20\u9012\u90fd\u6709\u5ef6\u65f6\uff0c\u540c\u65f6\u4e0d\u80fd\u4f5c\u4e3a\u540c\u6b65\u8ba1\u6570\u5668\u3002\u7b80\u5355\u4f46\u4e0d\u5b89\u5168\u3002 \u7406\u8bba\u4e0a\uff0c111\u4e4b\u540e\u5e94\u8be5\u53d8\u6210000\uff0c\u4f46\u5b9e\u9645\u4e0a\uff1a$111->110->100->000$ \u6b64\u5916\u5bf9\u4e8en bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f $n\\cdot t_{PHL}$ \u901f\u5ea6\u4f1a\u975e\u5e38\u6162. \u4f7f\u7528\uff1a\u8d8a\u9ad8\u7ea7\u7684\u89e6\u53d1\u5668\u8d8a\u4e0d\u5bb9\u6613\u88ab\u89e6\u53d1\uff0c\u529f\u8017\u4f4e\uff0c\u53ef\u7528\u4e8e\u8109\u51b2\u8ba1\u6570\u7b49\u573a\u666f\u3002 Synchronous Counters \u6bcf\u6b21\u901a\u8fc7\u81ea\u589e\u5668+1 \u89c2\u5bdf\u53d1\u73b0\uff0c\u4f4d\u6570\u589e\u52a0\u65f6\u4e0d\u5229\u4e8e\u5316\u7b80\uff0c\u4f46$Q_n$\u53d6\u53cd\u5f53\u4e14\u4ec5\u5f530~n-1\u5747\u4e3a1\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e0e\u95e8\u94fe\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7 \u4f7f\u80fd\u4e3a0\u76f8\u5f53\u4e8e\u4fdd\u6301\u3002 CO\u8f93\u51fa\u8fdb\u4f4d\u7528\u4e8e\u4e0b\u4e00\u90e8\u5206\u7535\u8def \u95ee\u9898\uff1a\u540c\u6837\u5b58\u5728\u5ef6\u8fdf\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1alook ahead \u7528\u4e00\u4e2a\u4e0e\u95e8\u628a\u6240\u6709\u4f4e\u4f4d\u63a5\u8d77\u6765 symbol\uff1a Other Counters Down Counter Up-Down Counter Parallel Load Counter Divide-by-n(Module n) Counter\uff1a\u5341\u8fdb\u5236\u6a219\uff0c\u65f6\u949f\u6a215 Counter with Parallel Load \u5b9e\u73b0\u5e76\u884c\u8f93\u5165 Design Example: Synchronous BCD \u72b6\u6001\u8868\uff1a \u5361\u8bfa\u56fe\u5316\u7b80 \u9a8c\u8bc1\u65e0\u7528\u72b6\u6001\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u4f1a\u6b7b\u9501 Counting Modulo N \u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u57fa\u7840\u4e0a\uff0c\u91c7\u53d6\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6 \u5f02\u6b65\uff0c\u901a\u8fc7clear\uff08\u5f02\u6b65\u590d\u4f4d\u811a\uff09\uff0c\u8ba1\u6570\u8fbe\u5230N\u5b9e\u65f6\u6e05\u96f6\u5373\u53ef \u540c\u6b65\uff0cN-1\u65f6reset\u4e3a1\uff0c\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u6e05\u96f6 better choice \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7. Serial Operations \u4e32\u884c\uff1a\u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8 \u5f53\u4eca\u9ad8\u901f\u4f20\u8f93\u5982USB\uff0c\u4ee5\u592a\u7f51\u7ebf\u7b49\u90fd\u4f7f\u7528\u4e32\u884c \u4e32\u884c\u52a0\u6cd5\u5668\uff1a\u4ec5\u4f7f\u7528\u4e00\u4f4d\u5168\u52a0\u5668\u4e0e\u4e00\u4e2a\u7528\u4e8e\u8fdb\u4f4d\u7684\u89e6\u53d1\u5668\u3002The result is stored in the A register and the final carry in the flip-flop Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Shifting a binary number left is equivalent to multiplying by 2.Shifting a binary number right is equivalent to dividing by 2.","title":"Registers & Register Transfers"},{"location":"CLDF/slide/Chapter6/#registers-register-transfers","text":"","title":"Registers &amp; Register Transfers"},{"location":"CLDF/slide/Chapter6/#register","text":"","title":"Register"},{"location":"CLDF/slide/Chapter6/#_1","text":"\u6dfb\u52a0Load\uff0cLoad\u4e3a0\u65f6\u65e0\u8bbaclock\u4e3a\u4f55\u503c\uff0c\u8f93\u51fa\u4e0d\u53d8\uff0cLoad\u4e3a1\u65f6\uff0c\u8f93\u51fa\u968fclock\u53d8\u5316 \u65b9\u5f0f\u4e00\uff1a\u76f4\u63a5\u52a0\u6216\u95e8 \u7136\u800c\uff0c\u5728\u95e8\u63a7\u65f6\u949f\u6280\u672f\u4e2d\uff0c\u7531\u4e8e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u903b\u8f91\u95e8\uff0c\u65f6\u949f\u8109\u51b2\u5230\u8fbe Control \u7684\u65f6\u5019\u4f1a\u51fa\u73b0\u989d\u5916\u7684\u4f20\u64ad\u5ef6\u65f6\uff0c\u5373\u65f6\u949f\u504f\u79fb(clock skew)\u3002\u800c\u8fd9\u5fae\u5c0f\u7684\u5ef6\u65f6\u4f1a\u5bfc\u81f4\u5728\u6574\u4e2a\u540c\u6b65\u7cfb\u7edf\u4e2d\uff0c\u4e0d\u540c\u7ec4\u4ef6\u5f97\u5230\u7684\u65f6\u949f\u8109\u51b2\u6709\u504f\u5dee\uff0c\u800c\u8fd9\u662f\u6211\u4eec\u6240\u4e0d\u5e0c\u671b\u770b\u5230\u7684\u3002\u6240\u4ee5\u5728\u5b9e\u9645\u8bbe\u8ba1\u4e2d\uff0c\u6211\u4eec\u5e94\u5f53\u907f\u514d\u6216\u5c3d\u53ef\u80fd\u7f29\u5c0f\u65f6\u949f\u504f\u79fb\u3002 \u53e6\u5916\u4e00\u4e2a\u505a\u6cd5\u662f\uff0c\u5728\u4e0d\u5e0c\u671b\u5b83\u4fee\u6539\u7684\u65f6\u5019\uff0c\u4e0d\u65ad\u5c06\u5b83\u7684\u8f93\u5165\u8f7d\u5165\uff0c\u4e5f\u5c31\u662f\u4fdd\u6301\u4e0d\u53d8\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u4e8c\u9009\u4e00\u591a\u8def\u590d\u7528\u5668\u5b9e\u73b0\u3002","title":"\u4fdd\u6301\u4fe1\u53f7\u5728\u591a\u4e2a\u65f6\u949f\u5468\u671f\u4e0d\u53d8"},{"location":"CLDF/slide/Chapter6/#register-cell-design","text":"Assume that a register consists of identical cells.(\u6bcf\u4e2a\u4f4d\u6267\u884c\u76f8\u540c\u64cd\u4f5c) Design representative cell for the register Connect copies of the cell together to form the register Applying appropriate \"boundary conditions\" to cells that need to be different and contract if appropriate","title":"Register Cell Design"},{"location":"CLDF/slide/Chapter6/#specifications","text":"A register Data inputs to the register Control input combinations to the register e.g. \u63a7\u5236\u8f93\u5165: Load, Shift, Add. \u6211\u4eec\u53ef\u4ee5\u7528\u4e09\u4e2a\u5f15\u811a\u5206\u522b\u8868\u793a\u63a7\u5236\u8f93\u5165(not encoded, one-hot code)\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u5f15\u811a S0 S1 \u7684\u7ec4\u5408\u6765\u8868\u793a\u63a7\u5236\u8f93\u5165(encoded) A set of register functions (typically specified as register transfers) \u5373\u89c4\u5b9a\u63a7\u5236\u8f93\u5165\u7684\u51fd\u6570\u662f\u5bf9\u6570\u636e\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c A hold state specification( e.g. If all control inputs are 0, hold the current register state)","title":"Specifications"},{"location":"CLDF/slide/Chapter6/#register-transfer-operations","text":"The movement and processing of data stored in registers Three basic components: set of registers(\u6e90\u5bc4\u5b58\u5668\uff0c\u76ee\u6807\u5bc4\u5b58\u5668) operations control of operations \u76d1\u7763\u64cd\u4f5c\u5e8f\u5217\u7684\u63a7\u5236 Elementary Operations -- load, count, shift, add, bitwise \"OR\", etc. Elementary operations called microoperations \u5176\u4e2d\uff0c\u6700\u57fa\u7840\u7684\u90a3\u90e8\u5206\u64cd\u4f5c\u88ab\u79f0\u4e3a\u5fae\u64cd\u4f5c(microoperation)\uff0c\u5b83\u4eec\u662f\u5b9e\u73b0\u590d\u6742\u64cd\u4f5c\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u5c06 R1 \u7684\u6570\u636e\u8f7d\u5165 R2\uff0c\u5c06 R1 \u548c R2 \u76f8\u52a0\uff0c\u6216\u662f\u81ea\u589e R1 \u7b49\u3002\u5b83\u4eec\u901a\u5e38\u4ee5\u6bd4\u7279\u5411\u91cf\u4e3a\u8f7d\u4f53\u5e76\u884c\u5b9e\u73b0\u7684\u3002","title":"Register Transfer Operations"},{"location":"CLDF/slide/Chapter6/#register-notation","text":"RTL: \u5bc4\u5b58\u5668\u4f20\u8f93\u8bed\u8a00(Register Transfer Language) $sl,sr$\u4f8b\u5b50\uff1a R2<-sl R1 \uff0cR1\u5de6\u79fb\u4e00\u4f4d\u4f20\u7ed9R2 example:\u5982\u679c K1=1 \u90a3\u4e48\u5c06 R1 \u7684\u4fe1\u53f7\u4f20\u7ed9 R2, \u6211\u4eec\u53ef\u4ee5\u5199\u4e3a K1:(R2\u2190R1), \u5176\u4e2d R1 \u662f\u4e00\u4e2a\u63a7\u5236\u53d8\u91cf\uff0c\u8868\u660e\u6761\u4ef6\u6267\u884c\u7684\u53d1\u751f\u662f\u5426\u53d1\u751f\u3002K1\u63a7\u5236\u7684\u662fR2\u662f\u5426\u63a5\u6536R1\u7684\u4fe1\u53f7\uff0c\u800c\u975eR1\u662f\u5426\u53d1\u9001","title":"Register Notation"},{"location":"CLDF/slide/Chapter6/#register-transfer-structures","text":"","title":"Register Transfer Structures"},{"location":"CLDF/slide/Chapter6/#1multiplexer-based-transfers","text":"$K1:R0\\leftarrow R1,K2\\overline{K1}:R0\\leftarrow R2 $,\u4e5f\u5c31\u662f$K1+K2$\u4e3a\u771f\u65f6R0\u4f1a\u88ab\u66f4\u65b0 \u5176\u4e2d MUX \u7684 k \u223c( n \u22121) \u5b9e\u73b0\u4e86 \u8f6c\u79fb \u64cd\u4f5c\u3002","title":"1.Multiplexer-Based Transfers\uff1a"},{"location":"CLDF/slide/Chapter6/#2-multiplexer-bus","text":"\u901a\u8fc7\u603b\u7ebfbus\u5b9e\u73b0n\u90091\u591a\u8def\u590d\u7528\u5668\u5b8c\u6210\u5bc4\u5b58\u5668\u4e4b\u95f4\u503c\u7684\u4ea4\u6362","title":"2. Multiplexer Bus"},{"location":"CLDF/slide/Chapter6/#3-three-state-bus","text":"The 3-input MUX can be replaced by a 3-state node (bus) and 3-state buffers. Cost is further reduced, but transfers are limited. \u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u88ab\u4f7f\u80fd\u65f6\uff0c\u4e5f\u5c31\u662f\u53ea\u6709\u4e00\u4e2a\u4e09\u6001\u95e8\u4e0d\u5904\u4e8e\u9ad8\u963b\u6001\u3002\u7535\u8def\u4e2d\u6240\u6709\u90fd\u662f\u8be5\u503c\u3002 \u51cf\u5c11\u63a5\u7ebf\uff0c\u964d\u4f4e\u5e03\u7ebf\u96be\u5ea6\u3002 \u5c06\u5bc4\u5b58\u5668\u548c\u4e09\u6001\u95e8\u5c01\u88c5\u5728\u4e00\u8d77\u8003\u8651\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u5916\u90e8\u5f15\u811a(n bits), \u4f46\u591a\u8def\u590d\u7528\u5668\u7684\u65b9\u6cd5\u9700\u8981\u4e24\u6839\u4f4d\u5bbd\u662f n \u7684\u5f15\u811a\uff08\u56e0\u4e3a\u4e09\u6001\u95e8\u7684\u5916\u90e8\u5f15\u811a\u662f\u53ef\u4ee5\u53cc\u5411\u4f20\u8f93\u6570\u636e\u7684\uff09","title":"3. Three-State Bus"},{"location":"CLDF/slide/Chapter6/#shift-registers","text":"\u4f7f\u7528\u89e6\u53d1\u5668\u800c\u4e0d\u80fd\u4f7f\u7528\u9501\u5b58\u5668\uff08\u9664\u6781\u5c11\u7279\u4f8b\uff09 \u53f3\u79fb \u53f3\u79fb+\u5e76\u884c\u8f93\u5165 Parallel Load Shift Registers Shift\u4e3a1\uff0c\u79fb\u4f4d Shift\u4e3a0\uff0cLoad0\uff0c\u4fdd\u6301 Shift\u4e3a0\uff0cLoad1\uff0c\u5e76\u884c\u52a0\u8f7d","title":"Shift Registers"},{"location":"CLDF/slide/Chapter6/#_2","text":"\u5bf9$S_1S_0$,00\u4fdd\u6301\uff0c01\u5de6\u79fb\uff0c10\u53f3\u79fb\uff0c11\u5e76\u884c\u8f93\u5165 \u5176\u672c\u8d28\u4e0a\u5c31\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a MUX \u6765\u9009\u62e9\u4e0b\u4e00\u4e2a\u65f6\u949f\u662f\u7ee7\u627f $(i+1)\u3001(i-1)\u3001D_i$\u8fd8\u662f$Q$","title":"\u53cc\u5411\u4f4d\u79fb\u5bc4\u5b58\u5668"},{"location":"CLDF/slide/Chapter6/#counters","text":"","title":"Counters"},{"location":"CLDF/slide/Chapter6/#ripple-counter","text":"B\u9891\u7387\u662fA\u4e00\u534a\u3002A\u8f93\u51fa\u53d6\u53cd\u4f5c\u4e3aB\u7684\u65f6\u949f\u4fe1\u53f7\u3002 \u53ef\u4ee5\u7528\u505a\u65f6\u949f\u5206\u9891\u3002 \u4e0a\u56fe\u4e2d\uff0c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u53d6\u53cd\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 1 \u5230 0 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u6b63\u5411\u8ba1\u65f6(Upward Counting)\uff1b \u53cd\u4e4b\uff0c\u5982\u679c\u4e0b\u4e00\u4e2a FF \u7684\u65f6\u949f\u6765\u81ea\u4e8e\u4e0a\u4e00\u4e2a FF \u7684\u76f4\u63a5\u8f93\u51fa\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4e0a\u5347\u6cbf\u89e6\u53d1\u7684 FF \u6765\u8bf4\uff0c\u4e0b\u4e00\u4e2a FF \u4f1a\u5728\u4e0a\u4e00\u4e2a FF \u7684\u8f93\u51fa\u4ece 0 \u5230 1 \u65f6\u81ea\u53cd\uff0c\u6240\u4ee5\u662f\u9006\u5411\u8f93\u51fa(Downward Counting)\uff1b \u7f3a\u70b9\uff1a\u6bcf\u4e00\u4e2a\u65f6\u949f\u4fe1\u53f7\u4f20\u9012\u90fd\u6709\u5ef6\u65f6\uff0c\u540c\u65f6\u4e0d\u80fd\u4f5c\u4e3a\u540c\u6b65\u8ba1\u6570\u5668\u3002\u7b80\u5355\u4f46\u4e0d\u5b89\u5168\u3002 \u7406\u8bba\u4e0a\uff0c111\u4e4b\u540e\u5e94\u8be5\u53d8\u6210000\uff0c\u4f46\u5b9e\u9645\u4e0a\uff1a$111->110->100->000$ \u6b64\u5916\u5bf9\u4e8en bits, \u6700\u574f\u65f6\u95f4\u5ef6\u8fdf\u662f $n\\cdot t_{PHL}$ \u901f\u5ea6\u4f1a\u975e\u5e38\u6162. \u4f7f\u7528\uff1a\u8d8a\u9ad8\u7ea7\u7684\u89e6\u53d1\u5668\u8d8a\u4e0d\u5bb9\u6613\u88ab\u89e6\u53d1\uff0c\u529f\u8017\u4f4e\uff0c\u53ef\u7528\u4e8e\u8109\u51b2\u8ba1\u6570\u7b49\u573a\u666f\u3002","title":"Ripple Counter"},{"location":"CLDF/slide/Chapter6/#synchronous-counters","text":"\u6bcf\u6b21\u901a\u8fc7\u81ea\u589e\u5668+1 \u89c2\u5bdf\u53d1\u73b0\uff0c\u4f4d\u6570\u589e\u52a0\u65f6\u4e0d\u5229\u4e8e\u5316\u7b80\uff0c\u4f46$Q_n$\u53d6\u53cd\u5f53\u4e14\u4ec5\u5f530~n-1\u5747\u4e3a1\uff0c\u56e0\u6b64\u53ef\u4ee5\u91c7\u53d6\u4ee5\u4e0b\u4e0e\u95e8\u94fe\u4f5c\u4e3a\u63a7\u5236\u4fe1\u53f7 \u4f7f\u80fd\u4e3a0\u76f8\u5f53\u4e8e\u4fdd\u6301\u3002 CO\u8f93\u51fa\u8fdb\u4f4d\u7528\u4e8e\u4e0b\u4e00\u90e8\u5206\u7535\u8def \u95ee\u9898\uff1a\u540c\u6837\u5b58\u5728\u5ef6\u8fdf\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1alook ahead \u7528\u4e00\u4e2a\u4e0e\u95e8\u628a\u6240\u6709\u4f4e\u4f4d\u63a5\u8d77\u6765 symbol\uff1a","title":"Synchronous Counters"},{"location":"CLDF/slide/Chapter6/#other-counters","text":"Down Counter Up-Down Counter Parallel Load Counter Divide-by-n(Module n) Counter\uff1a\u5341\u8fdb\u5236\u6a219\uff0c\u65f6\u949f\u6a215","title":"Other Counters"},{"location":"CLDF/slide/Chapter6/#counter-with-parallel-load","text":"\u5b9e\u73b0\u5e76\u884c\u8f93\u5165","title":"Counter with Parallel Load"},{"location":"CLDF/slide/Chapter6/#design-example-synchronous-bcd","text":"\u72b6\u6001\u8868\uff1a \u5361\u8bfa\u56fe\u5316\u7b80 \u9a8c\u8bc1\u65e0\u7528\u72b6\u6001\u60c5\u51b5\uff0c\u53d1\u73b0\u4e0d\u4f1a\u6b7b\u9501","title":"Design Example: Synchronous BCD"},{"location":"CLDF/slide/Chapter6/#counting-modulo-n","text":"\u4e8c\u8fdb\u5236\u8ba1\u6570\u5668\u57fa\u7840\u4e0a\uff0c\u91c7\u53d6\u540c\u6b65/\u5f02\u6b65\u6e05\u96f6 \u5f02\u6b65\uff0c\u901a\u8fc7clear\uff08\u5f02\u6b65\u590d\u4f4d\u811a\uff09\uff0c\u8ba1\u6570\u8fbe\u5230N\u5b9e\u65f6\u6e05\u96f6\u5373\u53ef \u540c\u6b65\uff0cN-1\u65f6reset\u4e3a1\uff0c\u5728\u4e0b\u4e00\u4e2a\u4e0a\u5347\u6cbf\u6e05\u96f6 better choice \u591a\u4f4d\u5bc4\u5b58\u5668\uff0c\u5206\u5f00\u8bbe\u8ba1\uff0c\u5982\u8bbe\u8ba1\u65f6\u95f4\uff0c\u4f4e\u4f4d\u4e3a\u6a21 10 \u8ba1\u6570\u5668\uff0c\u9ad8\u4f4d\u4e3a\u6a21 6 \u8ba1\u65f6\u5668\uff0c\u4f4e\u4f4d\u7684 Carry Output \u65e2\u4f5c\u4e3a\u4f4e\u4f4d\u7684\u540c\u6b65\u6e05\u96f6\u4fe1\u53f7\uff0c\u53c8\u662f\u9ad8\u4f4d\u7684 Enable \u4fe1\u53f7.","title":"Counting Modulo N"},{"location":"CLDF/slide/Chapter6/#serial-operations","text":"\u4e32\u884c\uff1a\u5bc4\u5b58\u5668\u4e00\u6b21\u53ea\u63a5\u53d7\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u5982\u679c\u4f20\u8f93 n \u4f4d\u9700\u8981 n \u4e2a\u65f6\u949f\u5468\u671f\u3002 \u9700\u8981\u7684\u5f15\u7ebf\u6570\u91cf\u5c11\uff0c\u4e24\u4e2a\u8bbe\u5907\u4e4b\u95f4\u53ea\u9700\u8981\u4e00\u6761\u7ebf\u548c\u4e00\u6761\u5730\u7ebf\u5c31\u53ef\u4ee5\u4e86\u3002\u800c\u4e14\u56e0\u4e3a\u5f15\u7ebf\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u5176\u65f6\u949f\u9891\u7387\u8fbe\u5230\u975e\u5e38\u9ad8 \u5f53\u4eca\u9ad8\u901f\u4f20\u8f93\u5982USB\uff0c\u4ee5\u592a\u7f51\u7ebf\u7b49\u90fd\u4f7f\u7528\u4e32\u884c \u4e32\u884c\u52a0\u6cd5\u5668\uff1a\u4ec5\u4f7f\u7528\u4e00\u4f4d\u5168\u52a0\u5668\u4e0e\u4e00\u4e2a\u7528\u4e8e\u8fdb\u4f4d\u7684\u89e6\u53d1\u5668\u3002The result is stored in the A register and the final carry in the flip-flop Serial addition is a low cost way to add large numbers of operands, since a \u201ctree\u201d of full adder cells can be made to any depth, and each new level doubles the number of operands. Other operations can be performed serially as well, such as parity generation/checking or more complex error-check codes. Shifting a binary number left is equivalent to multiplying by 2.Shifting a binary number right is equivalent to dividing by 2.","title":"Serial Operations"}]}